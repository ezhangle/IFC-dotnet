//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from STEP.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace STEP {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class STEPParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, IntegerLiteral=9, 
		Letter=10, CapitalLetter=11, DateTime=12, Derived=13, BoolLogical=14, 
		Enum=15, RealLiteral=16, DATA=17, ENDSEC=18, FILE_DESCRIPTION=19, FILE_NAME=20, 
		FILE_SCHEMA=21, HEADER=22, Id=23, ISO=24, ISO_END=25, StringLiteral=26, 
		TypeRef=27, Undefined=28, AnyString=29, NewlineChar=30, WS=31, Comments=32;
	public const int
		RULE_author = 0, RULE_authorisation = 1, RULE_collection = 2, RULE_collectionValue = 3, 
		RULE_constructor = 4, RULE_data = 5, RULE_description = 6, RULE_file = 7, 
		RULE_fileDescription = 8, RULE_fileName = 9, RULE_filePath = 10, RULE_fileSchema = 11, 
		RULE_header = 12, RULE_implementation = 13, RULE_instance = 14, RULE_name = 15, 
		RULE_originating_system = 16, RULE_organization = 17, RULE_parameter = 18, 
		RULE_preprocessor_version = 19, RULE_timeStamp = 20;
	public static readonly string[] ruleNames = {
		"author", "authorisation", "collection", "collectionValue", "constructor", 
		"data", "description", "file", "fileDescription", "fileName", "filePath", 
		"fileSchema", "header", "implementation", "instance", "name", "originating_system", 
		"organization", "parameter", "preprocessor_version", "timeStamp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "','", "')'", "'()'", "';'", "'''", "'.'", "'='", null, null, 
		null, null, "'*'", null, null, null, "'DATA'", "'ENDSEC'", "'FILE_DESCRIPTION'", 
		"'FILE_NAME'", "'FILE_SCHEMA'", "'HEADER'", null, null, null, null, null, 
		"'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "IntegerLiteral", 
		"Letter", "CapitalLetter", "DateTime", "Derived", "BoolLogical", "Enum", 
		"RealLiteral", "DATA", "ENDSEC", "FILE_DESCRIPTION", "FILE_NAME", "FILE_SCHEMA", 
		"HEADER", "Id", "ISO", "ISO_END", "StringLiteral", "TypeRef", "Undefined", 
		"AnyString", "NewlineChar", "WS", "Comments"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "STEP.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static STEPParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public STEPParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public STEPParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class AuthorContext : ParserRuleContext {
		public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public AuthorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_author; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterAuthor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitAuthor(this);
		}
	}

	[RuleVersion(0)]
	public AuthorContext author() {
		AuthorContext _localctx = new AuthorContext(Context, State);
		EnterRule(_localctx, 0, RULE_author);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(AnyString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuthorisationContext : ParserRuleContext {
		public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public AuthorisationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authorisation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterAuthorisation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitAuthorisation(this);
		}
	}

	[RuleVersion(0)]
	public AuthorisationContext authorisation() {
		AuthorisationContext _localctx = new AuthorisationContext(Context, State);
		EnterRule(_localctx, 2, RULE_authorisation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(AnyString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public CollectionValueContext[] collectionValue() {
			return GetRuleContexts<CollectionValueContext>();
		}
		public CollectionValueContext collectionValue(int i) {
			return GetRuleContext<CollectionValueContext>(i);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 4, RULE_collection);
		int _la;
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; Match(T__0);
				State = 47; collectionValue();
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 48; Match(T__1);
					State = 49; collectionValue();
					}
					}
					State = 54;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 55; Match(T__2);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionValueContext : ParserRuleContext {
		public ITerminalNode RealLiteral() { return GetToken(STEPParser.RealLiteral, 0); }
		public ITerminalNode IntegerLiteral() { return GetToken(STEPParser.IntegerLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(STEPParser.StringLiteral, 0); }
		public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public ITerminalNode Id() { return GetToken(STEPParser.Id, 0); }
		public CollectionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterCollectionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitCollectionValue(this);
		}
	}

	[RuleVersion(0)]
	public CollectionValueContext collectionValue() {
		CollectionValueContext _localctx = new CollectionValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_collectionValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << RealLiteral) | (1L << Id) | (1L << StringLiteral) | (1L << AnyString))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		public ITerminalNode TypeRef() { return GetToken(STEPParser.TypeRef, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 8, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(TypeRef);
			State = 63; Match(T__0);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << IntegerLiteral) | (1L << Derived) | (1L << BoolLogical) | (1L << Enum) | (1L << RealLiteral) | (1L << Id) | (1L << StringLiteral) | (1L << TypeRef) | (1L << Undefined) | (1L << AnyString))) != 0)) {
				{
				State = 64; parameter();
				}
			}

			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 67; Match(T__1);
				State = 68; parameter();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 74; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataContext : ParserRuleContext {
		public ITerminalNode DATA() { return GetToken(STEPParser.DATA, 0); }
		public ITerminalNode ENDSEC() { return GetToken(STEPParser.ENDSEC, 0); }
		public InstanceContext[] instance() {
			return GetRuleContexts<InstanceContext>();
		}
		public InstanceContext instance(int i) {
			return GetRuleContext<InstanceContext>(i);
		}
		public DataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitData(this);
		}
	}

	[RuleVersion(0)]
	public DataContext data() {
		DataContext _localctx = new DataContext(Context, State);
		EnterRule(_localctx, 10, RULE_data);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(DATA);
			State = 77; Match(T__4);
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Id) {
				{
				{
				State = 78; instance();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 84; Match(ENDSEC);
			State = 85; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterDescription(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitDescription(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 12, RULE_description);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AnyString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87; Match(AnyString);
				}
				break;
			case T__0:
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; collection();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContext : ParserRuleContext {
		public ITerminalNode ISO() { return GetToken(STEPParser.ISO, 0); }
		public HeaderContext header() {
			return GetRuleContext<HeaderContext>(0);
		}
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public ITerminalNode ISO_END() { return GetToken(STEPParser.ISO_END, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 14, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(ISO);
			State = 92; header();
			State = 93; data();
			State = 94; Match(ISO_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileDescriptionContext : ParserRuleContext {
		public ITerminalNode FILE_DESCRIPTION() { return GetToken(STEPParser.FILE_DESCRIPTION, 0); }
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public ImplementationContext implementation() {
			return GetRuleContext<ImplementationContext>(0);
		}
		public FileDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileDescription; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterFileDescription(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitFileDescription(this);
		}
	}

	[RuleVersion(0)]
	public FileDescriptionContext fileDescription() {
		FileDescriptionContext _localctx = new FileDescriptionContext(Context, State);
		EnterRule(_localctx, 16, RULE_fileDescription);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(FILE_DESCRIPTION);
			State = 97; Match(T__0);
			State = 98; description();
			State = 99; Match(T__1);
			State = 100; implementation();
			State = 101; Match(T__2);
			State = 102; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNameContext : ParserRuleContext {
		public ITerminalNode FILE_NAME() { return GetToken(STEPParser.FILE_NAME, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TimeStampContext timeStamp() {
			return GetRuleContext<TimeStampContext>(0);
		}
		public Preprocessor_versionContext preprocessor_version() {
			return GetRuleContext<Preprocessor_versionContext>(0);
		}
		public Originating_systemContext originating_system() {
			return GetRuleContext<Originating_systemContext>(0);
		}
		public AuthorisationContext authorisation() {
			return GetRuleContext<AuthorisationContext>(0);
		}
		public AuthorContext author() {
			return GetRuleContext<AuthorContext>(0);
		}
		public CollectionContext[] collection() {
			return GetRuleContexts<CollectionContext>();
		}
		public CollectionContext collection(int i) {
			return GetRuleContext<CollectionContext>(i);
		}
		public OrganizationContext organization() {
			return GetRuleContext<OrganizationContext>(0);
		}
		public FileNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterFileName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitFileName(this);
		}
	}

	[RuleVersion(0)]
	public FileNameContext fileName() {
		FileNameContext _localctx = new FileNameContext(Context, State);
		EnterRule(_localctx, 18, RULE_fileName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(FILE_NAME);
			State = 105; Match(T__0);
			State = 106; name();
			State = 107; Match(T__1);
			State = 108; timeStamp();
			State = 109; Match(T__1);
			State = 112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AnyString:
				{
				State = 110; author();
				}
				break;
			case T__0:
			case T__3:
				{
				State = 111; collection();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 114; Match(T__1);
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AnyString:
				{
				State = 115; organization();
				}
				break;
			case T__0:
			case T__3:
				{
				State = 116; collection();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 119; Match(T__1);
			State = 120; preprocessor_version();
			State = 121; Match(T__1);
			State = 122; originating_system();
			State = 123; Match(T__1);
			State = 124; authorisation();
			State = 125; Match(T__2);
			State = 126; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilePathContext : ParserRuleContext {
		public ITerminalNode[] Letter() { return GetTokens(STEPParser.Letter); }
		public ITerminalNode Letter(int i) {
			return GetToken(STEPParser.Letter, i);
		}
		public FilePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filePath; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterFilePath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitFilePath(this);
		}
	}

	[RuleVersion(0)]
	public FilePathContext filePath() {
		FilePathContext _localctx = new FilePathContext(Context, State);
		EnterRule(_localctx, 20, RULE_filePath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(T__5);
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Letter) {
				{
				{
				State = 129; Match(Letter);
				}
				}
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 135; Match(T__6);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Letter) {
				{
				{
				State = 136; Match(Letter);
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 142; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSchemaContext : ParserRuleContext {
		public ITerminalNode FILE_SCHEMA() { return GetToken(STEPParser.FILE_SCHEMA, 0); }
		public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public FileSchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSchema; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterFileSchema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitFileSchema(this);
		}
	}

	[RuleVersion(0)]
	public FileSchemaContext fileSchema() {
		FileSchemaContext _localctx = new FileSchemaContext(Context, State);
		EnterRule(_localctx, 22, RULE_fileSchema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(FILE_SCHEMA);
			State = 145; Match(T__0);
			State = 146; Match(T__0);
			State = 147; Match(AnyString);
			State = 148; Match(T__2);
			State = 149; Match(T__2);
			State = 150; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		public ITerminalNode HEADER() { return GetToken(STEPParser.HEADER, 0); }
		public FileDescriptionContext fileDescription() {
			return GetRuleContext<FileDescriptionContext>(0);
		}
		public FileNameContext fileName() {
			return GetRuleContext<FileNameContext>(0);
		}
		public FileSchemaContext fileSchema() {
			return GetRuleContext<FileSchemaContext>(0);
		}
		public ITerminalNode ENDSEC() { return GetToken(STEPParser.ENDSEC, 0); }
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitHeader(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 24, RULE_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(HEADER);
			State = 153; Match(T__4);
			State = 154; fileDescription();
			State = 155; fileName();
			State = 156; fileSchema();
			State = 157; Match(ENDSEC);
			State = 158; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementationContext : ParserRuleContext {
		public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public ImplementationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterImplementation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitImplementation(this);
		}
	}

	[RuleVersion(0)]
	public ImplementationContext implementation() {
		ImplementationContext _localctx = new ImplementationContext(Context, State);
		EnterRule(_localctx, 26, RULE_implementation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(AnyString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(STEPParser.Id, 0); }
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public InstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitInstance(this);
		}
	}

	[RuleVersion(0)]
	public InstanceContext instance() {
		InstanceContext _localctx = new InstanceContext(Context, State);
		EnterRule(_localctx, 28, RULE_instance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(Id);
			State = 163; Match(T__7);
			State = 164; constructor();
			State = 165; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public FilePathContext filePath() {
			return GetRuleContext<FilePathContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 30, RULE_name);
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AnyString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167; Match(AnyString);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168; filePath();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Originating_systemContext : ParserRuleContext {
		public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public Originating_systemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_originating_system; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterOriginating_system(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitOriginating_system(this);
		}
	}

	[RuleVersion(0)]
	public Originating_systemContext originating_system() {
		Originating_systemContext _localctx = new Originating_systemContext(Context, State);
		EnterRule(_localctx, 32, RULE_originating_system);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(AnyString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrganizationContext : ParserRuleContext {
		public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public OrganizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_organization; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterOrganization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitOrganization(this);
		}
	}

	[RuleVersion(0)]
	public OrganizationContext organization() {
		OrganizationContext _localctx = new OrganizationContext(Context, State);
		EnterRule(_localctx, 34, RULE_organization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(AnyString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public ITerminalNode Undefined() { return GetToken(STEPParser.Undefined, 0); }
		public ITerminalNode StringLiteral() { return GetToken(STEPParser.StringLiteral, 0); }
		public ITerminalNode Derived() { return GetToken(STEPParser.Derived, 0); }
		public ITerminalNode Enum() { return GetToken(STEPParser.Enum, 0); }
		public ITerminalNode BoolLogical() { return GetToken(STEPParser.BoolLogical, 0); }
		public ITerminalNode RealLiteral() { return GetToken(STEPParser.RealLiteral, 0); }
		public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public ITerminalNode Id() { return GetToken(STEPParser.Id, 0); }
		public ITerminalNode IntegerLiteral() { return GetToken(STEPParser.IntegerLiteral, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameter);
		try {
			State = 186;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TypeRef:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175; constructor();
				}
				break;
			case T__0:
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176; collection();
				}
				break;
			case Undefined:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177; Match(Undefined);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 178; Match(StringLiteral);
				}
				break;
			case Derived:
				EnterOuterAlt(_localctx, 5);
				{
				State = 179; Match(Derived);
				}
				break;
			case Enum:
				EnterOuterAlt(_localctx, 6);
				{
				State = 180; Match(Enum);
				}
				break;
			case BoolLogical:
				EnterOuterAlt(_localctx, 7);
				{
				State = 181; Match(BoolLogical);
				}
				break;
			case RealLiteral:
				EnterOuterAlt(_localctx, 8);
				{
				State = 182; Match(RealLiteral);
				}
				break;
			case AnyString:
				EnterOuterAlt(_localctx, 9);
				{
				State = 183; Match(AnyString);
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 10);
				{
				State = 184; Match(Id);
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 11);
				{
				State = 185; Match(IntegerLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Preprocessor_versionContext : ParserRuleContext {
		public ITerminalNode AnyString() { return GetToken(STEPParser.AnyString, 0); }
		public Preprocessor_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_version; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterPreprocessor_version(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitPreprocessor_version(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_versionContext preprocessor_version() {
		Preprocessor_versionContext _localctx = new Preprocessor_versionContext(Context, State);
		EnterRule(_localctx, 38, RULE_preprocessor_version);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(AnyString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStampContext : ParserRuleContext {
		public ITerminalNode DateTime() { return GetToken(STEPParser.DateTime, 0); }
		public TimeStampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStamp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterTimeStamp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitTimeStamp(this);
		}
	}

	[RuleVersion(0)]
	public TimeStampContext timeStamp() {
		TimeStampContext _localctx = new TimeStampContext(Context, State);
		EnterRule(_localctx, 40, RULE_timeStamp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(DateTime);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\xC3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'\x35', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x38', '\v', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '=', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x44', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'H', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', 'K', '\v', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'R', 
		'\n', '\a', '\f', '\a', '\xE', '\a', 'U', '\v', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\\', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', 's', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'x', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', '\x85', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\x88', '\v', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x8C', '\n', 
		'\f', '\f', '\f', '\xE', '\f', '\x8F', '\v', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\xAC', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xBD', '\n', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x2', 
		'\x2', '\x17', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', '\x2', '\x3', '\a', '\x2', '\v', '\v', '\x12', '\x12', '\x19', '\x19', 
		'\x1C', '\x1C', '\x1F', '\x1F', '\x2', '\xC2', '\x2', ',', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '.', '\x3', '\x2', '\x2', '\x2', '\x6', '<', '\x3', 
		'\x2', '\x2', '\x2', '\b', '>', '\x3', '\x2', '\x2', '\x2', '\n', '@', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'N', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'[', '\x3', '\x2', '\x2', '\x2', '\x10', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x62', '\x3', '\x2', '\x2', '\x2', '\x14', 'j', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x82', '\x3', '\x2', '\x2', '\x2', '\x18', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xAB', '\x3', '\x2', '\x2', '\x2', '\"', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xAF', '\x3', '\x2', '\x2', '\x2', '&', '\xBC', 
		'\x3', '\x2', '\x2', '\x2', '(', '\xBE', '\x3', '\x2', '\x2', '\x2', '*', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', ',', '-', '\a', '\x1F', '\x2', '\x2', 
		'-', '\x3', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '\x1F', '\x2', 
		'\x2', '/', '\x5', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\x3', 
		'\x2', '\x2', '\x31', '\x36', '\x5', '\b', '\x5', '\x2', '\x32', '\x33', 
		'\a', '\x4', '\x2', '\x2', '\x33', '\x35', '\x5', '\b', '\x5', '\x2', 
		'\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x35', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '\x5', 
		'\x2', '\x2', ':', '=', '\x3', '\x2', '\x2', '\x2', ';', '=', '\a', '\x6', 
		'\x2', '\x2', '<', '\x30', '\x3', '\x2', '\x2', '\x2', '<', ';', '\x3', 
		'\x2', '\x2', '\x2', '=', '\a', '\x3', '\x2', '\x2', '\x2', '>', '?', 
		'\t', '\x2', '\x2', '\x2', '?', '\t', '\x3', '\x2', '\x2', '\x2', '@', 
		'\x41', '\a', '\x1D', '\x2', '\x2', '\x41', '\x43', '\a', '\x3', '\x2', 
		'\x2', '\x42', '\x44', '\x5', '&', '\x14', '\x2', '\x43', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', '\x4', '\x2', '\x2', 
		'\x46', 'H', '\x5', '&', '\x14', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'K', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '\x5', '\x2', 
		'\x2', 'M', '\v', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\x13', 
		'\x2', '\x2', 'O', 'S', '\a', '\a', '\x2', '\x2', 'P', 'R', '\x5', '\x1E', 
		'\x10', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'V', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'W', '\a', '\x14', '\x2', '\x2', 'W', 'X', '\a', 
		'\a', '\x2', '\x2', 'X', '\r', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', 
		'\a', '\x1F', '\x2', '\x2', 'Z', '\\', '\x5', '\x6', '\x4', '\x2', '[', 
		'Y', '\x3', '\x2', '\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\xF', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', '\x1A', '\x2', 
		'\x2', '^', '_', '\x5', '\x1A', '\xE', '\x2', '_', '`', '\x5', '\f', '\a', 
		'\x2', '`', '\x61', '\a', '\x1B', '\x2', '\x2', '\x61', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x63', '\a', '\x15', '\x2', '\x2', '\x63', 
		'\x64', '\a', '\x3', '\x2', '\x2', '\x64', '\x65', '\x5', '\xE', '\b', 
		'\x2', '\x65', '\x66', '\a', '\x4', '\x2', '\x2', '\x66', 'g', '\x5', 
		'\x1C', '\xF', '\x2', 'g', 'h', '\a', '\x5', '\x2', '\x2', 'h', 'i', '\a', 
		'\a', '\x2', '\x2', 'i', '\x13', '\x3', '\x2', '\x2', '\x2', 'j', 'k', 
		'\a', '\x16', '\x2', '\x2', 'k', 'l', '\a', '\x3', '\x2', '\x2', 'l', 
		'm', '\x5', ' ', '\x11', '\x2', 'm', 'n', '\a', '\x4', '\x2', '\x2', 'n', 
		'o', '\x5', '*', '\x16', '\x2', 'o', 'r', '\a', '\x4', '\x2', '\x2', 'p', 
		's', '\x5', '\x2', '\x2', '\x2', 'q', 's', '\x5', '\x6', '\x4', '\x2', 
		'r', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 
		's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\a', '\x4', '\x2', '\x2', 
		'u', 'x', '\x5', '$', '\x13', '\x2', 'v', 'x', '\x5', '\x6', '\x4', '\x2', 
		'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'v', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\a', '\x4', '\x2', '\x2', 
		'z', '{', '\x5', '(', '\x15', '\x2', '{', '|', '\a', '\x4', '\x2', '\x2', 
		'|', '}', '\x5', '\"', '\x12', '\x2', '}', '~', '\a', '\x4', '\x2', '\x2', 
		'~', '\x7F', '\x5', '\x4', '\x3', '\x2', '\x7F', '\x80', '\a', '\x5', 
		'\x2', '\x2', '\x80', '\x81', '\a', '\a', '\x2', '\x2', '\x81', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x86', '\a', '\b', '\x2', '\x2', 
		'\x83', '\x85', '\a', '\f', '\x2', '\x2', '\x84', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x88', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x89', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x8D', '\a', '\t', '\x2', '\x2', '\x8A', '\x8C', 
		'\a', '\f', '\x2', '\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x91', '\a', '\b', '\x2', '\x2', '\x91', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x93', '\a', '\x17', '\x2', '\x2', '\x93', '\x94', 
		'\a', '\x3', '\x2', '\x2', '\x94', '\x95', '\a', '\x3', '\x2', '\x2', 
		'\x95', '\x96', '\a', '\x1F', '\x2', '\x2', '\x96', '\x97', '\a', '\x5', 
		'\x2', '\x2', '\x97', '\x98', '\a', '\x5', '\x2', '\x2', '\x98', '\x99', 
		'\a', '\a', '\x2', '\x2', '\x99', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x9B', '\a', '\x18', '\x2', '\x2', '\x9B', '\x9C', '\a', '\a', 
		'\x2', '\x2', '\x9C', '\x9D', '\x5', '\x12', '\n', '\x2', '\x9D', '\x9E', 
		'\x5', '\x14', '\v', '\x2', '\x9E', '\x9F', '\x5', '\x18', '\r', '\x2', 
		'\x9F', '\xA0', '\a', '\x14', '\x2', '\x2', '\xA0', '\xA1', '\a', '\a', 
		'\x2', '\x2', '\xA1', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', 
		'\a', '\x1F', '\x2', '\x2', '\xA3', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\xA5', '\a', '\x19', '\x2', '\x2', '\xA5', '\xA6', '\a', '\n', 
		'\x2', '\x2', '\xA6', '\xA7', '\x5', '\n', '\x6', '\x2', '\xA7', '\xA8', 
		'\a', '\a', '\x2', '\x2', '\xA8', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\xA9', '\xAC', '\a', '\x1F', '\x2', '\x2', '\xAA', '\xAC', '\x5', '\x16', 
		'\f', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAA', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '!', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\a', '\x1F', '\x2', '\x2', '\xAE', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xB0', '\a', '\x1F', '\x2', '\x2', '\xB0', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xBD', '\x5', '\n', '\x6', '\x2', '\xB2', 
		'\xBD', '\x5', '\x6', '\x4', '\x2', '\xB3', '\xBD', '\a', '\x1E', '\x2', 
		'\x2', '\xB4', '\xBD', '\a', '\x1C', '\x2', '\x2', '\xB5', '\xBD', '\a', 
		'\xF', '\x2', '\x2', '\xB6', '\xBD', '\a', '\x11', '\x2', '\x2', '\xB7', 
		'\xBD', '\a', '\x10', '\x2', '\x2', '\xB8', '\xBD', '\a', '\x12', '\x2', 
		'\x2', '\xB9', '\xBD', '\a', '\x1F', '\x2', '\x2', '\xBA', '\xBD', '\a', 
		'\x19', '\x2', '\x2', '\xBB', '\xBD', '\a', '\v', '\x2', '\x2', '\xBC', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBF', '\a', '\x1F', '\x2', '\x2', '\xBF', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC1', '\a', '\xE', '\x2', '\x2', '\xC1', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xE', '\x36', '<', '\x43', 'I', 'S', 
		'[', 'r', 'w', '\x86', '\x8D', '\xAB', '\xBC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace STEP
