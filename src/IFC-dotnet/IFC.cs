/*
This code was generated by a tool. DO NOT MODIFY this code manually, unless you really know what you are doing.
 */
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
	
namespace IFC4
{
	public abstract class IfcBase
	{
		[JsonProperty("id")]
		public Guid Id{get;}

		public IfcBase()
		{
			Id = Guid.NewGuid();
		}

		public virtual string ToJSON()
		{
			var settings = new JsonSerializerSettings()
			{
				Formatting = Formatting.Indented,
				TypeNameHandling = TypeNameHandling.Objects
			};
			return JsonConvert.SerializeObject(this);
		}

		public virtual string ToSTEP()
		{
			throw new NotImplementedException();
		}
	}

	public abstract class Select : IfcBase
	{
		[JsonProperty("value")]
		public dynamic Value {get;protected set;}
	}

	/// <summary>
	/// A type wrapper for IFC.
	/// </summary>
	public class IfcType<T> : IfcBase
	{
		[JsonProperty("value")]
		public T Value{get;set;}
		public IfcType(T value)
		{
			Value = value;
		}

		public static implicit operator IfcType<T>(T value)
		{
			return new IfcType<T>(value);
		}
	}
	
	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcabsorbeddosemeasure.htm
	/// </summary>
	public class IfcAbsorbedDoseMeasure : IfcType<double>
	{
		public IfcAbsorbedDoseMeasure(double value):base(value){}	

		public static implicit operator double(IfcAbsorbedDoseMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcAbsorbedDoseMeasure(double v)
		{
			return new IfcAbsorbedDoseMeasure(v);
		}	

		public static IfcAbsorbedDoseMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAbsorbedDoseMeasure>(json);
		}

		public static IfcAbsorbedDoseMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaccelerationmeasure.htm
	/// </summary>
	public class IfcAccelerationMeasure : IfcType<double>
	{
		public IfcAccelerationMeasure(double value):base(value){}	

		public static implicit operator double(IfcAccelerationMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcAccelerationMeasure(double v)
		{
			return new IfcAccelerationMeasure(v);
		}	

		public static IfcAccelerationMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAccelerationMeasure>(json);
		}

		public static IfcAccelerationMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcamountofsubstancemeasure.htm
	/// </summary>
	public class IfcAmountOfSubstanceMeasure : IfcType<double>
	{
		public IfcAmountOfSubstanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcAmountOfSubstanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcAmountOfSubstanceMeasure(double v)
		{
			return new IfcAmountOfSubstanceMeasure(v);
		}	

		public static IfcAmountOfSubstanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAmountOfSubstanceMeasure>(json);
		}

		public static IfcAmountOfSubstanceMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcangularvelocitymeasure.htm
	/// </summary>
	public class IfcAngularVelocityMeasure : IfcType<double>
	{
		public IfcAngularVelocityMeasure(double value):base(value){}	

		public static implicit operator double(IfcAngularVelocityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcAngularVelocityMeasure(double v)
		{
			return new IfcAngularVelocityMeasure(v);
		}	

		public static IfcAngularVelocityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAngularVelocityMeasure>(json);
		}

		public static IfcAngularVelocityMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcareadensitymeasure.htm
	/// </summary>
	public class IfcAreaDensityMeasure : IfcType<double>
	{
		public IfcAreaDensityMeasure(double value):base(value){}	

		public static implicit operator double(IfcAreaDensityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcAreaDensityMeasure(double v)
		{
			return new IfcAreaDensityMeasure(v);
		}	

		public static IfcAreaDensityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAreaDensityMeasure>(json);
		}

		public static IfcAreaDensityMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcareameasure.htm
	/// </summary>
	public class IfcAreaMeasure : IfcType<double>
	{
		public IfcAreaMeasure(double value):base(value){}	

		public static implicit operator double(IfcAreaMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcAreaMeasure(double v)
		{
			return new IfcAreaMeasure(v);
		}	

		public static IfcAreaMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAreaMeasure>(json);
		}

		public static IfcAreaMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboolean.htm
	/// </summary>
	public class IfcBoolean : IfcType<bool>
	{
		public IfcBoolean(bool value):base(value){}	

		public static implicit operator bool(IfcBoolean v)
		{
			return v.Value;
		}

		public static implicit operator IfcBoolean(bool v)
		{
			return new IfcBoolean(v);
		}	

		public static IfcBoolean FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoolean>(json);
		}

		public static IfcBoolean FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboxalignment.htm
	/// </summary>
	public class IfcBoxAlignment : IfcType<IfcLabel>
	{
		public IfcBoxAlignment(IfcLabel value):base(value){}	

		public static implicit operator IfcLabel(IfcBoxAlignment v)
		{
			return v.Value;
		}

		public static implicit operator IfcBoxAlignment(IfcLabel v)
		{
			return new IfcBoxAlignment(v);
		}	

		public static IfcBoxAlignment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoxAlignment>(json);
		}

		public static IfcBoxAlignment FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccardinalpointreference.htm
	/// </summary>
	public class IfcCardinalPointReference : IfcType<int>
	{
		public IfcCardinalPointReference(int value):base(value){}	

		public static implicit operator int(IfcCardinalPointReference v)
		{
			return v.Value;
		}

		public static implicit operator IfcCardinalPointReference(int v)
		{
			return new IfcCardinalPointReference(v);
		}	

		public static IfcCardinalPointReference FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCardinalPointReference>(json);
		}

		public static IfcCardinalPointReference FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccomplexnumber.htm
	/// </summary>
	public class IfcComplexNumber : IfcType<List<double>>
	{
		public IfcComplexNumber(List<double> value):base(value){}	

		public static implicit operator List<double>(IfcComplexNumber v)
		{
			return v.Value;
		}

		public static implicit operator IfcComplexNumber(List<double> v)
		{
			return new IfcComplexNumber(v);
		}	

		public static IfcComplexNumber FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcComplexNumber>(json);
		}

		public static IfcComplexNumber FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccompoundplaneanglemeasure.htm
	/// </summary>
	public class IfcCompoundPlaneAngleMeasure : IfcType<List<int>>
	{
		public IfcCompoundPlaneAngleMeasure(List<int> value):base(value){}	

		public static implicit operator List<int>(IfcCompoundPlaneAngleMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcCompoundPlaneAngleMeasure(List<int> v)
		{
			return new IfcCompoundPlaneAngleMeasure(v);
		}	

		public static IfcCompoundPlaneAngleMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCompoundPlaneAngleMeasure>(json);
		}

		public static IfcCompoundPlaneAngleMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccontextdependentmeasure.htm
	/// </summary>
	public class IfcContextDependentMeasure : IfcType<double>
	{
		public IfcContextDependentMeasure(double value):base(value){}	

		public static implicit operator double(IfcContextDependentMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcContextDependentMeasure(double v)
		{
			return new IfcContextDependentMeasure(v);
		}	

		public static IfcContextDependentMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcContextDependentMeasure>(json);
		}

		public static IfcContextDependentMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccountmeasure.htm
	/// </summary>
	public class IfcCountMeasure : IfcType<double>
	{
		public IfcCountMeasure(double value):base(value){}	

		public static implicit operator double(IfcCountMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcCountMeasure(double v)
		{
			return new IfcCountMeasure(v);
		}	

		public static IfcCountMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCountMeasure>(json);
		}

		public static IfcCountMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurvaturemeasure.htm
	/// </summary>
	public class IfcCurvatureMeasure : IfcType<double>
	{
		public IfcCurvatureMeasure(double value):base(value){}	

		public static implicit operator double(IfcCurvatureMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcCurvatureMeasure(double v)
		{
			return new IfcCurvatureMeasure(v);
		}	

		public static IfcCurvatureMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurvatureMeasure>(json);
		}

		public static IfcCurvatureMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdate.htm
	/// </summary>
	public class IfcDate : IfcType<string>
	{
		public IfcDate(string value):base(value){}	

		public static implicit operator string(IfcDate v)
		{
			return v.Value;
		}

		public static implicit operator IfcDate(string v)
		{
			return new IfcDate(v);
		}	

		public static IfcDate FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDate>(json);
		}

		public static IfcDate FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdatetime.htm
	/// </summary>
	public class IfcDateTime : IfcType<string>
	{
		public IfcDateTime(string value):base(value){}	

		public static implicit operator string(IfcDateTime v)
		{
			return v.Value;
		}

		public static implicit operator IfcDateTime(string v)
		{
			return new IfcDateTime(v);
		}	

		public static IfcDateTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDateTime>(json);
		}

		public static IfcDateTime FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdayinmonthnumber.htm
	/// </summary>
	public class IfcDayInMonthNumber : IfcType<int>
	{
		public IfcDayInMonthNumber(int value):base(value){}	

		public static implicit operator int(IfcDayInMonthNumber v)
		{
			return v.Value;
		}

		public static implicit operator IfcDayInMonthNumber(int v)
		{
			return new IfcDayInMonthNumber(v);
		}	

		public static IfcDayInMonthNumber FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDayInMonthNumber>(json);
		}

		public static IfcDayInMonthNumber FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdayinweeknumber.htm
	/// </summary>
	public class IfcDayInWeekNumber : IfcType<int>
	{
		public IfcDayInWeekNumber(int value):base(value){}	

		public static implicit operator int(IfcDayInWeekNumber v)
		{
			return v.Value;
		}

		public static implicit operator IfcDayInWeekNumber(int v)
		{
			return new IfcDayInWeekNumber(v);
		}	

		public static IfcDayInWeekNumber FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDayInWeekNumber>(json);
		}

		public static IfcDayInWeekNumber FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdescriptivemeasure.htm
	/// </summary>
	public class IfcDescriptiveMeasure : IfcType<string>
	{
		public IfcDescriptiveMeasure(string value):base(value){}	

		public static implicit operator string(IfcDescriptiveMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcDescriptiveMeasure(string v)
		{
			return new IfcDescriptiveMeasure(v);
		}	

		public static IfcDescriptiveMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDescriptiveMeasure>(json);
		}

		public static IfcDescriptiveMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdimensioncount.htm
	/// </summary>
	public class IfcDimensionCount : IfcType<int>
	{
		public IfcDimensionCount(int value):base(value){}	

		public static implicit operator int(IfcDimensionCount v)
		{
			return v.Value;
		}

		public static implicit operator IfcDimensionCount(int v)
		{
			return new IfcDimensionCount(v);
		}	

		public static IfcDimensionCount FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDimensionCount>(json);
		}

		public static IfcDimensionCount FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoseequivalentmeasure.htm
	/// </summary>
	public class IfcDoseEquivalentMeasure : IfcType<double>
	{
		public IfcDoseEquivalentMeasure(double value):base(value){}	

		public static implicit operator double(IfcDoseEquivalentMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcDoseEquivalentMeasure(double v)
		{
			return new IfcDoseEquivalentMeasure(v);
		}	

		public static IfcDoseEquivalentMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDoseEquivalentMeasure>(json);
		}

		public static IfcDoseEquivalentMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcduration.htm
	/// </summary>
	public class IfcDuration : IfcType<string>
	{
		public IfcDuration(string value):base(value){}	

		public static implicit operator string(IfcDuration v)
		{
			return v.Value;
		}

		public static implicit operator IfcDuration(string v)
		{
			return new IfcDuration(v);
		}	

		public static IfcDuration FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDuration>(json);
		}

		public static IfcDuration FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdynamicviscositymeasure.htm
	/// </summary>
	public class IfcDynamicViscosityMeasure : IfcType<double>
	{
		public IfcDynamicViscosityMeasure(double value):base(value){}	

		public static implicit operator double(IfcDynamicViscosityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcDynamicViscosityMeasure(double v)
		{
			return new IfcDynamicViscosityMeasure(v);
		}	

		public static IfcDynamicViscosityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDynamicViscosityMeasure>(json);
		}

		public static IfcDynamicViscosityMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectriccapacitancemeasure.htm
	/// </summary>
	public class IfcElectricCapacitanceMeasure : IfcType<double>
	{
		public IfcElectricCapacitanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcElectricCapacitanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcElectricCapacitanceMeasure(double v)
		{
			return new IfcElectricCapacitanceMeasure(v);
		}	

		public static IfcElectricCapacitanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricCapacitanceMeasure>(json);
		}

		public static IfcElectricCapacitanceMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricchargemeasure.htm
	/// </summary>
	public class IfcElectricChargeMeasure : IfcType<double>
	{
		public IfcElectricChargeMeasure(double value):base(value){}	

		public static implicit operator double(IfcElectricChargeMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcElectricChargeMeasure(double v)
		{
			return new IfcElectricChargeMeasure(v);
		}	

		public static IfcElectricChargeMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricChargeMeasure>(json);
		}

		public static IfcElectricChargeMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricconductancemeasure.htm
	/// </summary>
	public class IfcElectricConductanceMeasure : IfcType<double>
	{
		public IfcElectricConductanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcElectricConductanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcElectricConductanceMeasure(double v)
		{
			return new IfcElectricConductanceMeasure(v);
		}	

		public static IfcElectricConductanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricConductanceMeasure>(json);
		}

		public static IfcElectricConductanceMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectriccurrentmeasure.htm
	/// </summary>
	public class IfcElectricCurrentMeasure : IfcType<double>
	{
		public IfcElectricCurrentMeasure(double value):base(value){}	

		public static implicit operator double(IfcElectricCurrentMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcElectricCurrentMeasure(double v)
		{
			return new IfcElectricCurrentMeasure(v);
		}	

		public static IfcElectricCurrentMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricCurrentMeasure>(json);
		}

		public static IfcElectricCurrentMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricresistancemeasure.htm
	/// </summary>
	public class IfcElectricResistanceMeasure : IfcType<double>
	{
		public IfcElectricResistanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcElectricResistanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcElectricResistanceMeasure(double v)
		{
			return new IfcElectricResistanceMeasure(v);
		}	

		public static IfcElectricResistanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricResistanceMeasure>(json);
		}

		public static IfcElectricResistanceMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricvoltagemeasure.htm
	/// </summary>
	public class IfcElectricVoltageMeasure : IfcType<double>
	{
		public IfcElectricVoltageMeasure(double value):base(value){}	

		public static implicit operator double(IfcElectricVoltageMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcElectricVoltageMeasure(double v)
		{
			return new IfcElectricVoltageMeasure(v);
		}	

		public static IfcElectricVoltageMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricVoltageMeasure>(json);
		}

		public static IfcElectricVoltageMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcenergymeasure.htm
	/// </summary>
	public class IfcEnergyMeasure : IfcType<double>
	{
		public IfcEnergyMeasure(double value):base(value){}	

		public static implicit operator double(IfcEnergyMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcEnergyMeasure(double v)
		{
			return new IfcEnergyMeasure(v);
		}	

		public static IfcEnergyMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEnergyMeasure>(json);
		}

		public static IfcEnergyMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfontstyle.htm
	/// </summary>
	public class IfcFontStyle : IfcType<string>
	{
		public IfcFontStyle(string value):base(value){}	

		public static implicit operator string(IfcFontStyle v)
		{
			return v.Value;
		}

		public static implicit operator IfcFontStyle(string v)
		{
			return new IfcFontStyle(v);
		}	

		public static IfcFontStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFontStyle>(json);
		}

		public static IfcFontStyle FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfontvariant.htm
	/// </summary>
	public class IfcFontVariant : IfcType<string>
	{
		public IfcFontVariant(string value):base(value){}	

		public static implicit operator string(IfcFontVariant v)
		{
			return v.Value;
		}

		public static implicit operator IfcFontVariant(string v)
		{
			return new IfcFontVariant(v);
		}	

		public static IfcFontVariant FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFontVariant>(json);
		}

		public static IfcFontVariant FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfontweight.htm
	/// </summary>
	public class IfcFontWeight : IfcType<string>
	{
		public IfcFontWeight(string value):base(value){}	

		public static implicit operator string(IfcFontWeight v)
		{
			return v.Value;
		}

		public static implicit operator IfcFontWeight(string v)
		{
			return new IfcFontWeight(v);
		}	

		public static IfcFontWeight FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFontWeight>(json);
		}

		public static IfcFontWeight FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcforcemeasure.htm
	/// </summary>
	public class IfcForceMeasure : IfcType<double>
	{
		public IfcForceMeasure(double value):base(value){}	

		public static implicit operator double(IfcForceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcForceMeasure(double v)
		{
			return new IfcForceMeasure(v);
		}	

		public static IfcForceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcForceMeasure>(json);
		}

		public static IfcForceMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfrequencymeasure.htm
	/// </summary>
	public class IfcFrequencyMeasure : IfcType<double>
	{
		public IfcFrequencyMeasure(double value):base(value){}	

		public static implicit operator double(IfcFrequencyMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcFrequencyMeasure(double v)
		{
			return new IfcFrequencyMeasure(v);
		}	

		public static IfcFrequencyMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFrequencyMeasure>(json);
		}

		public static IfcFrequencyMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgloballyuniqueid.htm
	/// </summary>
	public class IfcGloballyUniqueId : IfcType<string>
	{
		public IfcGloballyUniqueId(string value):base(value){}	

		public static implicit operator string(IfcGloballyUniqueId v)
		{
			return v.Value;
		}

		public static implicit operator IfcGloballyUniqueId(string v)
		{
			return new IfcGloballyUniqueId(v);
		}	

		public static IfcGloballyUniqueId FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGloballyUniqueId>(json);
		}

		public static IfcGloballyUniqueId FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcheatfluxdensitymeasure.htm
	/// </summary>
	public class IfcHeatFluxDensityMeasure : IfcType<double>
	{
		public IfcHeatFluxDensityMeasure(double value):base(value){}	

		public static implicit operator double(IfcHeatFluxDensityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcHeatFluxDensityMeasure(double v)
		{
			return new IfcHeatFluxDensityMeasure(v);
		}	

		public static IfcHeatFluxDensityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcHeatFluxDensityMeasure>(json);
		}

		public static IfcHeatFluxDensityMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcheatingvaluemeasure.htm
	/// </summary>
	public class IfcHeatingValueMeasure : IfcType<double>
	{
		public IfcHeatingValueMeasure(double value):base(value){}	

		public static implicit operator double(IfcHeatingValueMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcHeatingValueMeasure(double v)
		{
			return new IfcHeatingValueMeasure(v);
		}	

		public static IfcHeatingValueMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcHeatingValueMeasure>(json);
		}

		public static IfcHeatingValueMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcidentifier.htm
	/// </summary>
	public class IfcIdentifier : IfcType<string>
	{
		public IfcIdentifier(string value):base(value){}	

		public static implicit operator string(IfcIdentifier v)
		{
			return v.Value;
		}

		public static implicit operator IfcIdentifier(string v)
		{
			return new IfcIdentifier(v);
		}	

		public static IfcIdentifier FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIdentifier>(json);
		}

		public static IfcIdentifier FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcilluminancemeasure.htm
	/// </summary>
	public class IfcIlluminanceMeasure : IfcType<double>
	{
		public IfcIlluminanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcIlluminanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcIlluminanceMeasure(double v)
		{
			return new IfcIlluminanceMeasure(v);
		}	

		public static IfcIlluminanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIlluminanceMeasure>(json);
		}

		public static IfcIlluminanceMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcinductancemeasure.htm
	/// </summary>
	public class IfcInductanceMeasure : IfcType<double>
	{
		public IfcInductanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcInductanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcInductanceMeasure(double v)
		{
			return new IfcInductanceMeasure(v);
		}	

		public static IfcInductanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcInductanceMeasure>(json);
		}

		public static IfcInductanceMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcinteger.htm
	/// </summary>
	public class IfcInteger : IfcType<int>
	{
		public IfcInteger(int value):base(value){}	

		public static implicit operator int(IfcInteger v)
		{
			return v.Value;
		}

		public static implicit operator IfcInteger(int v)
		{
			return new IfcInteger(v);
		}	

		public static IfcInteger FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcInteger>(json);
		}

		public static IfcInteger FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcintegercountratemeasure.htm
	/// </summary>
	public class IfcIntegerCountRateMeasure : IfcType<int>
	{
		public IfcIntegerCountRateMeasure(int value):base(value){}	

		public static implicit operator int(IfcIntegerCountRateMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcIntegerCountRateMeasure(int v)
		{
			return new IfcIntegerCountRateMeasure(v);
		}	

		public static IfcIntegerCountRateMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIntegerCountRateMeasure>(json);
		}

		public static IfcIntegerCountRateMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcionconcentrationmeasure.htm
	/// </summary>
	public class IfcIonConcentrationMeasure : IfcType<double>
	{
		public IfcIonConcentrationMeasure(double value):base(value){}	

		public static implicit operator double(IfcIonConcentrationMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcIonConcentrationMeasure(double v)
		{
			return new IfcIonConcentrationMeasure(v);
		}	

		public static IfcIonConcentrationMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIonConcentrationMeasure>(json);
		}

		public static IfcIonConcentrationMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcisothermalmoisturecapacitymeasure.htm
	/// </summary>
	public class IfcIsothermalMoistureCapacityMeasure : IfcType<double>
	{
		public IfcIsothermalMoistureCapacityMeasure(double value):base(value){}	

		public static implicit operator double(IfcIsothermalMoistureCapacityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcIsothermalMoistureCapacityMeasure(double v)
		{
			return new IfcIsothermalMoistureCapacityMeasure(v);
		}	

		public static IfcIsothermalMoistureCapacityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIsothermalMoistureCapacityMeasure>(json);
		}

		public static IfcIsothermalMoistureCapacityMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifckinematicviscositymeasure.htm
	/// </summary>
	public class IfcKinematicViscosityMeasure : IfcType<double>
	{
		public IfcKinematicViscosityMeasure(double value):base(value){}	

		public static implicit operator double(IfcKinematicViscosityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcKinematicViscosityMeasure(double v)
		{
			return new IfcKinematicViscosityMeasure(v);
		}	

		public static IfcKinematicViscosityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcKinematicViscosityMeasure>(json);
		}

		public static IfcKinematicViscosityMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclabel.htm
	/// </summary>
	public class IfcLabel : IfcType<string>
	{
		public IfcLabel(string value):base(value){}	

		public static implicit operator string(IfcLabel v)
		{
			return v.Value;
		}

		public static implicit operator IfcLabel(string v)
		{
			return new IfcLabel(v);
		}	

		public static IfcLabel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLabel>(json);
		}

		public static IfcLabel FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclanguageid.htm
	/// </summary>
	public class IfcLanguageId : IfcType<IfcIdentifier>
	{
		public IfcLanguageId(IfcIdentifier value):base(value){}	

		public static implicit operator IfcIdentifier(IfcLanguageId v)
		{
			return v.Value;
		}

		public static implicit operator IfcLanguageId(IfcIdentifier v)
		{
			return new IfcLanguageId(v);
		}	

		public static IfcLanguageId FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLanguageId>(json);
		}

		public static IfcLanguageId FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclengthmeasure.htm
	/// </summary>
	public class IfcLengthMeasure : IfcType<double>
	{
		public IfcLengthMeasure(double value):base(value){}	

		public static implicit operator double(IfcLengthMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcLengthMeasure(double v)
		{
			return new IfcLengthMeasure(v);
		}	

		public static IfcLengthMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLengthMeasure>(json);
		}

		public static IfcLengthMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclinearforcemeasure.htm
	/// </summary>
	public class IfcLinearForceMeasure : IfcType<double>
	{
		public IfcLinearForceMeasure(double value):base(value){}	

		public static implicit operator double(IfcLinearForceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcLinearForceMeasure(double v)
		{
			return new IfcLinearForceMeasure(v);
		}	

		public static IfcLinearForceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLinearForceMeasure>(json);
		}

		public static IfcLinearForceMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclinearmomentmeasure.htm
	/// </summary>
	public class IfcLinearMomentMeasure : IfcType<double>
	{
		public IfcLinearMomentMeasure(double value):base(value){}	

		public static implicit operator double(IfcLinearMomentMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcLinearMomentMeasure(double v)
		{
			return new IfcLinearMomentMeasure(v);
		}	

		public static IfcLinearMomentMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLinearMomentMeasure>(json);
		}

		public static IfcLinearMomentMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclinearstiffnessmeasure.htm
	/// </summary>
	public class IfcLinearStiffnessMeasure : IfcType<double>
	{
		public IfcLinearStiffnessMeasure(double value):base(value){}	

		public static implicit operator double(IfcLinearStiffnessMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcLinearStiffnessMeasure(double v)
		{
			return new IfcLinearStiffnessMeasure(v);
		}	

		public static IfcLinearStiffnessMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLinearStiffnessMeasure>(json);
		}

		public static IfcLinearStiffnessMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclinearvelocitymeasure.htm
	/// </summary>
	public class IfcLinearVelocityMeasure : IfcType<double>
	{
		public IfcLinearVelocityMeasure(double value):base(value){}	

		public static implicit operator double(IfcLinearVelocityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcLinearVelocityMeasure(double v)
		{
			return new IfcLinearVelocityMeasure(v);
		}	

		public static IfcLinearVelocityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLinearVelocityMeasure>(json);
		}

		public static IfcLinearVelocityMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclogical.htm
	/// </summary>
	public class IfcLogical : IfcType<bool?>
	{
		public IfcLogical(bool? value):base(value){}	

		public static implicit operator bool?(IfcLogical v)
		{
			return v.Value;
		}

		public static implicit operator IfcLogical(bool? v)
		{
			return new IfcLogical(v);
		}	

		public static IfcLogical FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLogical>(json);
		}

		public static IfcLogical FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcluminousfluxmeasure.htm
	/// </summary>
	public class IfcLuminousFluxMeasure : IfcType<double>
	{
		public IfcLuminousFluxMeasure(double value):base(value){}	

		public static implicit operator double(IfcLuminousFluxMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcLuminousFluxMeasure(double v)
		{
			return new IfcLuminousFluxMeasure(v);
		}	

		public static IfcLuminousFluxMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLuminousFluxMeasure>(json);
		}

		public static IfcLuminousFluxMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcluminousintensitydistributionmeasure.htm
	/// </summary>
	public class IfcLuminousIntensityDistributionMeasure : IfcType<double>
	{
		public IfcLuminousIntensityDistributionMeasure(double value):base(value){}	

		public static implicit operator double(IfcLuminousIntensityDistributionMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcLuminousIntensityDistributionMeasure(double v)
		{
			return new IfcLuminousIntensityDistributionMeasure(v);
		}	

		public static IfcLuminousIntensityDistributionMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLuminousIntensityDistributionMeasure>(json);
		}

		public static IfcLuminousIntensityDistributionMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcluminousintensitymeasure.htm
	/// </summary>
	public class IfcLuminousIntensityMeasure : IfcType<double>
	{
		public IfcLuminousIntensityMeasure(double value):base(value){}	

		public static implicit operator double(IfcLuminousIntensityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcLuminousIntensityMeasure(double v)
		{
			return new IfcLuminousIntensityMeasure(v);
		}	

		public static IfcLuminousIntensityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLuminousIntensityMeasure>(json);
		}

		public static IfcLuminousIntensityMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmagneticfluxdensitymeasure.htm
	/// </summary>
	public class IfcMagneticFluxDensityMeasure : IfcType<double>
	{
		public IfcMagneticFluxDensityMeasure(double value):base(value){}	

		public static implicit operator double(IfcMagneticFluxDensityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMagneticFluxDensityMeasure(double v)
		{
			return new IfcMagneticFluxDensityMeasure(v);
		}	

		public static IfcMagneticFluxDensityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMagneticFluxDensityMeasure>(json);
		}

		public static IfcMagneticFluxDensityMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmagneticfluxmeasure.htm
	/// </summary>
	public class IfcMagneticFluxMeasure : IfcType<double>
	{
		public IfcMagneticFluxMeasure(double value):base(value){}	

		public static implicit operator double(IfcMagneticFluxMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMagneticFluxMeasure(double v)
		{
			return new IfcMagneticFluxMeasure(v);
		}	

		public static IfcMagneticFluxMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMagneticFluxMeasure>(json);
		}

		public static IfcMagneticFluxMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmassdensitymeasure.htm
	/// </summary>
	public class IfcMassDensityMeasure : IfcType<double>
	{
		public IfcMassDensityMeasure(double value):base(value){}	

		public static implicit operator double(IfcMassDensityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMassDensityMeasure(double v)
		{
			return new IfcMassDensityMeasure(v);
		}	

		public static IfcMassDensityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMassDensityMeasure>(json);
		}

		public static IfcMassDensityMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmassflowratemeasure.htm
	/// </summary>
	public class IfcMassFlowRateMeasure : IfcType<double>
	{
		public IfcMassFlowRateMeasure(double value):base(value){}	

		public static implicit operator double(IfcMassFlowRateMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMassFlowRateMeasure(double v)
		{
			return new IfcMassFlowRateMeasure(v);
		}	

		public static IfcMassFlowRateMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMassFlowRateMeasure>(json);
		}

		public static IfcMassFlowRateMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmassmeasure.htm
	/// </summary>
	public class IfcMassMeasure : IfcType<double>
	{
		public IfcMassMeasure(double value):base(value){}	

		public static implicit operator double(IfcMassMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMassMeasure(double v)
		{
			return new IfcMassMeasure(v);
		}	

		public static IfcMassMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMassMeasure>(json);
		}

		public static IfcMassMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmassperlengthmeasure.htm
	/// </summary>
	public class IfcMassPerLengthMeasure : IfcType<double>
	{
		public IfcMassPerLengthMeasure(double value):base(value){}	

		public static implicit operator double(IfcMassPerLengthMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMassPerLengthMeasure(double v)
		{
			return new IfcMassPerLengthMeasure(v);
		}	

		public static IfcMassPerLengthMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMassPerLengthMeasure>(json);
		}

		public static IfcMassPerLengthMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmodulusofelasticitymeasure.htm
	/// </summary>
	public class IfcModulusOfElasticityMeasure : IfcType<double>
	{
		public IfcModulusOfElasticityMeasure(double value):base(value){}	

		public static implicit operator double(IfcModulusOfElasticityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcModulusOfElasticityMeasure(double v)
		{
			return new IfcModulusOfElasticityMeasure(v);
		}	

		public static IfcModulusOfElasticityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcModulusOfElasticityMeasure>(json);
		}

		public static IfcModulusOfElasticityMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmodulusoflinearsubgradereactionmeasure.htm
	/// </summary>
	public class IfcModulusOfLinearSubgradeReactionMeasure : IfcType<double>
	{
		public IfcModulusOfLinearSubgradeReactionMeasure(double value):base(value){}	

		public static implicit operator double(IfcModulusOfLinearSubgradeReactionMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcModulusOfLinearSubgradeReactionMeasure(double v)
		{
			return new IfcModulusOfLinearSubgradeReactionMeasure(v);
		}	

		public static IfcModulusOfLinearSubgradeReactionMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcModulusOfLinearSubgradeReactionMeasure>(json);
		}

		public static IfcModulusOfLinearSubgradeReactionMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmodulusofrotationalsubgradereactionmeasure.htm
	/// </summary>
	public class IfcModulusOfRotationalSubgradeReactionMeasure : IfcType<double>
	{
		public IfcModulusOfRotationalSubgradeReactionMeasure(double value):base(value){}	

		public static implicit operator double(IfcModulusOfRotationalSubgradeReactionMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcModulusOfRotationalSubgradeReactionMeasure(double v)
		{
			return new IfcModulusOfRotationalSubgradeReactionMeasure(v);
		}	

		public static IfcModulusOfRotationalSubgradeReactionMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcModulusOfRotationalSubgradeReactionMeasure>(json);
		}

		public static IfcModulusOfRotationalSubgradeReactionMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmodulusofsubgradereactionmeasure.htm
	/// </summary>
	public class IfcModulusOfSubgradeReactionMeasure : IfcType<double>
	{
		public IfcModulusOfSubgradeReactionMeasure(double value):base(value){}	

		public static implicit operator double(IfcModulusOfSubgradeReactionMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcModulusOfSubgradeReactionMeasure(double v)
		{
			return new IfcModulusOfSubgradeReactionMeasure(v);
		}	

		public static IfcModulusOfSubgradeReactionMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcModulusOfSubgradeReactionMeasure>(json);
		}

		public static IfcModulusOfSubgradeReactionMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmoisturediffusivitymeasure.htm
	/// </summary>
	public class IfcMoistureDiffusivityMeasure : IfcType<double>
	{
		public IfcMoistureDiffusivityMeasure(double value):base(value){}	

		public static implicit operator double(IfcMoistureDiffusivityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMoistureDiffusivityMeasure(double v)
		{
			return new IfcMoistureDiffusivityMeasure(v);
		}	

		public static IfcMoistureDiffusivityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMoistureDiffusivityMeasure>(json);
		}

		public static IfcMoistureDiffusivityMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmolecularweightmeasure.htm
	/// </summary>
	public class IfcMolecularWeightMeasure : IfcType<double>
	{
		public IfcMolecularWeightMeasure(double value):base(value){}	

		public static implicit operator double(IfcMolecularWeightMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMolecularWeightMeasure(double v)
		{
			return new IfcMolecularWeightMeasure(v);
		}	

		public static IfcMolecularWeightMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMolecularWeightMeasure>(json);
		}

		public static IfcMolecularWeightMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmomentofinertiameasure.htm
	/// </summary>
	public class IfcMomentOfInertiaMeasure : IfcType<double>
	{
		public IfcMomentOfInertiaMeasure(double value):base(value){}	

		public static implicit operator double(IfcMomentOfInertiaMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMomentOfInertiaMeasure(double v)
		{
			return new IfcMomentOfInertiaMeasure(v);
		}	

		public static IfcMomentOfInertiaMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMomentOfInertiaMeasure>(json);
		}

		public static IfcMomentOfInertiaMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmonetarymeasure.htm
	/// </summary>
	public class IfcMonetaryMeasure : IfcType<double>
	{
		public IfcMonetaryMeasure(double value):base(value){}	

		public static implicit operator double(IfcMonetaryMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcMonetaryMeasure(double v)
		{
			return new IfcMonetaryMeasure(v);
		}	

		public static IfcMonetaryMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMonetaryMeasure>(json);
		}

		public static IfcMonetaryMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmonthinyearnumber.htm
	/// </summary>
	public class IfcMonthInYearNumber : IfcType<int>
	{
		public IfcMonthInYearNumber(int value):base(value){}	

		public static implicit operator int(IfcMonthInYearNumber v)
		{
			return v.Value;
		}

		public static implicit operator IfcMonthInYearNumber(int v)
		{
			return new IfcMonthInYearNumber(v);
		}	

		public static IfcMonthInYearNumber FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMonthInYearNumber>(json);
		}

		public static IfcMonthInYearNumber FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcnonnegativelengthmeasure.htm
	/// </summary>
	public class IfcNonNegativeLengthMeasure : IfcType<IfcLengthMeasure>
	{
		public IfcNonNegativeLengthMeasure(IfcLengthMeasure value):base(value){}	

		public static implicit operator IfcLengthMeasure(IfcNonNegativeLengthMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcNonNegativeLengthMeasure(IfcLengthMeasure v)
		{
			return new IfcNonNegativeLengthMeasure(v);
		}	

		public static IfcNonNegativeLengthMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcNonNegativeLengthMeasure>(json);
		}

		public static IfcNonNegativeLengthMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcnormalisedratiomeasure.htm
	/// </summary>
	public class IfcNormalisedRatioMeasure : IfcType<IfcRatioMeasure>
	{
		public IfcNormalisedRatioMeasure(IfcRatioMeasure value):base(value){}	

		public static implicit operator IfcRatioMeasure(IfcNormalisedRatioMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcNormalisedRatioMeasure(IfcRatioMeasure v)
		{
			return new IfcNormalisedRatioMeasure(v);
		}	

		public static IfcNormalisedRatioMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcNormalisedRatioMeasure>(json);
		}

		public static IfcNormalisedRatioMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcnumericmeasure.htm
	/// </summary>
	public class IfcNumericMeasure : IfcType<double>
	{
		public IfcNumericMeasure(double value):base(value){}	

		public static implicit operator double(IfcNumericMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcNumericMeasure(double v)
		{
			return new IfcNumericMeasure(v);
		}	

		public static IfcNumericMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcNumericMeasure>(json);
		}

		public static IfcNumericMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcphmeasure.htm
	/// </summary>
	public class IfcPHMeasure : IfcType<double>
	{
		public IfcPHMeasure(double value):base(value){}	

		public static implicit operator double(IfcPHMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcPHMeasure(double v)
		{
			return new IfcPHMeasure(v);
		}	

		public static IfcPHMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPHMeasure>(json);
		}

		public static IfcPHMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcparametervalue.htm
	/// </summary>
	public class IfcParameterValue : IfcType<double>
	{
		public IfcParameterValue(double value):base(value){}	

		public static implicit operator double(IfcParameterValue v)
		{
			return v.Value;
		}

		public static implicit operator IfcParameterValue(double v)
		{
			return new IfcParameterValue(v);
		}	

		public static IfcParameterValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcParameterValue>(json);
		}

		public static IfcParameterValue FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplanarforcemeasure.htm
	/// </summary>
	public class IfcPlanarForceMeasure : IfcType<double>
	{
		public IfcPlanarForceMeasure(double value):base(value){}	

		public static implicit operator double(IfcPlanarForceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcPlanarForceMeasure(double v)
		{
			return new IfcPlanarForceMeasure(v);
		}	

		public static IfcPlanarForceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlanarForceMeasure>(json);
		}

		public static IfcPlanarForceMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplaneanglemeasure.htm
	/// </summary>
	public class IfcPlaneAngleMeasure : IfcType<double>
	{
		public IfcPlaneAngleMeasure(double value):base(value){}	

		public static implicit operator double(IfcPlaneAngleMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcPlaneAngleMeasure(double v)
		{
			return new IfcPlaneAngleMeasure(v);
		}	

		public static IfcPlaneAngleMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlaneAngleMeasure>(json);
		}

		public static IfcPlaneAngleMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpositivelengthmeasure.htm
	/// </summary>
	public class IfcPositiveLengthMeasure : IfcType<IfcLengthMeasure>
	{
		public IfcPositiveLengthMeasure(IfcLengthMeasure value):base(value){}	

		public static implicit operator IfcLengthMeasure(IfcPositiveLengthMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcPositiveLengthMeasure(IfcLengthMeasure v)
		{
			return new IfcPositiveLengthMeasure(v);
		}	

		public static IfcPositiveLengthMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPositiveLengthMeasure>(json);
		}

		public static IfcPositiveLengthMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpositiveplaneanglemeasure.htm
	/// </summary>
	public class IfcPositivePlaneAngleMeasure : IfcType<IfcPlaneAngleMeasure>
	{
		public IfcPositivePlaneAngleMeasure(IfcPlaneAngleMeasure value):base(value){}	

		public static implicit operator IfcPlaneAngleMeasure(IfcPositivePlaneAngleMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcPositivePlaneAngleMeasure(IfcPlaneAngleMeasure v)
		{
			return new IfcPositivePlaneAngleMeasure(v);
		}	

		public static IfcPositivePlaneAngleMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPositivePlaneAngleMeasure>(json);
		}

		public static IfcPositivePlaneAngleMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpositiveratiomeasure.htm
	/// </summary>
	public class IfcPositiveRatioMeasure : IfcType<IfcRatioMeasure>
	{
		public IfcPositiveRatioMeasure(IfcRatioMeasure value):base(value){}	

		public static implicit operator IfcRatioMeasure(IfcPositiveRatioMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcPositiveRatioMeasure(IfcRatioMeasure v)
		{
			return new IfcPositiveRatioMeasure(v);
		}	

		public static IfcPositiveRatioMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPositiveRatioMeasure>(json);
		}

		public static IfcPositiveRatioMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpowermeasure.htm
	/// </summary>
	public class IfcPowerMeasure : IfcType<double>
	{
		public IfcPowerMeasure(double value):base(value){}	

		public static implicit operator double(IfcPowerMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcPowerMeasure(double v)
		{
			return new IfcPowerMeasure(v);
		}	

		public static IfcPowerMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPowerMeasure>(json);
		}

		public static IfcPowerMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpresentabletext.htm
	/// </summary>
	public class IfcPresentableText : IfcType<string>
	{
		public IfcPresentableText(string value):base(value){}	

		public static implicit operator string(IfcPresentableText v)
		{
			return v.Value;
		}

		public static implicit operator IfcPresentableText(string v)
		{
			return new IfcPresentableText(v);
		}	

		public static IfcPresentableText FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPresentableText>(json);
		}

		public static IfcPresentableText FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpressuremeasure.htm
	/// </summary>
	public class IfcPressureMeasure : IfcType<double>
	{
		public IfcPressureMeasure(double value):base(value){}	

		public static implicit operator double(IfcPressureMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcPressureMeasure(double v)
		{
			return new IfcPressureMeasure(v);
		}	

		public static IfcPressureMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPressureMeasure>(json);
		}

		public static IfcPressureMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertysetdefinitionset.htm
	/// </summary>
	public class IfcPropertySetDefinitionSet : IfcType<List<IfcPropertySetDefinition>>
	{
		public IfcPropertySetDefinitionSet(List<IfcPropertySetDefinition> value):base(value){}	

		public static implicit operator List<IfcPropertySetDefinition>(IfcPropertySetDefinitionSet v)
		{
			return v.Value;
		}

		public static implicit operator IfcPropertySetDefinitionSet(List<IfcPropertySetDefinition> v)
		{
			return new IfcPropertySetDefinitionSet(v);
		}	

		public static IfcPropertySetDefinitionSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertySetDefinitionSet>(json);
		}

		public static IfcPropertySetDefinitionSet FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcradioactivitymeasure.htm
	/// </summary>
	public class IfcRadioActivityMeasure : IfcType<double>
	{
		public IfcRadioActivityMeasure(double value):base(value){}	

		public static implicit operator double(IfcRadioActivityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcRadioActivityMeasure(double v)
		{
			return new IfcRadioActivityMeasure(v);
		}	

		public static IfcRadioActivityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRadioActivityMeasure>(json);
		}

		public static IfcRadioActivityMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcratiomeasure.htm
	/// </summary>
	public class IfcRatioMeasure : IfcType<double>
	{
		public IfcRatioMeasure(double value):base(value){}	

		public static implicit operator double(IfcRatioMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcRatioMeasure(double v)
		{
			return new IfcRatioMeasure(v);
		}	

		public static IfcRatioMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRatioMeasure>(json);
		}

		public static IfcRatioMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreal.htm
	/// </summary>
	public class IfcReal : IfcType<double>
	{
		public IfcReal(double value):base(value){}	

		public static implicit operator double(IfcReal v)
		{
			return v.Value;
		}

		public static implicit operator IfcReal(double v)
		{
			return new IfcReal(v);
		}	

		public static IfcReal FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReal>(json);
		}

		public static IfcReal FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrotationalfrequencymeasure.htm
	/// </summary>
	public class IfcRotationalFrequencyMeasure : IfcType<double>
	{
		public IfcRotationalFrequencyMeasure(double value):base(value){}	

		public static implicit operator double(IfcRotationalFrequencyMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcRotationalFrequencyMeasure(double v)
		{
			return new IfcRotationalFrequencyMeasure(v);
		}	

		public static IfcRotationalFrequencyMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRotationalFrequencyMeasure>(json);
		}

		public static IfcRotationalFrequencyMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrotationalmassmeasure.htm
	/// </summary>
	public class IfcRotationalMassMeasure : IfcType<double>
	{
		public IfcRotationalMassMeasure(double value):base(value){}	

		public static implicit operator double(IfcRotationalMassMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcRotationalMassMeasure(double v)
		{
			return new IfcRotationalMassMeasure(v);
		}	

		public static IfcRotationalMassMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRotationalMassMeasure>(json);
		}

		public static IfcRotationalMassMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrotationalstiffnessmeasure.htm
	/// </summary>
	public class IfcRotationalStiffnessMeasure : IfcType<double>
	{
		public IfcRotationalStiffnessMeasure(double value):base(value){}	

		public static implicit operator double(IfcRotationalStiffnessMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcRotationalStiffnessMeasure(double v)
		{
			return new IfcRotationalStiffnessMeasure(v);
		}	

		public static IfcRotationalStiffnessMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRotationalStiffnessMeasure>(json);
		}

		public static IfcRotationalStiffnessMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsectionmodulusmeasure.htm
	/// </summary>
	public class IfcSectionModulusMeasure : IfcType<double>
	{
		public IfcSectionModulusMeasure(double value):base(value){}	

		public static implicit operator double(IfcSectionModulusMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcSectionModulusMeasure(double v)
		{
			return new IfcSectionModulusMeasure(v);
		}	

		public static IfcSectionModulusMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSectionModulusMeasure>(json);
		}

		public static IfcSectionModulusMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsectionalareaintegralmeasure.htm
	/// </summary>
	public class IfcSectionalAreaIntegralMeasure : IfcType<double>
	{
		public IfcSectionalAreaIntegralMeasure(double value):base(value){}	

		public static implicit operator double(IfcSectionalAreaIntegralMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcSectionalAreaIntegralMeasure(double v)
		{
			return new IfcSectionalAreaIntegralMeasure(v);
		}	

		public static IfcSectionalAreaIntegralMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSectionalAreaIntegralMeasure>(json);
		}

		public static IfcSectionalAreaIntegralMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshearmodulusmeasure.htm
	/// </summary>
	public class IfcShearModulusMeasure : IfcType<double>
	{
		public IfcShearModulusMeasure(double value):base(value){}	

		public static implicit operator double(IfcShearModulusMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcShearModulusMeasure(double v)
		{
			return new IfcShearModulusMeasure(v);
		}	

		public static IfcShearModulusMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcShearModulusMeasure>(json);
		}

		public static IfcShearModulusMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsolidanglemeasure.htm
	/// </summary>
	public class IfcSolidAngleMeasure : IfcType<double>
	{
		public IfcSolidAngleMeasure(double value):base(value){}	

		public static implicit operator double(IfcSolidAngleMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcSolidAngleMeasure(double v)
		{
			return new IfcSolidAngleMeasure(v);
		}	

		public static IfcSolidAngleMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSolidAngleMeasure>(json);
		}

		public static IfcSolidAngleMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsoundpowerlevelmeasure.htm
	/// </summary>
	public class IfcSoundPowerLevelMeasure : IfcType<double>
	{
		public IfcSoundPowerLevelMeasure(double value):base(value){}	

		public static implicit operator double(IfcSoundPowerLevelMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcSoundPowerLevelMeasure(double v)
		{
			return new IfcSoundPowerLevelMeasure(v);
		}	

		public static IfcSoundPowerLevelMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSoundPowerLevelMeasure>(json);
		}

		public static IfcSoundPowerLevelMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsoundpowermeasure.htm
	/// </summary>
	public class IfcSoundPowerMeasure : IfcType<double>
	{
		public IfcSoundPowerMeasure(double value):base(value){}	

		public static implicit operator double(IfcSoundPowerMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcSoundPowerMeasure(double v)
		{
			return new IfcSoundPowerMeasure(v);
		}	

		public static IfcSoundPowerMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSoundPowerMeasure>(json);
		}

		public static IfcSoundPowerMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsoundpressurelevelmeasure.htm
	/// </summary>
	public class IfcSoundPressureLevelMeasure : IfcType<double>
	{
		public IfcSoundPressureLevelMeasure(double value):base(value){}	

		public static implicit operator double(IfcSoundPressureLevelMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcSoundPressureLevelMeasure(double v)
		{
			return new IfcSoundPressureLevelMeasure(v);
		}	

		public static IfcSoundPressureLevelMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSoundPressureLevelMeasure>(json);
		}

		public static IfcSoundPressureLevelMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsoundpressuremeasure.htm
	/// </summary>
	public class IfcSoundPressureMeasure : IfcType<double>
	{
		public IfcSoundPressureMeasure(double value):base(value){}	

		public static implicit operator double(IfcSoundPressureMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcSoundPressureMeasure(double v)
		{
			return new IfcSoundPressureMeasure(v);
		}	

		public static IfcSoundPressureMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSoundPressureMeasure>(json);
		}

		public static IfcSoundPressureMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspecificheatcapacitymeasure.htm
	/// </summary>
	public class IfcSpecificHeatCapacityMeasure : IfcType<double>
	{
		public IfcSpecificHeatCapacityMeasure(double value):base(value){}	

		public static implicit operator double(IfcSpecificHeatCapacityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcSpecificHeatCapacityMeasure(double v)
		{
			return new IfcSpecificHeatCapacityMeasure(v);
		}	

		public static IfcSpecificHeatCapacityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpecificHeatCapacityMeasure>(json);
		}

		public static IfcSpecificHeatCapacityMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspecularexponent.htm
	/// </summary>
	public class IfcSpecularExponent : IfcType<double>
	{
		public IfcSpecularExponent(double value):base(value){}	

		public static implicit operator double(IfcSpecularExponent v)
		{
			return v.Value;
		}

		public static implicit operator IfcSpecularExponent(double v)
		{
			return new IfcSpecularExponent(v);
		}	

		public static IfcSpecularExponent FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpecularExponent>(json);
		}

		public static IfcSpecularExponent FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspecularroughness.htm
	/// </summary>
	public class IfcSpecularRoughness : IfcType<double>
	{
		public IfcSpecularRoughness(double value):base(value){}	

		public static implicit operator double(IfcSpecularRoughness v)
		{
			return v.Value;
		}

		public static implicit operator IfcSpecularRoughness(double v)
		{
			return new IfcSpecularRoughness(v);
		}	

		public static IfcSpecularRoughness FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpecularRoughness>(json);
		}

		public static IfcSpecularRoughness FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctemperaturegradientmeasure.htm
	/// </summary>
	public class IfcTemperatureGradientMeasure : IfcType<double>
	{
		public IfcTemperatureGradientMeasure(double value):base(value){}	

		public static implicit operator double(IfcTemperatureGradientMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcTemperatureGradientMeasure(double v)
		{
			return new IfcTemperatureGradientMeasure(v);
		}	

		public static IfcTemperatureGradientMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTemperatureGradientMeasure>(json);
		}

		public static IfcTemperatureGradientMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctemperaturerateofchangemeasure.htm
	/// </summary>
	public class IfcTemperatureRateOfChangeMeasure : IfcType<double>
	{
		public IfcTemperatureRateOfChangeMeasure(double value):base(value){}	

		public static implicit operator double(IfcTemperatureRateOfChangeMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcTemperatureRateOfChangeMeasure(double v)
		{
			return new IfcTemperatureRateOfChangeMeasure(v);
		}	

		public static IfcTemperatureRateOfChangeMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTemperatureRateOfChangeMeasure>(json);
		}

		public static IfcTemperatureRateOfChangeMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctext.htm
	/// </summary>
	public class IfcText : IfcType<string>
	{
		public IfcText(string value):base(value){}	

		public static implicit operator string(IfcText v)
		{
			return v.Value;
		}

		public static implicit operator IfcText(string v)
		{
			return new IfcText(v);
		}	

		public static IfcText FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcText>(json);
		}

		public static IfcText FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextalignment.htm
	/// </summary>
	public class IfcTextAlignment : IfcType<string>
	{
		public IfcTextAlignment(string value):base(value){}	

		public static implicit operator string(IfcTextAlignment v)
		{
			return v.Value;
		}

		public static implicit operator IfcTextAlignment(string v)
		{
			return new IfcTextAlignment(v);
		}	

		public static IfcTextAlignment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextAlignment>(json);
		}

		public static IfcTextAlignment FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextdecoration.htm
	/// </summary>
	public class IfcTextDecoration : IfcType<string>
	{
		public IfcTextDecoration(string value):base(value){}	

		public static implicit operator string(IfcTextDecoration v)
		{
			return v.Value;
		}

		public static implicit operator IfcTextDecoration(string v)
		{
			return new IfcTextDecoration(v);
		}	

		public static IfcTextDecoration FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextDecoration>(json);
		}

		public static IfcTextDecoration FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextfontname.htm
	/// </summary>
	public class IfcTextFontName : IfcType<string>
	{
		public IfcTextFontName(string value):base(value){}	

		public static implicit operator string(IfcTextFontName v)
		{
			return v.Value;
		}

		public static implicit operator IfcTextFontName(string v)
		{
			return new IfcTextFontName(v);
		}	

		public static IfcTextFontName FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextFontName>(json);
		}

		public static IfcTextFontName FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctexttransformation.htm
	/// </summary>
	public class IfcTextTransformation : IfcType<string>
	{
		public IfcTextTransformation(string value):base(value){}	

		public static implicit operator string(IfcTextTransformation v)
		{
			return v.Value;
		}

		public static implicit operator IfcTextTransformation(string v)
		{
			return new IfcTextTransformation(v);
		}	

		public static IfcTextTransformation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextTransformation>(json);
		}

		public static IfcTextTransformation FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcthermaladmittancemeasure.htm
	/// </summary>
	public class IfcThermalAdmittanceMeasure : IfcType<double>
	{
		public IfcThermalAdmittanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcThermalAdmittanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcThermalAdmittanceMeasure(double v)
		{
			return new IfcThermalAdmittanceMeasure(v);
		}	

		public static IfcThermalAdmittanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcThermalAdmittanceMeasure>(json);
		}

		public static IfcThermalAdmittanceMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcthermalconductivitymeasure.htm
	/// </summary>
	public class IfcThermalConductivityMeasure : IfcType<double>
	{
		public IfcThermalConductivityMeasure(double value):base(value){}	

		public static implicit operator double(IfcThermalConductivityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcThermalConductivityMeasure(double v)
		{
			return new IfcThermalConductivityMeasure(v);
		}	

		public static IfcThermalConductivityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcThermalConductivityMeasure>(json);
		}

		public static IfcThermalConductivityMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcthermalexpansioncoefficientmeasure.htm
	/// </summary>
	public class IfcThermalExpansionCoefficientMeasure : IfcType<double>
	{
		public IfcThermalExpansionCoefficientMeasure(double value):base(value){}	

		public static implicit operator double(IfcThermalExpansionCoefficientMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcThermalExpansionCoefficientMeasure(double v)
		{
			return new IfcThermalExpansionCoefficientMeasure(v);
		}	

		public static IfcThermalExpansionCoefficientMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcThermalExpansionCoefficientMeasure>(json);
		}

		public static IfcThermalExpansionCoefficientMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcthermalresistancemeasure.htm
	/// </summary>
	public class IfcThermalResistanceMeasure : IfcType<double>
	{
		public IfcThermalResistanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcThermalResistanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcThermalResistanceMeasure(double v)
		{
			return new IfcThermalResistanceMeasure(v);
		}	

		public static IfcThermalResistanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcThermalResistanceMeasure>(json);
		}

		public static IfcThermalResistanceMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcthermaltransmittancemeasure.htm
	/// </summary>
	public class IfcThermalTransmittanceMeasure : IfcType<double>
	{
		public IfcThermalTransmittanceMeasure(double value):base(value){}	

		public static implicit operator double(IfcThermalTransmittanceMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcThermalTransmittanceMeasure(double v)
		{
			return new IfcThermalTransmittanceMeasure(v);
		}	

		public static IfcThermalTransmittanceMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcThermalTransmittanceMeasure>(json);
		}

		public static IfcThermalTransmittanceMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcthermodynamictemperaturemeasure.htm
	/// </summary>
	public class IfcThermodynamicTemperatureMeasure : IfcType<double>
	{
		public IfcThermodynamicTemperatureMeasure(double value):base(value){}	

		public static implicit operator double(IfcThermodynamicTemperatureMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcThermodynamicTemperatureMeasure(double v)
		{
			return new IfcThermodynamicTemperatureMeasure(v);
		}	

		public static IfcThermodynamicTemperatureMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcThermodynamicTemperatureMeasure>(json);
		}

		public static IfcThermodynamicTemperatureMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctime.htm
	/// </summary>
	public class IfcTime : IfcType<string>
	{
		public IfcTime(string value):base(value){}	

		public static implicit operator string(IfcTime v)
		{
			return v.Value;
		}

		public static implicit operator IfcTime(string v)
		{
			return new IfcTime(v);
		}	

		public static IfcTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTime>(json);
		}

		public static IfcTime FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctimemeasure.htm
	/// </summary>
	public class IfcTimeMeasure : IfcType<double>
	{
		public IfcTimeMeasure(double value):base(value){}	

		public static implicit operator double(IfcTimeMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcTimeMeasure(double v)
		{
			return new IfcTimeMeasure(v);
		}	

		public static IfcTimeMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTimeMeasure>(json);
		}

		public static IfcTimeMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctimestamp.htm
	/// </summary>
	public class IfcTimeStamp : IfcType<int>
	{
		public IfcTimeStamp(int value):base(value){}	

		public static implicit operator int(IfcTimeStamp v)
		{
			return v.Value;
		}

		public static implicit operator IfcTimeStamp(int v)
		{
			return new IfcTimeStamp(v);
		}	

		public static IfcTimeStamp FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTimeStamp>(json);
		}

		public static IfcTimeStamp FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctorquemeasure.htm
	/// </summary>
	public class IfcTorqueMeasure : IfcType<double>
	{
		public IfcTorqueMeasure(double value):base(value){}	

		public static implicit operator double(IfcTorqueMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcTorqueMeasure(double v)
		{
			return new IfcTorqueMeasure(v);
		}	

		public static IfcTorqueMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTorqueMeasure>(json);
		}

		public static IfcTorqueMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcurireference.htm
	/// </summary>
	public class IfcURIReference : IfcType<string>
	{
		public IfcURIReference(string value):base(value){}	

		public static implicit operator string(IfcURIReference v)
		{
			return v.Value;
		}

		public static implicit operator IfcURIReference(string v)
		{
			return new IfcURIReference(v);
		}	

		public static IfcURIReference FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcURIReference>(json);
		}

		public static IfcURIReference FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvaporpermeabilitymeasure.htm
	/// </summary>
	public class IfcVaporPermeabilityMeasure : IfcType<double>
	{
		public IfcVaporPermeabilityMeasure(double value):base(value){}	

		public static implicit operator double(IfcVaporPermeabilityMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcVaporPermeabilityMeasure(double v)
		{
			return new IfcVaporPermeabilityMeasure(v);
		}	

		public static IfcVaporPermeabilityMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVaporPermeabilityMeasure>(json);
		}

		public static IfcVaporPermeabilityMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvolumemeasure.htm
	/// </summary>
	public class IfcVolumeMeasure : IfcType<double>
	{
		public IfcVolumeMeasure(double value):base(value){}	

		public static implicit operator double(IfcVolumeMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcVolumeMeasure(double v)
		{
			return new IfcVolumeMeasure(v);
		}	

		public static IfcVolumeMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVolumeMeasure>(json);
		}

		public static IfcVolumeMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvolumetricflowratemeasure.htm
	/// </summary>
	public class IfcVolumetricFlowRateMeasure : IfcType<double>
	{
		public IfcVolumetricFlowRateMeasure(double value):base(value){}	

		public static implicit operator double(IfcVolumetricFlowRateMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcVolumetricFlowRateMeasure(double v)
		{
			return new IfcVolumetricFlowRateMeasure(v);
		}	

		public static IfcVolumetricFlowRateMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVolumetricFlowRateMeasure>(json);
		}

		public static IfcVolumetricFlowRateMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwarpingconstantmeasure.htm
	/// </summary>
	public class IfcWarpingConstantMeasure : IfcType<double>
	{
		public IfcWarpingConstantMeasure(double value):base(value){}	

		public static implicit operator double(IfcWarpingConstantMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcWarpingConstantMeasure(double v)
		{
			return new IfcWarpingConstantMeasure(v);
		}	

		public static IfcWarpingConstantMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWarpingConstantMeasure>(json);
		}

		public static IfcWarpingConstantMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwarpingmomentmeasure.htm
	/// </summary>
	public class IfcWarpingMomentMeasure : IfcType<double>
	{
		public IfcWarpingMomentMeasure(double value):base(value){}	

		public static implicit operator double(IfcWarpingMomentMeasure v)
		{
			return v.Value;
		}

		public static implicit operator IfcWarpingMomentMeasure(double v)
		{
			return new IfcWarpingMomentMeasure(v);
		}	

		public static IfcWarpingMomentMeasure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWarpingMomentMeasure>(json);
		}

		public static IfcWarpingMomentMeasure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactionrequesttypeenum.htm
	/// </summary>
	public enum IfcActionRequestTypeEnum {EMAIL,FAX,PHONE,POST,VERBAL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactionsourcetypeenum.htm
	/// </summary>
	public enum IfcActionSourceTypeEnum {DEAD_LOAD_G,COMPLETION_G1,LIVE_LOAD_Q,SNOW_S,WIND_W,PRESTRESSING_P,SETTLEMENT_U,TEMPERATURE_T,EARTHQUAKE_E,FIRE,IMPULSE,IMPACT,TRANSPORT,ERECTION,PROPPING,SYSTEM_IMPERFECTION,SHRINKAGE,CREEP,LACK_OF_FIT,BUOYANCY,ICE,CURRENT,WAVE,RAIN,BRAKES,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactiontypeenum.htm
	/// </summary>
	public enum IfcActionTypeEnum {PERMANENT_G,VARIABLE_Q,EXTRAORDINARY_A,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactuatortypeenum.htm
	/// </summary>
	public enum IfcActuatorTypeEnum {ELECTRICACTUATOR,HANDOPERATEDACTUATOR,HYDRAULICACTUATOR,PNEUMATICACTUATOR,THERMOSTATICACTUATOR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaddresstypeenum.htm
	/// </summary>
	public enum IfcAddressTypeEnum {OFFICE,SITE,HOME,DISTRIBUTIONPOINT,USERDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairterminalboxtypeenum.htm
	/// </summary>
	public enum IfcAirTerminalBoxTypeEnum {CONSTANTFLOW,VARIABLEFLOWPRESSUREDEPENDANT,VARIABLEFLOWPRESSUREINDEPENDANT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairterminaltypeenum.htm
	/// </summary>
	public enum IfcAirTerminalTypeEnum {DIFFUSER,GRILLE,LOUVRE,REGISTER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairtoairheatrecoverytypeenum.htm
	/// </summary>
	public enum IfcAirToAirHeatRecoveryTypeEnum {FIXEDPLATECOUNTERFLOWEXCHANGER,FIXEDPLATECROSSFLOWEXCHANGER,FIXEDPLATEPARALLELFLOWEXCHANGER,ROTARYWHEEL,RUNAROUNDCOILLOOP,HEATPIPE,TWINTOWERENTHALPYRECOVERYLOOPS,THERMOSIPHONSEALEDTUBEHEATEXCHANGERS,THERMOSIPHONCOILTYPEHEATEXCHANGERS,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcalarmtypeenum.htm
	/// </summary>
	public enum IfcAlarmTypeEnum {BELL,BREAKGLASSBUTTON,LIGHT,MANUALPULLBOX,SIREN,WHISTLE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcanalysismodeltypeenum.htm
	/// </summary>
	public enum IfcAnalysisModelTypeEnum {IN_PLANE_LOADING_2D,OUT_PLANE_LOADING_2D,LOADING_3D,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcanalysistheorytypeenum.htm
	/// </summary>
	public enum IfcAnalysisTheoryTypeEnum {FIRST_ORDER_THEORY,SECOND_ORDER_THEORY,THIRD_ORDER_THEORY,FULL_NONLINEAR_THEORY,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcarithmeticoperatorenum.htm
	/// </summary>
	public enum IfcArithmeticOperatorEnum {ADD,DIVIDE,MULTIPLY,SUBTRACT}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcassemblyplaceenum.htm
	/// </summary>
	public enum IfcAssemblyPlaceEnum {SITE,FACTORY,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaudiovisualappliancetypeenum.htm
	/// </summary>
	public enum IfcAudioVisualApplianceTypeEnum {AMPLIFIER,CAMERA,DISPLAY,MICROPHONE,PLAYER,PROJECTOR,RECEIVER,SPEAKER,SWITCHER,TELEPHONE,TUNER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbsplinecurveform.htm
	/// </summary>
	public enum IfcBSplineCurveForm {POLYLINE_FORM,CIRCULAR_ARC,ELLIPTIC_ARC,PARABOLIC_ARC,HYPERBOLIC_ARC,UNSPECIFIED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbsplinesurfaceform.htm
	/// </summary>
	public enum IfcBSplineSurfaceForm {PLANE_SURF,CYLINDRICAL_SURF,CONICAL_SURF,SPHERICAL_SURF,TOROIDAL_SURF,SURF_OF_REVOLUTION,RULED_SURF,GENERALISED_CONE,QUADRIC_SURF,SURF_OF_LINEAR_EXTRUSION,UNSPECIFIED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbeamtypeenum.htm
	/// </summary>
	public enum IfcBeamTypeEnum {BEAM,JOIST,HOLLOWCORE,LINTEL,SPANDREL,T_BEAM,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbenchmarkenum.htm
	/// </summary>
	public enum IfcBenchmarkEnum {GREATERTHAN,GREATERTHANOREQUALTO,LESSTHAN,LESSTHANOREQUALTO,EQUALTO,NOTEQUALTO,INCLUDES,NOTINCLUDES,INCLUDEDIN,NOTINCLUDEDIN}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboilertypeenum.htm
	/// </summary>
	public enum IfcBoilerTypeEnum {WATER,STEAM,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbooleanoperator.htm
	/// </summary>
	public enum IfcBooleanOperator {UNION,INTERSECTION,DIFFERENCE}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingelementparttypeenum.htm
	/// </summary>
	public enum IfcBuildingElementPartTypeEnum {INSULATION,PRECASTPANEL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingelementproxytypeenum.htm
	/// </summary>
	public enum IfcBuildingElementProxyTypeEnum {COMPLEX,ELEMENT,PARTIAL,PROVISIONFORVOID,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingsystemtypeenum.htm
	/// </summary>
	public enum IfcBuildingSystemTypeEnum {FENESTRATION,FOUNDATION,LOADBEARING,OUTERSHELL,SHADING,TRANSPORT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcburnertypeenum.htm
	/// </summary>
	public enum IfcBurnerTypeEnum {USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablecarrierfittingtypeenum.htm
	/// </summary>
	public enum IfcCableCarrierFittingTypeEnum {BEND,CROSS,REDUCER,TEE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablecarriersegmenttypeenum.htm
	/// </summary>
	public enum IfcCableCarrierSegmentTypeEnum {CABLELADDERSEGMENT,CABLETRAYSEGMENT,CABLETRUNKINGSEGMENT,CONDUITSEGMENT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablefittingtypeenum.htm
	/// </summary>
	public enum IfcCableFittingTypeEnum {CONNECTOR,ENTRY,EXIT,JUNCTION,TRANSITION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablesegmenttypeenum.htm
	/// </summary>
	public enum IfcCableSegmentTypeEnum {BUSBARSEGMENT,CABLESEGMENT,CONDUCTORSEGMENT,CORESEGMENT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcchangeactionenum.htm
	/// </summary>
	public enum IfcChangeActionEnum {NOCHANGE,MODIFIED,ADDED,DELETED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcchillertypeenum.htm
	/// </summary>
	public enum IfcChillerTypeEnum {AIRCOOLED,WATERCOOLED,HEATRECOVERY,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcchimneytypeenum.htm
	/// </summary>
	public enum IfcChimneyTypeEnum {USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoiltypeenum.htm
	/// </summary>
	public enum IfcCoilTypeEnum {DXCOOLINGCOIL,ELECTRICHEATINGCOIL,GASHEATINGCOIL,HYDRONICCOIL,STEAMHEATINGCOIL,WATERCOOLINGCOIL,WATERHEATINGCOIL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolumntypeenum.htm
	/// </summary>
	public enum IfcColumnTypeEnum {COLUMN,PILASTER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccommunicationsappliancetypeenum.htm
	/// </summary>
	public enum IfcCommunicationsApplianceTypeEnum {ANTENNA,COMPUTER,FAX,GATEWAY,MODEM,NETWORKAPPLIANCE,NETWORKBRIDGE,NETWORKHUB,PRINTER,REPEATER,ROUTER,SCANNER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccomplexpropertytemplatetypeenum.htm
	/// </summary>
	public enum IfcComplexPropertyTemplateTypeEnum {P_COMPLEX,Q_COMPLEX}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccompressortypeenum.htm
	/// </summary>
	public enum IfcCompressorTypeEnum {DYNAMIC,RECIPROCATING,ROTARY,SCROLL,TROCHOIDAL,SINGLESTAGE,BOOSTER,OPENTYPE,HERMETIC,SEMIHERMETIC,WELDEDSHELLHERMETIC,ROLLINGPISTON,ROTARYVANE,SINGLESCREW,TWINSCREW,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccondensertypeenum.htm
	/// </summary>
	public enum IfcCondenserTypeEnum {AIRCOOLED,EVAPORATIVECOOLED,WATERCOOLED,WATERCOOLEDBRAZEDPLATE,WATERCOOLEDSHELLCOIL,WATERCOOLEDSHELLTUBE,WATERCOOLEDTUBEINTUBE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconnectiontypeenum.htm
	/// </summary>
	public enum IfcConnectionTypeEnum {ATPATH,ATSTART,ATEND,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstraintenum.htm
	/// </summary>
	public enum IfcConstraintEnum {HARD,SOFT,ADVISORY,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionequipmentresourcetypeenum.htm
	/// </summary>
	public enum IfcConstructionEquipmentResourceTypeEnum {DEMOLISHING,EARTHMOVING,ERECTING,HEATING,LIGHTING,PAVING,PUMPING,TRANSPORTING,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionmaterialresourcetypeenum.htm
	/// </summary>
	public enum IfcConstructionMaterialResourceTypeEnum {AGGREGATES,CONCRETE,DRYWALL,FUEL,GYPSUM,MASONRY,METAL,PLASTIC,WOOD,NOTDEFINED,USERDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionproductresourcetypeenum.htm
	/// </summary>
	public enum IfcConstructionProductResourceTypeEnum {ASSEMBLY,FORMWORK,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccontrollertypeenum.htm
	/// </summary>
	public enum IfcControllerTypeEnum {FLOATING,PROGRAMMABLE,PROPORTIONAL,MULTIPOSITION,TWOPOSITION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccooledbeamtypeenum.htm
	/// </summary>
	public enum IfcCooledBeamTypeEnum {ACTIVE,PASSIVE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoolingtowertypeenum.htm
	/// </summary>
	public enum IfcCoolingTowerTypeEnum {NATURALDRAFT,MECHANICALINDUCEDDRAFT,MECHANICALFORCEDDRAFT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccostitemtypeenum.htm
	/// </summary>
	public enum IfcCostItemTypeEnum {USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccostscheduletypeenum.htm
	/// </summary>
	public enum IfcCostScheduleTypeEnum {BUDGET,COSTPLAN,ESTIMATE,TENDER,PRICEDBILLOFQUANTITIES,UNPRICEDBILLOFQUANTITIES,SCHEDULEOFRATES,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoveringtypeenum.htm
	/// </summary>
	public enum IfcCoveringTypeEnum {CEILING,FLOORING,CLADDING,ROOFING,MOLDING,SKIRTINGBOARD,INSULATION,MEMBRANE,SLEEVING,WRAPPING,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccrewresourcetypeenum.htm
	/// </summary>
	public enum IfcCrewResourceTypeEnum {OFFICE,SITE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurtainwalltypeenum.htm
	/// </summary>
	public enum IfcCurtainWallTypeEnum {USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurveinterpolationenum.htm
	/// </summary>
	public enum IfcCurveInterpolationEnum {LINEAR,LOG_LINEAR,LOG_LOG,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdampertypeenum.htm
	/// </summary>
	public enum IfcDamperTypeEnum {BACKDRAFTDAMPER,BALANCINGDAMPER,BLASTDAMPER,CONTROLDAMPER,FIREDAMPER,FIRESMOKEDAMPER,FUMEHOODEXHAUST,GRAVITYDAMPER,GRAVITYRELIEFDAMPER,RELIEFDAMPER,SMOKEDAMPER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdataoriginenum.htm
	/// </summary>
	public enum IfcDataOriginEnum {MEASURED,PREDICTED,SIMULATED,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcderivedunitenum.htm
	/// </summary>
	public enum IfcDerivedUnitEnum {ANGULARVELOCITYUNIT,AREADENSITYUNIT,COMPOUNDPLANEANGLEUNIT,DYNAMICVISCOSITYUNIT,HEATFLUXDENSITYUNIT,INTEGERCOUNTRATEUNIT,ISOTHERMALMOISTURECAPACITYUNIT,KINEMATICVISCOSITYUNIT,LINEARVELOCITYUNIT,MASSDENSITYUNIT,MASSFLOWRATEUNIT,MOISTUREDIFFUSIVITYUNIT,MOLECULARWEIGHTUNIT,SPECIFICHEATCAPACITYUNIT,THERMALADMITTANCEUNIT,THERMALCONDUCTANCEUNIT,THERMALRESISTANCEUNIT,THERMALTRANSMITTANCEUNIT,VAPORPERMEABILITYUNIT,VOLUMETRICFLOWRATEUNIT,ROTATIONALFREQUENCYUNIT,TORQUEUNIT,MOMENTOFINERTIAUNIT,LINEARMOMENTUNIT,LINEARFORCEUNIT,PLANARFORCEUNIT,MODULUSOFELASTICITYUNIT,SHEARMODULUSUNIT,LINEARSTIFFNESSUNIT,ROTATIONALSTIFFNESSUNIT,MODULUSOFSUBGRADEREACTIONUNIT,ACCELERATIONUNIT,CURVATUREUNIT,HEATINGVALUEUNIT,IONCONCENTRATIONUNIT,LUMINOUSINTENSITYDISTRIBUTIONUNIT,MASSPERLENGTHUNIT,MODULUSOFLINEARSUBGRADEREACTIONUNIT,MODULUSOFROTATIONALSUBGRADEREACTIONUNIT,PHUNIT,ROTATIONALMASSUNIT,SECTIONAREAINTEGRALUNIT,SECTIONMODULUSUNIT,SOUNDPOWERLEVELUNIT,SOUNDPOWERUNIT,SOUNDPRESSURELEVELUNIT,SOUNDPRESSUREUNIT,TEMPERATUREGRADIENTUNIT,TEMPERATURERATEOFCHANGEUNIT,THERMALEXPANSIONCOEFFICIENTUNIT,WARPINGCONSTANTUNIT,WARPINGMOMENTUNIT,USERDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdirectionsenseenum.htm
	/// </summary>
	public enum IfcDirectionSenseEnum {POSITIVE,NEGATIVE}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdiscreteaccessorytypeenum.htm
	/// </summary>
	public enum IfcDiscreteAccessoryTypeEnum {ANCHORPLATE,BRACKET,SHOE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionchamberelementtypeenum.htm
	/// </summary>
	public enum IfcDistributionChamberElementTypeEnum {FORMEDDUCT,INSPECTIONCHAMBER,INSPECTIONPIT,MANHOLE,METERCHAMBER,SUMP,TRENCH,VALVECHAMBER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionporttypeenum.htm
	/// </summary>
	public enum IfcDistributionPortTypeEnum {CABLE,CABLECARRIER,DUCT,PIPE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionsystemenum.htm
	/// </summary>
	public enum IfcDistributionSystemEnum {AIRCONDITIONING,AUDIOVISUAL,CHEMICAL,CHILLEDWATER,COMMUNICATION,COMPRESSEDAIR,CONDENSERWATER,CONTROL,CONVEYING,DATA,DISPOSAL,DOMESTICCOLDWATER,DOMESTICHOTWATER,DRAINAGE,EARTHING,ELECTRICAL,ELECTROACOUSTIC,EXHAUST,FIREPROTECTION,FUEL,GAS,HAZARDOUS,HEATING,LIGHTING,LIGHTNINGPROTECTION,MUNICIPALSOLIDWASTE,OIL,OPERATIONAL,POWERGENERATION,RAINWATER,REFRIGERATION,SECURITY,SEWAGE,SIGNAL,STORMWATER,TELEPHONE,TV,VACUUM,VENT,VENTILATION,WASTEWATER,WATERSUPPLY,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdocumentconfidentialityenum.htm
	/// </summary>
	public enum IfcDocumentConfidentialityEnum {PUBLIC,RESTRICTED,CONFIDENTIAL,PERSONAL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdocumentstatusenum.htm
	/// </summary>
	public enum IfcDocumentStatusEnum {DRAFT,FINALDRAFT,FINAL,REVISION,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoorpaneloperationenum.htm
	/// </summary>
	public enum IfcDoorPanelOperationEnum {SWINGING,DOUBLE_ACTING,SLIDING,FOLDING,REVOLVING,ROLLINGUP,FIXEDPANEL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoorpanelpositionenum.htm
	/// </summary>
	public enum IfcDoorPanelPositionEnum {LEFT,MIDDLE,RIGHT,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoorstyleconstructionenum.htm
	/// </summary>
	public enum IfcDoorStyleConstructionEnum {ALUMINIUM,HIGH_GRADE_STEEL,STEEL,WOOD,ALUMINIUM_WOOD,ALUMINIUM_PLASTIC,PLASTIC,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoorstyleoperationenum.htm
	/// </summary>
	public enum IfcDoorStyleOperationEnum {SINGLE_SWING_LEFT,SINGLE_SWING_RIGHT,DOUBLE_DOOR_SINGLE_SWING,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT,DOUBLE_SWING_LEFT,DOUBLE_SWING_RIGHT,DOUBLE_DOOR_DOUBLE_SWING,SLIDING_TO_LEFT,SLIDING_TO_RIGHT,DOUBLE_DOOR_SLIDING,FOLDING_TO_LEFT,FOLDING_TO_RIGHT,DOUBLE_DOOR_FOLDING,REVOLVING,ROLLINGUP,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoortypeenum.htm
	/// </summary>
	public enum IfcDoorTypeEnum {DOOR,GATE,TRAPDOOR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoortypeoperationenum.htm
	/// </summary>
	public enum IfcDoorTypeOperationEnum {SINGLE_SWING_LEFT,SINGLE_SWING_RIGHT,DOUBLE_DOOR_SINGLE_SWING,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT,DOUBLE_SWING_LEFT,DOUBLE_SWING_RIGHT,DOUBLE_DOOR_DOUBLE_SWING,SLIDING_TO_LEFT,SLIDING_TO_RIGHT,DOUBLE_DOOR_SLIDING,FOLDING_TO_LEFT,FOLDING_TO_RIGHT,DOUBLE_DOOR_FOLDING,REVOLVING,ROLLINGUP,SWING_FIXED_LEFT,SWING_FIXED_RIGHT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductfittingtypeenum.htm
	/// </summary>
	public enum IfcDuctFittingTypeEnum {BEND,CONNECTOR,ENTRY,EXIT,JUNCTION,OBSTRUCTION,TRANSITION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductsegmenttypeenum.htm
	/// </summary>
	public enum IfcDuctSegmentTypeEnum {RIGIDSEGMENT,FLEXIBLESEGMENT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductsilencertypeenum.htm
	/// </summary>
	public enum IfcDuctSilencerTypeEnum {FLATOVAL,RECTANGULAR,ROUND,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricappliancetypeenum.htm
	/// </summary>
	public enum IfcElectricApplianceTypeEnum {DISHWASHER,ELECTRICCOOKER,FREESTANDINGELECTRICHEATER,FREESTANDINGFAN,FREESTANDINGWATERHEATER,FREESTANDINGWATERCOOLER,FREEZER,FRIDGE_FREEZER,HANDDRYER,KITCHENMACHINE,MICROWAVE,PHOTOCOPIER,REFRIGERATOR,TUMBLEDRYER,VENDINGMACHINE,WASHINGMACHINE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricdistributionboardtypeenum.htm
	/// </summary>
	public enum IfcElectricDistributionBoardTypeEnum {CONSUMERUNIT,DISTRIBUTIONBOARD,MOTORCONTROLCENTRE,SWITCHBOARD,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricflowstoragedevicetypeenum.htm
	/// </summary>
	public enum IfcElectricFlowStorageDeviceTypeEnum {BATTERY,CAPACITORBANK,HARMONICFILTER,INDUCTORBANK,UPS,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricgeneratortypeenum.htm
	/// </summary>
	public enum IfcElectricGeneratorTypeEnum {CHP,ENGINEGENERATOR,STANDALONE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricmotortypeenum.htm
	/// </summary>
	public enum IfcElectricMotorTypeEnum {DC,INDUCTION,POLYPHASE,RELUCTANCESYNCHRONOUS,SYNCHRONOUS,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectrictimecontroltypeenum.htm
	/// </summary>
	public enum IfcElectricTimeControlTypeEnum {TIMECLOCK,TIMEDELAY,RELAY,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementassemblytypeenum.htm
	/// </summary>
	public enum IfcElementAssemblyTypeEnum {ACCESSORY_ASSEMBLY,ARCH,BEAM_GRID,BRACED_FRAME,GIRDER,REINFORCEMENT_UNIT,RIGID_FRAME,SLAB_FIELD,TRUSS,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementcompositionenum.htm
	/// </summary>
	public enum IfcElementCompositionEnum {COMPLEX,ELEMENT,PARTIAL}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcenginetypeenum.htm
	/// </summary>
	public enum IfcEngineTypeEnum {EXTERNALCOMBUSTION,INTERNALCOMBUSTION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcevaporativecoolertypeenum.htm
	/// </summary>
	public enum IfcEvaporativeCoolerTypeEnum {DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER,DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER,DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER,DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER,DIRECTEVAPORATIVEAIRWASHER,INDIRECTEVAPORATIVEPACKAGEAIRCOOLER,INDIRECTEVAPORATIVEWETCOIL,INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER,INDIRECTDIRECTCOMBINATION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcevaporatortypeenum.htm
	/// </summary>
	public enum IfcEvaporatorTypeEnum {DIRECTEXPANSION,DIRECTEXPANSIONSHELLANDTUBE,DIRECTEXPANSIONTUBEINTUBE,DIRECTEXPANSIONBRAZEDPLATE,FLOODEDSHELLANDTUBE,SHELLANDCOIL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifceventtriggertypeenum.htm
	/// </summary>
	public enum IfcEventTriggerTypeEnum {EVENTRULE,EVENTMESSAGE,EVENTTIME,EVENTCOMPLEX,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifceventtypeenum.htm
	/// </summary>
	public enum IfcEventTypeEnum {STARTEVENT,ENDEVENT,INTERMEDIATEEVENT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternalspatialelementtypeenum.htm
	/// </summary>
	public enum IfcExternalSpatialElementTypeEnum {EXTERNAL,EXTERNAL_EARTH,EXTERNAL_WATER,EXTERNAL_FIRE,USERDEFINED,NOTDEFIEND}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfantypeenum.htm
	/// </summary>
	public enum IfcFanTypeEnum {CENTRIFUGALFORWARDCURVED,CENTRIFUGALRADIAL,CENTRIFUGALBACKWARDINCLINEDCURVED,CENTRIFUGALAIRFOIL,TUBEAXIAL,VANEAXIAL,PROPELLORAXIAL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfastenertypeenum.htm
	/// </summary>
	public enum IfcFastenerTypeEnum {GLUE,MORTAR,WELD,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfiltertypeenum.htm
	/// </summary>
	public enum IfcFilterTypeEnum {AIRPARTICLEFILTER,COMPRESSEDAIRFILTER,ODORFILTER,OILFILTER,STRAINER,WATERFILTER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfiresuppressionterminaltypeenum.htm
	/// </summary>
	public enum IfcFireSuppressionTerminalTypeEnum {BREECHINGINLET,FIREHYDRANT,HOSEREEL,SPRINKLER,SPRINKLERDEFLECTOR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowdirectionenum.htm
	/// </summary>
	public enum IfcFlowDirectionEnum {SOURCE,SINK,SOURCEANDSINK,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowinstrumenttypeenum.htm
	/// </summary>
	public enum IfcFlowInstrumentTypeEnum {PRESSUREGAUGE,THERMOMETER,AMMETER,FREQUENCYMETER,POWERFACTORMETER,PHASEANGLEMETER,VOLTMETER_PEAK,VOLTMETER_RMS,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowmetertypeenum.htm
	/// </summary>
	public enum IfcFlowMeterTypeEnum {ENERGYMETER,GASMETER,OILMETER,WATERMETER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfootingtypeenum.htm
	/// </summary>
	public enum IfcFootingTypeEnum {CAISSON_FOUNDATION,FOOTING_BEAM,PAD_FOOTING,PILE_CAP,STRIP_FOOTING,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfurnituretypeenum.htm
	/// </summary>
	public enum IfcFurnitureTypeEnum {CHAIR,TABLE,DESK,BED,FILECABINET,SHELF,SOFA,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeographicelementtypeenum.htm
	/// </summary>
	public enum IfcGeographicElementTypeEnum {TERRAIN,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeometricprojectionenum.htm
	/// </summary>
	public enum IfcGeometricProjectionEnum {GRAPH_VIEW,SKETCH_VIEW,MODEL_VIEW,PLAN_VIEW,REFLECTED_PLAN_VIEW,SECTION_VIEW,ELEVATION_VIEW,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcglobalorlocalenum.htm
	/// </summary>
	public enum IfcGlobalOrLocalEnum {GLOBAL_COORDS,LOCAL_COORDS}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgridtypeenum.htm
	/// </summary>
	public enum IfcGridTypeEnum {RECTANGULAR,RADIAL,TRIANGULAR,IRREGULAR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcheatexchangertypeenum.htm
	/// </summary>
	public enum IfcHeatExchangerTypeEnum {PLATE,SHELLANDTUBE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifchumidifiertypeenum.htm
	/// </summary>
	public enum IfcHumidifierTypeEnum {STEAMINJECTION,ADIABATICAIRWASHER,ADIABATICPAN,ADIABATICWETTEDELEMENT,ADIABATICATOMIZING,ADIABATICULTRASONIC,ADIABATICRIGIDMEDIA,ADIABATICCOMPRESSEDAIRNOZZLE,ASSISTEDELECTRIC,ASSISTEDNATURALGAS,ASSISTEDPROPANE,ASSISTEDBUTANE,ASSISTEDSTEAM,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcinterceptortypeenum.htm
	/// </summary>
	public enum IfcInterceptorTypeEnum {CYCLONIC,GREASE,OIL,PETROL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcinternalorexternalenum.htm
	/// </summary>
	public enum IfcInternalOrExternalEnum {INTERNAL,EXTERNAL,EXTERNAL_EARTH,EXTERNAL_WATER,EXTERNAL_FIRE,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcinventorytypeenum.htm
	/// </summary>
	public enum IfcInventoryTypeEnum {ASSETINVENTORY,SPACEINVENTORY,FURNITUREINVENTORY,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcjunctionboxtypeenum.htm
	/// </summary>
	public enum IfcJunctionBoxTypeEnum {DATA,POWER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcknottype.htm
	/// </summary>
	public enum IfcKnotType {UNIFORM_KNOTS,QUASI_UNIFORM_KNOTS,PIECEWISE_BEZIER_KNOTS,UNSPECIFIED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclaborresourcetypeenum.htm
	/// </summary>
	public enum IfcLaborResourceTypeEnum {ADMINISTRATION,CARPENTRY,CLEANING,CONCRETE,DRYWALL,ELECTRIC,FINISHING,FLOORING,GENERAL,HVAC,LANDSCAPING,MASONRY,PAINTING,PAVING,PLUMBING,ROOFING,SITEGRADING,STEELWORK,SURVEYING,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclamptypeenum.htm
	/// </summary>
	public enum IfcLampTypeEnum {COMPACTFLUORESCENT,FLUORESCENT,HALOGEN,HIGHPRESSUREMERCURY,HIGHPRESSURESODIUM,LED,METALHALIDE,OLED,TUNGSTENFILAMENT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclayersetdirectionenum.htm
	/// </summary>
	public enum IfcLayerSetDirectionEnum {AXIS1,AXIS2,AXIS3}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightdistributioncurveenum.htm
	/// </summary>
	public enum IfcLightDistributionCurveEnum {TYPE_A,TYPE_B,TYPE_C,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightemissionsourceenum.htm
	/// </summary>
	public enum IfcLightEmissionSourceEnum {COMPACTFLUORESCENT,FLUORESCENT,HIGHPRESSUREMERCURY,HIGHPRESSURESODIUM,LIGHTEMITTINGDIODE,LOWPRESSURESODIUM,LOWVOLTAGEHALOGEN,MAINVOLTAGEHALOGEN,METALHALIDE,TUNGSTENFILAMENT,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightfixturetypeenum.htm
	/// </summary>
	public enum IfcLightFixtureTypeEnum {POINTSOURCE,DIRECTIONSOURCE,SECURITYLIGHTING,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcloadgrouptypeenum.htm
	/// </summary>
	public enum IfcLoadGroupTypeEnum {LOAD_GROUP,LOAD_CASE,LOAD_COMBINATION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclogicaloperatorenum.htm
	/// </summary>
	public enum IfcLogicalOperatorEnum {LOGICALAND,LOGICALOR,LOGICALXOR,LOGICALNOTAND,LOGICALNOTOR}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmechanicalfastenertypeenum.htm
	/// </summary>
	public enum IfcMechanicalFastenerTypeEnum {ANCHORBOLT,BOLT,DOWEL,NAIL,NAILPLATE,RIVET,SCREW,SHEARCONNECTOR,STAPLE,STUDSHEARCONNECTOR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmedicaldevicetypeenum.htm
	/// </summary>
	public enum IfcMedicalDeviceTypeEnum {AIRSTATION,FEEDAIRUNIT,OXYGENGENERATOR,OXYGENPLANT,VACUUMSTATION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmembertypeenum.htm
	/// </summary>
	public enum IfcMemberTypeEnum {BRACE,CHORD,COLLAR,MEMBER,MULLION,PLATE,POST,PURLIN,RAFTER,STRINGER,STRUT,STUD,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmotorconnectiontypeenum.htm
	/// </summary>
	public enum IfcMotorConnectionTypeEnum {BELTDRIVE,COUPLING,DIRECTDRIVE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcnullstyle.htm
	/// </summary>
	public enum IfcNullStyle {NULL}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcobjecttypeenum.htm
	/// </summary>
	public enum IfcObjectTypeEnum {PRODUCT,PROCESS,CONTROL,RESOURCE,ACTOR,GROUP,PROJECT,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcobjectiveenum.htm
	/// </summary>
	public enum IfcObjectiveEnum {CODECOMPLIANCE,CODEWAIVER,DESIGNINTENT,EXTERNAL,HEALTHANDSAFETY,MERGECONFLICT,MODELVIEW,PARAMETER,REQUIREMENT,SPECIFICATION,TRIGGERCONDITION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcoccupanttypeenum.htm
	/// </summary>
	public enum IfcOccupantTypeEnum {ASSIGNEE,ASSIGNOR,LESSEE,LESSOR,LETTINGAGENT,OWNER,TENANT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcopeningelementtypeenum.htm
	/// </summary>
	public enum IfcOpeningElementTypeEnum {OPENING,RECESS,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcoutlettypeenum.htm
	/// </summary>
	public enum IfcOutletTypeEnum {AUDIOVISUALOUTLET,COMMUNICATIONSOUTLET,POWEROUTLET,DATAOUTLET,TELEPHONEOUTLET,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcperformancehistorytypeenum.htm
	/// </summary>
	public enum IfcPerformanceHistoryTypeEnum {USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpermeablecoveringoperationenum.htm
	/// </summary>
	public enum IfcPermeableCoveringOperationEnum {GRILL,LOUVER,SCREEN,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpermittypeenum.htm
	/// </summary>
	public enum IfcPermitTypeEnum {ACCESS,BUILDING,WORK,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcphysicalorvirtualenum.htm
	/// </summary>
	public enum IfcPhysicalOrVirtualEnum {PHYSICAL,VIRTUAL,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpileconstructionenum.htm
	/// </summary>
	public enum IfcPileConstructionEnum {CAST_IN_PLACE,COMPOSITE,PRECAST_CONCRETE,PREFAB_STEEL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpiletypeenum.htm
	/// </summary>
	public enum IfcPileTypeEnum {BORED,DRIVEN,JETGROUTING,COHESION,FRICTION,SUPPORT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpipefittingtypeenum.htm
	/// </summary>
	public enum IfcPipeFittingTypeEnum {BEND,CONNECTOR,ENTRY,EXIT,JUNCTION,OBSTRUCTION,TRANSITION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpipesegmenttypeenum.htm
	/// </summary>
	public enum IfcPipeSegmentTypeEnum {CULVERT,FLEXIBLESEGMENT,RIGIDSEGMENT,GUTTER,SPOOL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplatetypeenum.htm
	/// </summary>
	public enum IfcPlateTypeEnum {CURTAIN_PANEL,SHEET,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproceduretypeenum.htm
	/// </summary>
	public enum IfcProcedureTypeEnum {ADVICE_CAUTION,ADVICE_NOTE,ADVICE_WARNING,CALIBRATION,DIAGNOSTIC,SHUTDOWN,STARTUP,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprofiletypeenum.htm
	/// </summary>
	public enum IfcProfileTypeEnum {CURVE,AREA}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprojectordertypeenum.htm
	/// </summary>
	public enum IfcProjectOrderTypeEnum {CHANGEORDER,MAINTENANCEWORKORDER,MOVEORDER,PURCHASEORDER,WORKORDER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprojectedortruelengthenum.htm
	/// </summary>
	public enum IfcProjectedOrTrueLengthEnum {PROJECTED_LENGTH,TRUE_LENGTH}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprojectionelementtypeenum.htm
	/// </summary>
	public enum IfcProjectionElementTypeEnum {USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertysettemplatetypeenum.htm
	/// </summary>
	public enum IfcPropertySetTemplateTypeEnum {PSET_TYPEDRIVENONLY,PSET_TYPEDRIVENOVERRIDE,PSET_OCCURRENCEDRIVEN,PSET_PERFORMANCEDRIVEN,QTO_TYPEDRIVENONLY,QTO_TYPEDRIVENOVERRIDE,QTO_OCCURRENCEDRIVEN,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprotectivedevicetrippingunittypeenum.htm
	/// </summary>
	public enum IfcProtectiveDeviceTrippingUnitTypeEnum {ELECTRONIC,ELECTROMAGNETIC,RESIDUALCURRENT,THERMAL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprotectivedevicetypeenum.htm
	/// </summary>
	public enum IfcProtectiveDeviceTypeEnum {CIRCUITBREAKER,EARTHLEAKAGECIRCUITBREAKER,EARTHINGSWITCH,FUSEDISCONNECTOR,RESIDUALCURRENTCIRCUITBREAKER,RESIDUALCURRENTSWITCH,VARISTOR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpumptypeenum.htm
	/// </summary>
	public enum IfcPumpTypeEnum {CIRCULATOR,ENDSUCTION,SPLITCASE,SUBMERSIBLEPUMP,SUMPPUMP,VERTICALINLINE,VERTICALTURBINE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrailingtypeenum.htm
	/// </summary>
	public enum IfcRailingTypeEnum {HANDRAIL,GUARDRAIL,BALUSTRADE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrampflighttypeenum.htm
	/// </summary>
	public enum IfcRampFlightTypeEnum {STRAIGHT,SPIRAL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcramptypeenum.htm
	/// </summary>
	public enum IfcRampTypeEnum {STRAIGHT_RUN_RAMP,TWO_STRAIGHT_RUN_RAMP,QUARTER_TURN_RAMP,TWO_QUARTER_TURN_RAMP,HALF_TURN_RAMP,SPIRAL_RAMP,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrecurrencetypeenum.htm
	/// </summary>
	public enum IfcRecurrenceTypeEnum {DAILY,WEEKLY,MONTHLY_BY_DAY_OF_MONTH,MONTHLY_BY_POSITION,BY_DAY_COUNT,BY_WEEKDAY_COUNT,YEARLY_BY_DAY_OF_MONTH,YEARLY_BY_POSITION}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreflectancemethodenum.htm
	/// </summary>
	public enum IfcReflectanceMethodEnum {BLINN,FLAT,GLASS,MATT,METAL,MIRROR,PHONG,PLASTIC,STRAUSS,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingbarroleenum.htm
	/// </summary>
	public enum IfcReinforcingBarRoleEnum {MAIN,SHEAR,LIGATURE,STUD,PUNCHING,EDGE,RING,ANCHORING,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingbarsurfaceenum.htm
	/// </summary>
	public enum IfcReinforcingBarSurfaceEnum {PLAIN,TEXTURED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingbartypeenum.htm
	/// </summary>
	public enum IfcReinforcingBarTypeEnum {ANCHORING,EDGE,LIGATURE,MAIN,PUNCHING,RING,SHEAR,STUD,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingmeshtypeenum.htm
	/// </summary>
	public enum IfcReinforcingMeshTypeEnum {USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcroleenum.htm
	/// </summary>
	public enum IfcRoleEnum {SUPPLIER,MANUFACTURER,CONTRACTOR,SUBCONTRACTOR,ARCHITECT,STRUCTURALENGINEER,COSTENGINEER,CLIENT,BUILDINGOWNER,BUILDINGOPERATOR,MECHANICALENGINEER,ELECTRICALENGINEER,PROJECTMANAGER,FACILITIESMANAGER,CIVILENGINEER,COMMISSIONINGENGINEER,ENGINEER,OWNER,CONSULTANT,CONSTRUCTIONMANAGER,FIELDCONSTRUCTIONMANAGER,RESELLER,USERDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrooftypeenum.htm
	/// </summary>
	public enum IfcRoofTypeEnum {FLAT_ROOF,SHED_ROOF,GABLE_ROOF,HIP_ROOF,HIPPED_GABLE_ROOF,GAMBREL_ROOF,MANSARD_ROOF,BARREL_ROOF,RAINBOW_ROOF,BUTTERFLY_ROOF,PAVILION_ROOF,DOME_ROOF,FREEFORM,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsiprefix.htm
	/// </summary>
	public enum IfcSIPrefix {EXA,PETA,TERA,GIGA,MEGA,KILO,HECTO,DECA,DECI,CENTI,MILLI,MICRO,NANO,PICO,FEMTO,ATTO}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsiunitname.htm
	/// </summary>
	public enum IfcSIUnitName {AMPERE,BECQUEREL,CANDELA,COULOMB,CUBIC_METRE,DEGREE_CELSIUS,FARAD,GRAM,GRAY,HENRY,HERTZ,JOULE,KELVIN,LUMEN,LUX,METRE,MOLE,NEWTON,OHM,PASCAL,RADIAN,SECOND,SIEMENS,SIEVERT,SQUARE_METRE,STERADIAN,TESLA,VOLT,WATT,WEBER}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsanitaryterminaltypeenum.htm
	/// </summary>
	public enum IfcSanitaryTerminalTypeEnum {BATH,BIDET,CISTERN,SHOWER,SINK,SANITARYFOUNTAIN,TOILETPAN,URINAL,WASHHANDBASIN,WCSEAT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsectiontypeenum.htm
	/// </summary>
	public enum IfcSectionTypeEnum {UNIFORM,TAPERED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsensortypeenum.htm
	/// </summary>
	public enum IfcSensorTypeEnum {CONDUCTANCESENSOR,CONTACTSENSOR,FIRESENSOR,FLOWSENSOR,GASSENSOR,HEATSENSOR,HUMIDITYSENSOR,IONCONCENTRATIONSENSOR,LEVELSENSOR,LIGHTSENSOR,MOISTURESENSOR,MOVEMENTSENSOR,PHSENSOR,PRESSURESENSOR,RADIATIONSENSOR,RADIOACTIVITYSENSOR,SMOKESENSOR,SOUNDSENSOR,TEMPERATURESENSOR,WINDSENSOR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsequenceenum.htm
	/// </summary>
	public enum IfcSequenceEnum {START_START,START_FINISH,FINISH_START,FINISH_FINISH,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshadingdevicetypeenum.htm
	/// </summary>
	public enum IfcShadingDeviceTypeEnum {JALOUSIE,SHUTTER,AWNING,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsimplepropertytemplatetypeenum.htm
	/// </summary>
	public enum IfcSimplePropertyTemplateTypeEnum {P_SINGLEVALUE,P_ENUMERATEDVALUE,P_BOUNDEDVALUE,P_LISTVALUE,P_TABLEVALUE,P_REFERENCEVALUE,Q_LENGTH,Q_AREA,Q_VOLUME,Q_COUNT,Q_WEIGHT,Q_TIME}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcslabtypeenum.htm
	/// </summary>
	public enum IfcSlabTypeEnum {FLOOR,ROOF,LANDING,BASESLAB,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsolardevicetypeenum.htm
	/// </summary>
	public enum IfcSolarDeviceTypeEnum {SOLARCOLLECTOR,SOLARPANEL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspaceheatertypeenum.htm
	/// </summary>
	public enum IfcSpaceHeaterTypeEnum {CONVECTOR,RADIATOR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspacetypeenum.htm
	/// </summary>
	public enum IfcSpaceTypeEnum {SPACE,PARKING,GFA,INTERNAL,EXTERNAL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspatialzonetypeenum.htm
	/// </summary>
	public enum IfcSpatialZoneTypeEnum {CONSTRUCTION,FIRESAFETY,LIGHTING,OCCUPANCY,SECURITY,THERMAL,TRANSPORT,VENTILATION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstackterminaltypeenum.htm
	/// </summary>
	public enum IfcStackTerminalTypeEnum {BIRDCAGE,COWL,RAINWATERHOPPER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstairflighttypeenum.htm
	/// </summary>
	public enum IfcStairFlightTypeEnum {STRAIGHT,WINDER,SPIRAL,CURVED,FREEFORM,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstairtypeenum.htm
	/// </summary>
	public enum IfcStairTypeEnum {STRAIGHT_RUN_STAIR,TWO_STRAIGHT_RUN_STAIR,QUARTER_WINDING_STAIR,QUARTER_TURN_STAIR,HALF_WINDING_STAIR,HALF_TURN_STAIR,TWO_QUARTER_WINDING_STAIR,TWO_QUARTER_TURN_STAIR,THREE_QUARTER_WINDING_STAIR,THREE_QUARTER_TURN_STAIR,SPIRAL_STAIR,DOUBLE_RETURN_STAIR,CURVED_RUN_STAIR,TWO_CURVED_RUN_STAIR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstateenum.htm
	/// </summary>
	public enum IfcStateEnum {READWRITE,READONLY,LOCKED,READWRITELOCKED,READONLYLOCKED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralcurveactivitytypeenum.htm
	/// </summary>
	public enum IfcStructuralCurveActivityTypeEnum {CONST,LINEAR,POLYGONAL,EQUIDISTANT,SINUS,PARABOLA,DISCRETE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralcurvemembertypeenum.htm
	/// </summary>
	public enum IfcStructuralCurveMemberTypeEnum {RIGID_JOINED_MEMBER,PIN_JOINED_MEMBER,CABLE,TENSION_MEMBER,COMPRESSION_MEMBER,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralsurfaceactivitytypeenum.htm
	/// </summary>
	public enum IfcStructuralSurfaceActivityTypeEnum {CONST,BILINEAR,DISCRETE,ISOCONTOUR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralsurfacemembertypeenum.htm
	/// </summary>
	public enum IfcStructuralSurfaceMemberTypeEnum {BENDING_ELEMENT,MEMBRANE_ELEMENT,SHELL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsubcontractresourcetypeenum.htm
	/// </summary>
	public enum IfcSubContractResourceTypeEnum {PURCHASE,WORK,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacefeaturetypeenum.htm
	/// </summary>
	public enum IfcSurfaceFeatureTypeEnum {MARK,TAG,TREATMENT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfaceside.htm
	/// </summary>
	public enum IfcSurfaceSide {POSITIVE,NEGATIVE,BOTH}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcswitchingdevicetypeenum.htm
	/// </summary>
	public enum IfcSwitchingDeviceTypeEnum {CONTACTOR,DIMMERSWITCH,EMERGENCYSTOP,KEYPAD,MOMENTARYSWITCH,SELECTORSWITCH,STARTER,SWITCHDISCONNECTOR,TOGGLESWITCH,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsystemfurnitureelementtypeenum.htm
	/// </summary>
	public enum IfcSystemFurnitureElementTypeEnum {PANEL,WORKSURFACE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctanktypeenum.htm
	/// </summary>
	public enum IfcTankTypeEnum {BASIN,BREAKPRESSURE,EXPANSION,FEEDANDEXPANSION,PRESSUREVESSEL,STORAGE,VESSEL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctaskdurationenum.htm
	/// </summary>
	public enum IfcTaskDurationEnum {ELAPSEDTIME,WORKTIME,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctasktypeenum.htm
	/// </summary>
	public enum IfcTaskTypeEnum {ATTENDANCE,CONSTRUCTION,DEMOLITION,DISMANTLE,DISPOSAL,INSTALLATION,LOGISTIC,MAINTENANCE,MOVE,OPERATION,REMOVAL,RENOVATION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctendonanchortypeenum.htm
	/// </summary>
	public enum IfcTendonAnchorTypeEnum {COUPLER,FIXED_END,TENSIONING_END,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctendontypeenum.htm
	/// </summary>
	public enum IfcTendonTypeEnum {BAR,COATED,STRAND,WIRE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextpath.htm
	/// </summary>
	public enum IfcTextPath {LEFT,RIGHT,UP,DOWN}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctimeseriesdatatypeenum.htm
	/// </summary>
	public enum IfcTimeSeriesDataTypeEnum {CONTINUOUS,DISCRETE,DISCRETEBINARY,PIECEWISEBINARY,PIECEWISECONSTANT,PIECEWISECONTINUOUS,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctransformertypeenum.htm
	/// </summary>
	public enum IfcTransformerTypeEnum {CURRENT,FREQUENCY,INVERTER,RECTIFIER,VOLTAGE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctransitioncode.htm
	/// </summary>
	public enum IfcTransitionCode {DISCONTINUOUS,CONTINUOUS,CONTSAMEGRADIENT,CONTSAMEGRADIENTSAMECURVATURE}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctransportelementtypeenum.htm
	/// </summary>
	public enum IfcTransportElementTypeEnum {ELEVATOR,ESCALATOR,MOVINGWALKWAY,CRANEWAY,LIFTINGGEAR,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctrimmingpreference.htm
	/// </summary>
	public enum IfcTrimmingPreference {CARTESIAN,PARAMETER,UNSPECIFIED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctubebundletypeenum.htm
	/// </summary>
	public enum IfcTubeBundleTypeEnum {FINNED,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunitenum.htm
	/// </summary>
	public enum IfcUnitEnum {ABSORBEDDOSEUNIT,AMOUNTOFSUBSTANCEUNIT,AREAUNIT,DOSEEQUIVALENTUNIT,ELECTRICCAPACITANCEUNIT,ELECTRICCHARGEUNIT,ELECTRICCONDUCTANCEUNIT,ELECTRICCURRENTUNIT,ELECTRICRESISTANCEUNIT,ELECTRICVOLTAGEUNIT,ENERGYUNIT,FORCEUNIT,FREQUENCYUNIT,ILLUMINANCEUNIT,INDUCTANCEUNIT,LENGTHUNIT,LUMINOUSFLUXUNIT,LUMINOUSINTENSITYUNIT,MAGNETICFLUXDENSITYUNIT,MAGNETICFLUXUNIT,MASSUNIT,PLANEANGLEUNIT,POWERUNIT,PRESSUREUNIT,RADIOACTIVITYUNIT,SOLIDANGLEUNIT,THERMODYNAMICTEMPERATUREUNIT,TIMEUNIT,VOLUMEUNIT,USERDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunitarycontrolelementtypeenum.htm
	/// </summary>
	public enum IfcUnitaryControlElementTypeEnum {ALARMPANEL,CONTROLPANEL,GASDETECTIONPANEL,INDICATORPANEL,MIMICPANEL,HUMIDISTAT,THERMOSTAT,WEATHERSTATION,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunitaryequipmenttypeenum.htm
	/// </summary>
	public enum IfcUnitaryEquipmentTypeEnum {AIRHANDLER,AIRCONDITIONINGUNIT,DEHUMIDIFIER,SPLITSYSTEM,ROOFTOPUNIT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvalvetypeenum.htm
	/// </summary>
	public enum IfcValveTypeEnum {AIRRELEASE,ANTIVACUUM,CHANGEOVER,CHECK,COMMISSIONING,DIVERTING,DRAWOFFCOCK,DOUBLECHECK,DOUBLEREGULATING,FAUCET,FLUSHING,GASCOCK,GASTAP,ISOLATING,MIXING,PRESSUREREDUCING,PRESSURERELIEF,REGULATING,SAFETYCUTOFF,STEAMTRAP,STOPCOCK,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvibrationisolatortypeenum.htm
	/// </summary>
	public enum IfcVibrationIsolatorTypeEnum {COMPRESSION,SPRING,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvoidingfeaturetypeenum.htm
	/// </summary>
	public enum IfcVoidingFeatureTypeEnum {CUTOUT,NOTCH,HOLE,MITER,CHAMFER,EDGE,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwalltypeenum.htm
	/// </summary>
	public enum IfcWallTypeEnum {MOVABLE,PARAPET,PARTITIONING,PLUMBINGWALL,SHEAR,SOLIDWALL,STANDARD,POLYGONAL,ELEMENTEDWALL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwasteterminaltypeenum.htm
	/// </summary>
	public enum IfcWasteTerminalTypeEnum {FLOORTRAP,FLOORWASTE,GULLYSUMP,GULLYTRAP,ROOFDRAIN,WASTEDISPOSALUNIT,WASTETRAP,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowpaneloperationenum.htm
	/// </summary>
	public enum IfcWindowPanelOperationEnum {SIDEHUNGRIGHTHAND,SIDEHUNGLEFTHAND,TILTANDTURNRIGHTHAND,TILTANDTURNLEFTHAND,TOPHUNG,BOTTOMHUNG,PIVOTHORIZONTAL,PIVOTVERTICAL,SLIDINGHORIZONTAL,SLIDINGVERTICAL,REMOVABLECASEMENT,FIXEDCASEMENT,OTHEROPERATION,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowpanelpositionenum.htm
	/// </summary>
	public enum IfcWindowPanelPositionEnum {LEFT,MIDDLE,RIGHT,BOTTOM,TOP,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowstyleconstructionenum.htm
	/// </summary>
	public enum IfcWindowStyleConstructionEnum {ALUMINIUM,HIGH_GRADE_STEEL,STEEL,WOOD,ALUMINIUM_WOOD,PLASTIC,OTHER_CONSTRUCTION,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowstyleoperationenum.htm
	/// </summary>
	public enum IfcWindowStyleOperationEnum {SINGLE_PANEL,DOUBLE_PANEL_VERTICAL,DOUBLE_PANEL_HORIZONTAL,TRIPLE_PANEL_VERTICAL,TRIPLE_PANEL_BOTTOM,TRIPLE_PANEL_TOP,TRIPLE_PANEL_LEFT,TRIPLE_PANEL_RIGHT,TRIPLE_PANEL_HORIZONTAL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowtypeenum.htm
	/// </summary>
	public enum IfcWindowTypeEnum {WINDOW,SKYLIGHT,LIGHTDOME,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowtypepartitioningenum.htm
	/// </summary>
	public enum IfcWindowTypePartitioningEnum {SINGLE_PANEL,DOUBLE_PANEL_VERTICAL,DOUBLE_PANEL_HORIZONTAL,TRIPLE_PANEL_VERTICAL,TRIPLE_PANEL_BOTTOM,TRIPLE_PANEL_TOP,TRIPLE_PANEL_LEFT,TRIPLE_PANEL_RIGHT,TRIPLE_PANEL_HORIZONTAL,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcworkcalendartypeenum.htm
	/// </summary>
	public enum IfcWorkCalendarTypeEnum {FIRSTSHIFT,SECONDSHIFT,THIRDSHIFT,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcworkplantypeenum.htm
	/// </summary>
	public enum IfcWorkPlanTypeEnum {ACTUAL,BASELINE,PLANNED,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcworkscheduletypeenum.htm
	/// </summary>
	public enum IfcWorkScheduleTypeEnum {ACTUAL,BASELINE,PLANNED,USERDEFINED,NOTDEFINED}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactorselect.htm
	/// </summary>
	public class IfcActorSelect : IfcSelect<IfcOrganization,IfcPerson,IfcPersonAndOrganization>
	{
		public IfcActorSelect(IfcOrganization value):base(value){}
		public IfcActorSelect(IfcPerson value):base(value){}
		public IfcActorSelect(IfcPersonAndOrganization value):base(value){}

		public static IfcActorSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcActorSelect>(json);
		}

		public static IfcActorSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcappliedvalueselect.htm
	/// </summary>
	public class IfcAppliedValueSelect : IfcSelect<IfcMeasureWithUnit,IfcReference,IfcValue>
	{
		public IfcAppliedValueSelect(IfcMeasureWithUnit value):base(value){}
		public IfcAppliedValueSelect(IfcReference value):base(value){}
		public IfcAppliedValueSelect(IfcValue value):base(value){}

		public static IfcAppliedValueSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAppliedValueSelect>(json);
		}

		public static IfcAppliedValueSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaxis2placement.htm
	/// </summary>
	public class IfcAxis2Placement : IfcSelect<IfcAxis2Placement2D,IfcAxis2Placement3D>
	{
		public IfcAxis2Placement(IfcAxis2Placement2D value):base(value){}
		public IfcAxis2Placement(IfcAxis2Placement3D value):base(value){}

		public static IfcAxis2Placement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAxis2Placement>(json);
		}

		public static IfcAxis2Placement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbendingparameterselect.htm
	/// </summary>
	public class IfcBendingParameterSelect : IfcSelect<IfcLengthMeasure,IfcPlaneAngleMeasure>
	{
		public IfcBendingParameterSelect(IfcLengthMeasure value):base(value){}
		public IfcBendingParameterSelect(IfcPlaneAngleMeasure value):base(value){}

		public static IfcBendingParameterSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBendingParameterSelect>(json);
		}

		public static IfcBendingParameterSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbooleanoperand.htm
	/// </summary>
	public class IfcBooleanOperand : IfcSelect<IfcBooleanResult,IfcCsgPrimitive3D,IfcHalfSpaceSolid,IfcSolidModel>
	{
		public IfcBooleanOperand(IfcBooleanResult value):base(value){}
		public IfcBooleanOperand(IfcCsgPrimitive3D value):base(value){}
		public IfcBooleanOperand(IfcHalfSpaceSolid value):base(value){}
		public IfcBooleanOperand(IfcSolidModel value):base(value){}

		public static IfcBooleanOperand FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBooleanOperand>(json);
		}

		public static IfcBooleanOperand FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcclassificationreferenceselect.htm
	/// </summary>
	public class IfcClassificationReferenceSelect : IfcSelect<IfcClassification,IfcClassificationReference>
	{
		public IfcClassificationReferenceSelect(IfcClassification value):base(value){}
		public IfcClassificationReferenceSelect(IfcClassificationReference value):base(value){}

		public static IfcClassificationReferenceSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcClassificationReferenceSelect>(json);
		}

		public static IfcClassificationReferenceSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcclassificationselect.htm
	/// </summary>
	public class IfcClassificationSelect : IfcSelect<IfcClassification,IfcClassificationReference>
	{
		public IfcClassificationSelect(IfcClassification value):base(value){}
		public IfcClassificationSelect(IfcClassificationReference value):base(value){}

		public static IfcClassificationSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcClassificationSelect>(json);
		}

		public static IfcClassificationSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolour.htm
	/// </summary>
	public class IfcColour : IfcSelect<IfcColourSpecification,IfcPreDefinedColour>
	{
		public IfcColour(IfcColourSpecification value):base(value){}
		public IfcColour(IfcPreDefinedColour value):base(value){}

		public static IfcColour FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcColour>(json);
		}

		public static IfcColour FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolourorfactor.htm
	/// </summary>
	public class IfcColourOrFactor : IfcSelect<IfcColourRgb,IfcNormalisedRatioMeasure>
	{
		public IfcColourOrFactor(IfcColourRgb value):base(value){}
		public IfcColourOrFactor(IfcNormalisedRatioMeasure value):base(value){}

		public static IfcColourOrFactor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcColourOrFactor>(json);
		}

		public static IfcColourOrFactor FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoordinatereferencesystemselect.htm
	/// </summary>
	public class IfcCoordinateReferenceSystemSelect : IfcSelect<IfcCoordinateReferenceSystem,IfcGeometricRepresentationContext>
	{
		public IfcCoordinateReferenceSystemSelect(IfcCoordinateReferenceSystem value):base(value){}
		public IfcCoordinateReferenceSystemSelect(IfcGeometricRepresentationContext value):base(value){}

		public static IfcCoordinateReferenceSystemSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCoordinateReferenceSystemSelect>(json);
		}

		public static IfcCoordinateReferenceSystemSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccsgselect.htm
	/// </summary>
	public class IfcCsgSelect : IfcSelect<IfcBooleanResult,IfcCsgPrimitive3D>
	{
		public IfcCsgSelect(IfcBooleanResult value):base(value){}
		public IfcCsgSelect(IfcCsgPrimitive3D value):base(value){}

		public static IfcCsgSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCsgSelect>(json);
		}

		public static IfcCsgSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurvefontorscaledcurvefontselect.htm
	/// </summary>
	public class IfcCurveFontOrScaledCurveFontSelect : IfcSelect<IfcCurveStyleFontAndScaling,IfcCurveStyleFontSelect>
	{
		public IfcCurveFontOrScaledCurveFontSelect(IfcCurveStyleFontAndScaling value):base(value){}
		public IfcCurveFontOrScaledCurveFontSelect(IfcCurveStyleFontSelect value):base(value){}

		public static IfcCurveFontOrScaledCurveFontSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveFontOrScaledCurveFontSelect>(json);
		}

		public static IfcCurveFontOrScaledCurveFontSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurveonsurface.htm
	/// </summary>
	public class IfcCurveOnSurface : IfcSelect<IfcCompositeCurveOnSurface,IfcPcurve>
	{
		public IfcCurveOnSurface(IfcCompositeCurveOnSurface value):base(value){}
		public IfcCurveOnSurface(IfcPcurve value):base(value){}

		public static IfcCurveOnSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveOnSurface>(json);
		}

		public static IfcCurveOnSurface FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurveoredgecurve.htm
	/// </summary>
	public class IfcCurveOrEdgeCurve : IfcSelect<IfcBoundedCurve,IfcEdgeCurve>
	{
		public IfcCurveOrEdgeCurve(IfcBoundedCurve value):base(value){}
		public IfcCurveOrEdgeCurve(IfcEdgeCurve value):base(value){}

		public static IfcCurveOrEdgeCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveOrEdgeCurve>(json);
		}

		public static IfcCurveOrEdgeCurve FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurvestylefontselect.htm
	/// </summary>
	public class IfcCurveStyleFontSelect : IfcSelect<IfcCurveStyleFont,IfcPreDefinedCurveFont>
	{
		public IfcCurveStyleFontSelect(IfcCurveStyleFont value):base(value){}
		public IfcCurveStyleFontSelect(IfcPreDefinedCurveFont value):base(value){}

		public static IfcCurveStyleFontSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveStyleFontSelect>(json);
		}

		public static IfcCurveStyleFontSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdefinitionselect.htm
	/// </summary>
	public class IfcDefinitionSelect : IfcSelect<IfcObjectDefinition,IfcPropertyDefinition>
	{
		public IfcDefinitionSelect(IfcObjectDefinition value):base(value){}
		public IfcDefinitionSelect(IfcPropertyDefinition value):base(value){}

		public static IfcDefinitionSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDefinitionSelect>(json);
		}

		public static IfcDefinitionSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcderivedmeasurevalue.htm
	/// </summary>
	public class IfcDerivedMeasureValue : IfcSelect<IfcAbsorbedDoseMeasure,IfcAccelerationMeasure,IfcAngularVelocityMeasure,IfcAreaDensityMeasure,IfcCompoundPlaneAngleMeasure,IfcCurvatureMeasure,IfcDoseEquivalentMeasure,IfcDynamicViscosityMeasure,IfcElectricCapacitanceMeasure,IfcElectricChargeMeasure,IfcElectricConductanceMeasure,IfcElectricResistanceMeasure,IfcElectricVoltageMeasure,IfcEnergyMeasure,IfcForceMeasure,IfcFrequencyMeasure,IfcHeatFluxDensityMeasure,IfcHeatingValueMeasure,IfcIlluminanceMeasure,IfcInductanceMeasure,IfcIntegerCountRateMeasure,IfcIonConcentrationMeasure,IfcIsothermalMoistureCapacityMeasure,IfcKinematicViscosityMeasure,IfcLinearForceMeasure,IfcLinearMomentMeasure,IfcLinearStiffnessMeasure,IfcLinearVelocityMeasure,IfcLuminousFluxMeasure,IfcLuminousIntensityDistributionMeasure,IfcMagneticFluxDensityMeasure,IfcMagneticFluxMeasure,IfcMassDensityMeasure,IfcMassFlowRateMeasure,IfcMassPerLengthMeasure,IfcModulusOfElasticityMeasure,IfcModulusOfLinearSubgradeReactionMeasure,IfcModulusOfRotationalSubgradeReactionMeasure,IfcModulusOfSubgradeReactionMeasure,IfcMoistureDiffusivityMeasure,IfcMolecularWeightMeasure,IfcMomentOfInertiaMeasure,IfcMonetaryMeasure,IfcPHMeasure,IfcPlanarForceMeasure,IfcPowerMeasure,IfcPressureMeasure,IfcRadioActivityMeasure,IfcRotationalFrequencyMeasure,IfcRotationalMassMeasure,IfcRotationalStiffnessMeasure,IfcSectionModulusMeasure,IfcSectionalAreaIntegralMeasure,IfcShearModulusMeasure,IfcSoundPowerLevelMeasure,IfcSoundPowerMeasure,IfcSoundPressureLevelMeasure,IfcSoundPressureMeasure,IfcSpecificHeatCapacityMeasure,IfcTemperatureGradientMeasure,IfcTemperatureRateOfChangeMeasure,IfcThermalAdmittanceMeasure,IfcThermalConductivityMeasure,IfcThermalExpansionCoefficientMeasure,IfcThermalResistanceMeasure,IfcThermalTransmittanceMeasure,IfcTorqueMeasure,IfcVaporPermeabilityMeasure,IfcVolumetricFlowRateMeasure,IfcWarpingConstantMeasure,IfcWarpingMomentMeasure>
	{
		public IfcDerivedMeasureValue(IfcAbsorbedDoseMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcAccelerationMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcAngularVelocityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcAreaDensityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcCompoundPlaneAngleMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcCurvatureMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcDoseEquivalentMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcDynamicViscosityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcElectricCapacitanceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcElectricChargeMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcElectricConductanceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcElectricResistanceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcElectricVoltageMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcEnergyMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcForceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcFrequencyMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcHeatFluxDensityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcHeatingValueMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcIlluminanceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcInductanceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcIntegerCountRateMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcIonConcentrationMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcIsothermalMoistureCapacityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcKinematicViscosityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcLinearForceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcLinearMomentMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcLinearStiffnessMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcLinearVelocityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcLuminousFluxMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcLuminousIntensityDistributionMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMagneticFluxDensityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMagneticFluxMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMassDensityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMassFlowRateMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMassPerLengthMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcModulusOfElasticityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcModulusOfLinearSubgradeReactionMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcModulusOfRotationalSubgradeReactionMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcModulusOfSubgradeReactionMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMoistureDiffusivityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMolecularWeightMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMomentOfInertiaMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcMonetaryMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcPHMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcPlanarForceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcPowerMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcPressureMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcRadioActivityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcRotationalFrequencyMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcRotationalMassMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcRotationalStiffnessMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcSectionModulusMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcSectionalAreaIntegralMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcShearModulusMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcSoundPowerLevelMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcSoundPowerMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcSoundPressureLevelMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcSoundPressureMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcSpecificHeatCapacityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcTemperatureGradientMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcTemperatureRateOfChangeMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcThermalAdmittanceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcThermalConductivityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcThermalExpansionCoefficientMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcThermalResistanceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcThermalTransmittanceMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcTorqueMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcVaporPermeabilityMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcVolumetricFlowRateMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcWarpingConstantMeasure value):base(value){}
		public IfcDerivedMeasureValue(IfcWarpingMomentMeasure value):base(value){}

		public static IfcDerivedMeasureValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDerivedMeasureValue>(json);
		}

		public static IfcDerivedMeasureValue FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdocumentselect.htm
	/// </summary>
	public class IfcDocumentSelect : IfcSelect<IfcDocumentInformation,IfcDocumentReference>
	{
		public IfcDocumentSelect(IfcDocumentInformation value):base(value){}
		public IfcDocumentSelect(IfcDocumentReference value):base(value){}

		public static IfcDocumentSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDocumentSelect>(json);
		}

		public static IfcDocumentSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfillstyleselect.htm
	/// </summary>
	public class IfcFillStyleSelect : IfcSelect<IfcColour,IfcExternallyDefinedHatchStyle,IfcFillAreaStyleHatching,IfcFillAreaStyleTiles>
	{
		public IfcFillStyleSelect(IfcColour value):base(value){}
		public IfcFillStyleSelect(IfcExternallyDefinedHatchStyle value):base(value){}
		public IfcFillStyleSelect(IfcFillAreaStyleHatching value):base(value){}
		public IfcFillStyleSelect(IfcFillAreaStyleTiles value):base(value){}

		public static IfcFillStyleSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFillStyleSelect>(json);
		}

		public static IfcFillStyleSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeometricsetselect.htm
	/// </summary>
	public class IfcGeometricSetSelect : IfcSelect<IfcCurve,IfcPoint,IfcSurface>
	{
		public IfcGeometricSetSelect(IfcCurve value):base(value){}
		public IfcGeometricSetSelect(IfcPoint value):base(value){}
		public IfcGeometricSetSelect(IfcSurface value):base(value){}

		public static IfcGeometricSetSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGeometricSetSelect>(json);
		}

		public static IfcGeometricSetSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgridplacementdirectionselect.htm
	/// </summary>
	public class IfcGridPlacementDirectionSelect : IfcSelect<IfcDirection,IfcVirtualGridIntersection>
	{
		public IfcGridPlacementDirectionSelect(IfcDirection value):base(value){}
		public IfcGridPlacementDirectionSelect(IfcVirtualGridIntersection value):base(value){}

		public static IfcGridPlacementDirectionSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGridPlacementDirectionSelect>(json);
		}

		public static IfcGridPlacementDirectionSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifchatchlinedistanceselect.htm
	/// </summary>
	public class IfcHatchLineDistanceSelect : IfcSelect<IfcPositiveLengthMeasure,IfcVector>
	{
		public IfcHatchLineDistanceSelect(IfcPositiveLengthMeasure value):base(value){}
		public IfcHatchLineDistanceSelect(IfcVector value):base(value){}

		public static IfcHatchLineDistanceSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcHatchLineDistanceSelect>(json);
		}

		public static IfcHatchLineDistanceSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclayereditem.htm
	/// </summary>
	public class IfcLayeredItem : IfcSelect<IfcRepresentation,IfcRepresentationItem>
	{
		public IfcLayeredItem(IfcRepresentation value):base(value){}
		public IfcLayeredItem(IfcRepresentationItem value):base(value){}

		public static IfcLayeredItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLayeredItem>(json);
		}

		public static IfcLayeredItem FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclibraryselect.htm
	/// </summary>
	public class IfcLibrarySelect : IfcSelect<IfcLibraryInformation,IfcLibraryReference>
	{
		public IfcLibrarySelect(IfcLibraryInformation value):base(value){}
		public IfcLibrarySelect(IfcLibraryReference value):base(value){}

		public static IfcLibrarySelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLibrarySelect>(json);
		}

		public static IfcLibrarySelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightdistributiondatasourceselect.htm
	/// </summary>
	public class IfcLightDistributionDataSourceSelect : IfcSelect<IfcExternalReference,IfcLightIntensityDistribution>
	{
		public IfcLightDistributionDataSourceSelect(IfcExternalReference value):base(value){}
		public IfcLightDistributionDataSourceSelect(IfcLightIntensityDistribution value):base(value){}

		public static IfcLightDistributionDataSourceSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightDistributionDataSourceSelect>(json);
		}

		public static IfcLightDistributionDataSourceSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialselect.htm
	/// </summary>
	public class IfcMaterialSelect : IfcSelect<IfcMaterialDefinition,IfcMaterialList,IfcMaterialUsageDefinition>
	{
		public IfcMaterialSelect(IfcMaterialDefinition value):base(value){}
		public IfcMaterialSelect(IfcMaterialList value):base(value){}
		public IfcMaterialSelect(IfcMaterialUsageDefinition value):base(value){}

		public static IfcMaterialSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialSelect>(json);
		}

		public static IfcMaterialSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmeasurevalue.htm
	/// </summary>
	public class IfcMeasureValue : IfcSelect<IfcAmountOfSubstanceMeasure,IfcAreaMeasure,IfcComplexNumber,IfcContextDependentMeasure,IfcCountMeasure,IfcDescriptiveMeasure,IfcElectricCurrentMeasure,IfcLengthMeasure,IfcLuminousIntensityMeasure,IfcMassMeasure,IfcNonNegativeLengthMeasure,IfcNormalisedRatioMeasure,IfcNumericMeasure,IfcParameterValue,IfcPlaneAngleMeasure,IfcPositiveLengthMeasure,IfcPositivePlaneAngleMeasure,IfcPositiveRatioMeasure,IfcRatioMeasure,IfcSolidAngleMeasure,IfcThermodynamicTemperatureMeasure,IfcTimeMeasure,IfcVolumeMeasure>
	{
		public IfcMeasureValue(IfcAmountOfSubstanceMeasure value):base(value){}
		public IfcMeasureValue(IfcAreaMeasure value):base(value){}
		public IfcMeasureValue(IfcComplexNumber value):base(value){}
		public IfcMeasureValue(IfcContextDependentMeasure value):base(value){}
		public IfcMeasureValue(IfcCountMeasure value):base(value){}
		public IfcMeasureValue(IfcDescriptiveMeasure value):base(value){}
		public IfcMeasureValue(IfcElectricCurrentMeasure value):base(value){}
		public IfcMeasureValue(IfcLengthMeasure value):base(value){}
		public IfcMeasureValue(IfcLuminousIntensityMeasure value):base(value){}
		public IfcMeasureValue(IfcMassMeasure value):base(value){}
		public IfcMeasureValue(IfcNonNegativeLengthMeasure value):base(value){}
		public IfcMeasureValue(IfcNormalisedRatioMeasure value):base(value){}
		public IfcMeasureValue(IfcNumericMeasure value):base(value){}
		public IfcMeasureValue(IfcParameterValue value):base(value){}
		public IfcMeasureValue(IfcPlaneAngleMeasure value):base(value){}
		public IfcMeasureValue(IfcPositiveLengthMeasure value):base(value){}
		public IfcMeasureValue(IfcPositivePlaneAngleMeasure value):base(value){}
		public IfcMeasureValue(IfcPositiveRatioMeasure value):base(value){}
		public IfcMeasureValue(IfcRatioMeasure value):base(value){}
		public IfcMeasureValue(IfcSolidAngleMeasure value):base(value){}
		public IfcMeasureValue(IfcThermodynamicTemperatureMeasure value):base(value){}
		public IfcMeasureValue(IfcTimeMeasure value):base(value){}
		public IfcMeasureValue(IfcVolumeMeasure value):base(value){}

		public static IfcMeasureValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMeasureValue>(json);
		}

		public static IfcMeasureValue FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmetricvalueselect.htm
	/// </summary>
	public class IfcMetricValueSelect : IfcSelect<IfcAppliedValue,IfcMeasureWithUnit,IfcReference,IfcTable,IfcTimeSeries,IfcValue>
	{
		public IfcMetricValueSelect(IfcAppliedValue value):base(value){}
		public IfcMetricValueSelect(IfcMeasureWithUnit value):base(value){}
		public IfcMetricValueSelect(IfcReference value):base(value){}
		public IfcMetricValueSelect(IfcTable value):base(value){}
		public IfcMetricValueSelect(IfcTimeSeries value):base(value){}
		public IfcMetricValueSelect(IfcValue value):base(value){}

		public static IfcMetricValueSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMetricValueSelect>(json);
		}

		public static IfcMetricValueSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmodulusofrotationalsubgradereactionselect.htm
	/// </summary>
	public class IfcModulusOfRotationalSubgradeReactionSelect : IfcSelect<IfcBoolean,IfcModulusOfRotationalSubgradeReactionMeasure>
	{
		public IfcModulusOfRotationalSubgradeReactionSelect(IfcBoolean value):base(value){}
		public IfcModulusOfRotationalSubgradeReactionSelect(IfcModulusOfRotationalSubgradeReactionMeasure value):base(value){}

		public static IfcModulusOfRotationalSubgradeReactionSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcModulusOfRotationalSubgradeReactionSelect>(json);
		}

		public static IfcModulusOfRotationalSubgradeReactionSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmodulusofsubgradereactionselect.htm
	/// </summary>
	public class IfcModulusOfSubgradeReactionSelect : IfcSelect<IfcBoolean,IfcModulusOfSubgradeReactionMeasure>
	{
		public IfcModulusOfSubgradeReactionSelect(IfcBoolean value):base(value){}
		public IfcModulusOfSubgradeReactionSelect(IfcModulusOfSubgradeReactionMeasure value):base(value){}

		public static IfcModulusOfSubgradeReactionSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcModulusOfSubgradeReactionSelect>(json);
		}

		public static IfcModulusOfSubgradeReactionSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmodulusoftranslationalsubgradereactionselect.htm
	/// </summary>
	public class IfcModulusOfTranslationalSubgradeReactionSelect : IfcSelect<IfcBoolean,IfcModulusOfLinearSubgradeReactionMeasure>
	{
		public IfcModulusOfTranslationalSubgradeReactionSelect(IfcBoolean value):base(value){}
		public IfcModulusOfTranslationalSubgradeReactionSelect(IfcModulusOfLinearSubgradeReactionMeasure value):base(value){}

		public static IfcModulusOfTranslationalSubgradeReactionSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcModulusOfTranslationalSubgradeReactionSelect>(json);
		}

		public static IfcModulusOfTranslationalSubgradeReactionSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcobjectreferenceselect.htm
	/// </summary>
	public class IfcObjectReferenceSelect : IfcSelect<IfcAddress,IfcAppliedValue,IfcExternalReference,IfcMaterialDefinition,IfcOrganization,IfcPerson,IfcPersonAndOrganization,IfcTable,IfcTimeSeries>
	{
		public IfcObjectReferenceSelect(IfcAddress value):base(value){}
		public IfcObjectReferenceSelect(IfcAppliedValue value):base(value){}
		public IfcObjectReferenceSelect(IfcExternalReference value):base(value){}
		public IfcObjectReferenceSelect(IfcMaterialDefinition value):base(value){}
		public IfcObjectReferenceSelect(IfcOrganization value):base(value){}
		public IfcObjectReferenceSelect(IfcPerson value):base(value){}
		public IfcObjectReferenceSelect(IfcPersonAndOrganization value):base(value){}
		public IfcObjectReferenceSelect(IfcTable value):base(value){}
		public IfcObjectReferenceSelect(IfcTimeSeries value):base(value){}

		public static IfcObjectReferenceSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcObjectReferenceSelect>(json);
		}

		public static IfcObjectReferenceSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpointorvertexpoint.htm
	/// </summary>
	public class IfcPointOrVertexPoint : IfcSelect<IfcPoint,IfcVertexPoint>
	{
		public IfcPointOrVertexPoint(IfcPoint value):base(value){}
		public IfcPointOrVertexPoint(IfcVertexPoint value):base(value){}

		public static IfcPointOrVertexPoint FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPointOrVertexPoint>(json);
		}

		public static IfcPointOrVertexPoint FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpresentationstyleselect.htm
	/// </summary>
	public class IfcPresentationStyleSelect : IfcSelect<IfcCurveStyle,IfcFillAreaStyle,IfcNullStyle,IfcSurfaceStyle,IfcTextStyle>
	{
		public IfcPresentationStyleSelect(IfcCurveStyle value):base(value){}
		public IfcPresentationStyleSelect(IfcFillAreaStyle value):base(value){}
		public IfcPresentationStyleSelect(IfcNullStyle value):base(value){}
		public IfcPresentationStyleSelect(IfcSurfaceStyle value):base(value){}
		public IfcPresentationStyleSelect(IfcTextStyle value):base(value){}

		public static IfcPresentationStyleSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPresentationStyleSelect>(json);
		}

		public static IfcPresentationStyleSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprocessselect.htm
	/// </summary>
	public class IfcProcessSelect : IfcSelect<IfcProcess,IfcTypeProcess>
	{
		public IfcProcessSelect(IfcProcess value):base(value){}
		public IfcProcessSelect(IfcTypeProcess value):base(value){}

		public static IfcProcessSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProcessSelect>(json);
		}

		public static IfcProcessSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproductrepresentationselect.htm
	/// </summary>
	public class IfcProductRepresentationSelect : IfcSelect<IfcProductDefinitionShape,IfcRepresentationMap>
	{
		public IfcProductRepresentationSelect(IfcProductDefinitionShape value):base(value){}
		public IfcProductRepresentationSelect(IfcRepresentationMap value):base(value){}

		public static IfcProductRepresentationSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProductRepresentationSelect>(json);
		}

		public static IfcProductRepresentationSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproductselect.htm
	/// </summary>
	public class IfcProductSelect : IfcSelect<IfcProduct,IfcTypeProduct>
	{
		public IfcProductSelect(IfcProduct value):base(value){}
		public IfcProductSelect(IfcTypeProduct value):base(value){}

		public static IfcProductSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProductSelect>(json);
		}

		public static IfcProductSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertysetdefinitionselect.htm
	/// </summary>
	public class IfcPropertySetDefinitionSelect : IfcSelect<IfcPropertySetDefinition,IfcPropertySetDefinitionSet>
	{
		public IfcPropertySetDefinitionSelect(IfcPropertySetDefinition value):base(value){}
		public IfcPropertySetDefinitionSelect(IfcPropertySetDefinitionSet value):base(value){}

		public static IfcPropertySetDefinitionSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertySetDefinitionSelect>(json);
		}

		public static IfcPropertySetDefinitionSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcresourceobjectselect.htm
	/// </summary>
	public class IfcResourceObjectSelect : IfcSelect<IfcActorRole,IfcAppliedValue,IfcApproval,IfcConstraint,IfcContextDependentUnit,IfcConversionBasedUnit,IfcExternalInformation,IfcExternalReference,IfcMaterialDefinition,IfcOrganization,IfcPerson,IfcPersonAndOrganization,IfcPhysicalQuantity,IfcProfileDef,IfcPropertyAbstraction,IfcTimeSeries>
	{
		public IfcResourceObjectSelect(IfcActorRole value):base(value){}
		public IfcResourceObjectSelect(IfcAppliedValue value):base(value){}
		public IfcResourceObjectSelect(IfcApproval value):base(value){}
		public IfcResourceObjectSelect(IfcConstraint value):base(value){}
		public IfcResourceObjectSelect(IfcContextDependentUnit value):base(value){}
		public IfcResourceObjectSelect(IfcConversionBasedUnit value):base(value){}
		public IfcResourceObjectSelect(IfcExternalInformation value):base(value){}
		public IfcResourceObjectSelect(IfcExternalReference value):base(value){}
		public IfcResourceObjectSelect(IfcMaterialDefinition value):base(value){}
		public IfcResourceObjectSelect(IfcOrganization value):base(value){}
		public IfcResourceObjectSelect(IfcPerson value):base(value){}
		public IfcResourceObjectSelect(IfcPersonAndOrganization value):base(value){}
		public IfcResourceObjectSelect(IfcPhysicalQuantity value):base(value){}
		public IfcResourceObjectSelect(IfcProfileDef value):base(value){}
		public IfcResourceObjectSelect(IfcPropertyAbstraction value):base(value){}
		public IfcResourceObjectSelect(IfcTimeSeries value):base(value){}

		public static IfcResourceObjectSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcResourceObjectSelect>(json);
		}

		public static IfcResourceObjectSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcresourceselect.htm
	/// </summary>
	public class IfcResourceSelect : IfcSelect<IfcResource,IfcTypeResource>
	{
		public IfcResourceSelect(IfcResource value):base(value){}
		public IfcResourceSelect(IfcTypeResource value):base(value){}

		public static IfcResourceSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcResourceSelect>(json);
		}

		public static IfcResourceSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrotationalstiffnessselect.htm
	/// </summary>
	public class IfcRotationalStiffnessSelect : IfcSelect<IfcBoolean,IfcRotationalStiffnessMeasure>
	{
		public IfcRotationalStiffnessSelect(IfcBoolean value):base(value){}
		public IfcRotationalStiffnessSelect(IfcRotationalStiffnessMeasure value):base(value){}

		public static IfcRotationalStiffnessSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRotationalStiffnessSelect>(json);
		}

		public static IfcRotationalStiffnessSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshell.htm
	/// </summary>
	public class IfcShell : IfcSelect<IfcClosedShell,IfcOpenShell>
	{
		public IfcShell(IfcClosedShell value):base(value){}
		public IfcShell(IfcOpenShell value):base(value){}

		public static IfcShell FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcShell>(json);
		}

		public static IfcShell FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsimplevalue.htm
	/// </summary>
	public class IfcSimpleValue : IfcSelect<IfcBoolean,IfcDate,IfcDateTime,IfcDuration,IfcIdentifier,IfcInteger,IfcLabel,IfcLogical,IfcReal,IfcText,IfcTime,IfcTimeStamp>
	{
		public IfcSimpleValue(IfcBoolean value):base(value){}
		public IfcSimpleValue(IfcDate value):base(value){}
		public IfcSimpleValue(IfcDateTime value):base(value){}
		public IfcSimpleValue(IfcDuration value):base(value){}
		public IfcSimpleValue(IfcIdentifier value):base(value){}
		public IfcSimpleValue(IfcInteger value):base(value){}
		public IfcSimpleValue(IfcLabel value):base(value){}
		public IfcSimpleValue(IfcLogical value):base(value){}
		public IfcSimpleValue(IfcReal value):base(value){}
		public IfcSimpleValue(IfcText value):base(value){}
		public IfcSimpleValue(IfcTime value):base(value){}
		public IfcSimpleValue(IfcTimeStamp value):base(value){}

		public static IfcSimpleValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSimpleValue>(json);
		}

		public static IfcSimpleValue FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsizeselect.htm
	/// </summary>
	public class IfcSizeSelect : IfcSelect<IfcDescriptiveMeasure,IfcLengthMeasure,IfcNormalisedRatioMeasure,IfcPositiveLengthMeasure,IfcPositiveRatioMeasure,IfcRatioMeasure>
	{
		public IfcSizeSelect(IfcDescriptiveMeasure value):base(value){}
		public IfcSizeSelect(IfcLengthMeasure value):base(value){}
		public IfcSizeSelect(IfcNormalisedRatioMeasure value):base(value){}
		public IfcSizeSelect(IfcPositiveLengthMeasure value):base(value){}
		public IfcSizeSelect(IfcPositiveRatioMeasure value):base(value){}
		public IfcSizeSelect(IfcRatioMeasure value):base(value){}

		public static IfcSizeSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSizeSelect>(json);
		}

		public static IfcSizeSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsolidorshell.htm
	/// </summary>
	public class IfcSolidOrShell : IfcSelect<IfcClosedShell,IfcSolidModel>
	{
		public IfcSolidOrShell(IfcClosedShell value):base(value){}
		public IfcSolidOrShell(IfcSolidModel value):base(value){}

		public static IfcSolidOrShell FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSolidOrShell>(json);
		}

		public static IfcSolidOrShell FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspaceboundaryselect.htm
	/// </summary>
	public class IfcSpaceBoundarySelect : IfcSelect<IfcExternalSpatialElement,IfcSpace>
	{
		public IfcSpaceBoundarySelect(IfcExternalSpatialElement value):base(value){}
		public IfcSpaceBoundarySelect(IfcSpace value):base(value){}

		public static IfcSpaceBoundarySelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpaceBoundarySelect>(json);
		}

		public static IfcSpaceBoundarySelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspecularhighlightselect.htm
	/// </summary>
	public class IfcSpecularHighlightSelect : IfcSelect<IfcSpecularExponent,IfcSpecularRoughness>
	{
		public IfcSpecularHighlightSelect(IfcSpecularExponent value):base(value){}
		public IfcSpecularHighlightSelect(IfcSpecularRoughness value):base(value){}

		public static IfcSpecularHighlightSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpecularHighlightSelect>(json);
		}

		public static IfcSpecularHighlightSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralactivityassignmentselect.htm
	/// </summary>
	public class IfcStructuralActivityAssignmentSelect : IfcSelect<IfcElement,IfcStructuralItem>
	{
		public IfcStructuralActivityAssignmentSelect(IfcElement value):base(value){}
		public IfcStructuralActivityAssignmentSelect(IfcStructuralItem value):base(value){}

		public static IfcStructuralActivityAssignmentSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralActivityAssignmentSelect>(json);
		}

		public static IfcStructuralActivityAssignmentSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstyleassignmentselect.htm
	/// </summary>
	public class IfcStyleAssignmentSelect : IfcSelect<IfcPresentationStyle,IfcPresentationStyleAssignment>
	{
		public IfcStyleAssignmentSelect(IfcPresentationStyle value):base(value){}
		public IfcStyleAssignmentSelect(IfcPresentationStyleAssignment value):base(value){}

		public static IfcStyleAssignmentSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStyleAssignmentSelect>(json);
		}

		public static IfcStyleAssignmentSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfaceorfacesurface.htm
	/// </summary>
	public class IfcSurfaceOrFaceSurface : IfcSelect<IfcFaceBasedSurfaceModel,IfcFaceSurface,IfcSurface>
	{
		public IfcSurfaceOrFaceSurface(IfcFaceBasedSurfaceModel value):base(value){}
		public IfcSurfaceOrFaceSurface(IfcFaceSurface value):base(value){}
		public IfcSurfaceOrFaceSurface(IfcSurface value):base(value){}

		public static IfcSurfaceOrFaceSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceOrFaceSurface>(json);
		}

		public static IfcSurfaceOrFaceSurface FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacestyleelementselect.htm
	/// </summary>
	public class IfcSurfaceStyleElementSelect : IfcSelect<IfcExternallyDefinedSurfaceStyle,IfcSurfaceStyleLighting,IfcSurfaceStyleRefraction,IfcSurfaceStyleShading,IfcSurfaceStyleWithTextures>
	{
		public IfcSurfaceStyleElementSelect(IfcExternallyDefinedSurfaceStyle value):base(value){}
		public IfcSurfaceStyleElementSelect(IfcSurfaceStyleLighting value):base(value){}
		public IfcSurfaceStyleElementSelect(IfcSurfaceStyleRefraction value):base(value){}
		public IfcSurfaceStyleElementSelect(IfcSurfaceStyleShading value):base(value){}
		public IfcSurfaceStyleElementSelect(IfcSurfaceStyleWithTextures value):base(value){}

		public static IfcSurfaceStyleElementSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceStyleElementSelect>(json);
		}

		public static IfcSurfaceStyleElementSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextfontselect.htm
	/// </summary>
	public class IfcTextFontSelect : IfcSelect<IfcExternallyDefinedTextFont,IfcPreDefinedTextFont>
	{
		public IfcTextFontSelect(IfcExternallyDefinedTextFont value):base(value){}
		public IfcTextFontSelect(IfcPreDefinedTextFont value):base(value){}

		public static IfcTextFontSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextFontSelect>(json);
		}

		public static IfcTextFontSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctimeorratioselect.htm
	/// </summary>
	public class IfcTimeOrRatioSelect : IfcSelect<IfcDuration,IfcRatioMeasure>
	{
		public IfcTimeOrRatioSelect(IfcDuration value):base(value){}
		public IfcTimeOrRatioSelect(IfcRatioMeasure value):base(value){}

		public static IfcTimeOrRatioSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTimeOrRatioSelect>(json);
		}

		public static IfcTimeOrRatioSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctranslationalstiffnessselect.htm
	/// </summary>
	public class IfcTranslationalStiffnessSelect : IfcSelect<IfcBoolean,IfcLinearStiffnessMeasure>
	{
		public IfcTranslationalStiffnessSelect(IfcBoolean value):base(value){}
		public IfcTranslationalStiffnessSelect(IfcLinearStiffnessMeasure value):base(value){}

		public static IfcTranslationalStiffnessSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTranslationalStiffnessSelect>(json);
		}

		public static IfcTranslationalStiffnessSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctrimmingselect.htm
	/// </summary>
	public class IfcTrimmingSelect : IfcSelect<IfcCartesianPoint,IfcParameterValue>
	{
		public IfcTrimmingSelect(IfcCartesianPoint value):base(value){}
		public IfcTrimmingSelect(IfcParameterValue value):base(value){}

		public static IfcTrimmingSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTrimmingSelect>(json);
		}

		public static IfcTrimmingSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunit.htm
	/// </summary>
	public class IfcUnit : IfcSelect<IfcDerivedUnit,IfcMonetaryUnit,IfcNamedUnit>
	{
		public IfcUnit(IfcDerivedUnit value):base(value){}
		public IfcUnit(IfcMonetaryUnit value):base(value){}
		public IfcUnit(IfcNamedUnit value):base(value){}

		public static IfcUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcUnit>(json);
		}

		public static IfcUnit FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvalue.htm
	/// </summary>
	public class IfcValue : IfcSelect<IfcDerivedMeasureValue,IfcMeasureValue,IfcSimpleValue>
	{
		public IfcValue(IfcDerivedMeasureValue value):base(value){}
		public IfcValue(IfcMeasureValue value):base(value){}
		public IfcValue(IfcSimpleValue value):base(value){}

		public static IfcValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcValue>(json);
		}

		public static IfcValue FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvectorordirection.htm
	/// </summary>
	public class IfcVectorOrDirection : IfcSelect<IfcDirection,IfcVector>
	{
		public IfcVectorOrDirection(IfcDirection value):base(value){}
		public IfcVectorOrDirection(IfcVector value):base(value){}

		public static IfcVectorOrDirection FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVectorOrDirection>(json);
		}

		public static IfcVectorOrDirection FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwarpingstiffnessselect.htm
	/// </summary>
	public class IfcWarpingStiffnessSelect : IfcSelect<IfcBoolean,IfcWarpingMomentMeasure>
	{
		public IfcWarpingStiffnessSelect(IfcBoolean value):base(value){}
		public IfcWarpingStiffnessSelect(IfcWarpingMomentMeasure value):base(value){}

		public static IfcWarpingStiffnessSelect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWarpingStiffnessSelect>(json);
		}

		public static IfcWarpingStiffnessSelect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}


	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactionrequest.htm"/>
	/// </summary>
	public  partial class IfcActionRequest : IfcControl
	{
		public IfcActionRequestTypeEnum PredefinedType{get;set;} // optional
		public IfcLabel Status{get;set;} // optional
		public IfcText LongDescription{get;set;} // optional

		public IfcActionRequest(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcActionRequest FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcActionRequest>(json);
		}

		public static new IfcActionRequest FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccontrol.htm"/>
	/// </summary>
	public abstract partial class IfcControl : IfcObject
	{
		public IfcIdentifier Identification{get;set;} // optional

		public IfcControl(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcControl FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcControl>(json);
		}

		public static new IfcControl FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactor.htm"/>
	/// </summary>
	public  partial class IfcActor : IfcObject
	{
		public IfcActorSelect TheActor{get;set;} 

		public IfcActor(IfcActorSelect theActor,IfcGloballyUniqueId globalId):base(globalId)
		{
			TheActor = theActor;


		}

		public static new IfcActor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcActor>(json);
		}

		public static new IfcActor FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcoccupant.htm"/>
	/// </summary>
	public  partial class IfcOccupant : IfcActor
	{
		public IfcOccupantTypeEnum PredefinedType{get;set;} // optional

		public IfcOccupant(IfcActorSelect theActor,IfcGloballyUniqueId globalId):base(theActor,globalId)
		{


		}

		public static new IfcOccupant FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOccupant>(json);
		}

		public static new IfcOccupant FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcobject.htm"/>
	/// </summary>
	public abstract partial class IfcObject : IfcObjectDefinition
	{
		public IfcLabel ObjectType{get;set;} // optional

		public IfcObject(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcObject FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcObject>(json);
		}

		public static new IfcObject FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactorrole.htm"/>
	/// </summary>
	public  partial class IfcActorRole : IfcBase
	{
		public IfcRoleEnum Role{get;set;} 
		public IfcLabel UserDefinedRole{get;set;} // optional
		public IfcText Description{get;set;} // optional

		public IfcActorRole(IfcRoleEnum role):base()
		{
			Role = role;


		}

		public static  IfcActorRole FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcActorRole>(json);
		}

		public static  IfcActorRole FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactuator.htm"/>
	/// </summary>
	public  partial class IfcActuator : IfcDistributionControlElement
	{
		public IfcActuatorTypeEnum PredefinedType{get;set;} // optional

		public IfcActuator(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcActuator FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcActuator>(json);
		}

		public static new IfcActuator FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributioncontrolelement.htm"/>
	/// </summary>
	public  partial class IfcDistributionControlElement : IfcDistributionElement
	{

		public IfcDistributionControlElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDistributionControlElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionControlElement>(json);
		}

		public static new IfcDistributionControlElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcactuatortype.htm"/>
	/// </summary>
	public  partial class IfcActuatorType : IfcDistributionControlElementType
	{
		public IfcActuatorTypeEnum PredefinedType{get;set;} 

		public IfcActuatorType(IfcActuatorTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcActuatorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcActuatorType>(json);
		}

		public static new IfcActuatorType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributioncontrolelementtype.htm"/>
	/// </summary>
	public abstract partial class IfcDistributionControlElementType : IfcDistributionElementType
	{

		public IfcDistributionControlElementType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDistributionControlElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionControlElementType>(json);
		}

		public static new IfcDistributionControlElementType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaddress.htm"/>
	/// </summary>
	public abstract partial class IfcAddress : IfcBase
	{
		public IfcAddressTypeEnum Purpose{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcLabel UserDefinedPurpose{get;set;} // optional

		public IfcAddress():base()
		{


		}

		public static  IfcAddress FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAddress>(json);
		}

		public static  IfcAddress FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpostaladdress.htm"/>
	/// </summary>
	public  partial class IfcPostalAddress : IfcAddress
	{
		public IfcLabel InternalLocation{get;set;} // optional
		public List<IfcLabel> AddressLines{get;set;} // optional
		public IfcLabel PostalBox{get;set;} // optional
		public IfcLabel Town{get;set;} // optional
		public IfcLabel Region{get;set;} // optional
		public IfcLabel PostalCode{get;set;} // optional
		public IfcLabel Country{get;set;} // optional

		public IfcPostalAddress():base()
		{

			AddressLines = new List<IfcLabel>();

		}

		public static new IfcPostalAddress FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPostalAddress>(json);
		}

		public static new IfcPostalAddress FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctelecomaddress.htm"/>
	/// </summary>
	public  partial class IfcTelecomAddress : IfcAddress
	{
		public List<IfcLabel> TelephoneNumbers{get;set;} // optional
		public List<IfcLabel> FacsimileNumbers{get;set;} // optional
		public IfcLabel PagerNumber{get;set;} // optional
		public List<IfcLabel> ElectronicMailAddresses{get;set;} // optional
		public IfcURIReference WWWHomePageURL{get;set;} // optional
		public List<IfcURIReference> MessagingIDs{get;set;} // optional

		public IfcTelecomAddress():base()
		{

			TelephoneNumbers = new List<IfcLabel>();
			FacsimileNumbers = new List<IfcLabel>();
			ElectronicMailAddresses = new List<IfcLabel>();
			MessagingIDs = new List<IfcURIReference>();

		}

		public static new IfcTelecomAddress FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTelecomAddress>(json);
		}

		public static new IfcTelecomAddress FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcadvancedbrep.htm"/>
	/// </summary>
	public  partial class IfcAdvancedBrep : IfcManifoldSolidBrep
	{

		public IfcAdvancedBrep(IfcClosedShell outer):base(outer)
		{


		}

		public static new IfcAdvancedBrep FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAdvancedBrep>(json);
		}

		public static new IfcAdvancedBrep FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcadvancedbrepwithvoids.htm"/>
	/// </summary>
	public  partial class IfcAdvancedBrepWithVoids : IfcAdvancedBrep
	{
		public List<IfcClosedShell> Voids{get;set;} 

		public IfcAdvancedBrepWithVoids(List<IfcClosedShell> voids,IfcClosedShell outer):base(outer)
		{
			Voids = voids;


		}

		public static new IfcAdvancedBrepWithVoids FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAdvancedBrepWithVoids>(json);
		}

		public static new IfcAdvancedBrepWithVoids FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmanifoldsolidbrep.htm"/>
	/// </summary>
	public abstract partial class IfcManifoldSolidBrep : IfcSolidModel
	{
		public IfcClosedShell Outer{get;set;} 

		public IfcManifoldSolidBrep(IfcClosedShell outer):base()
		{
			Outer = outer;


		}

		public static new IfcManifoldSolidBrep FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcManifoldSolidBrep>(json);
		}

		public static new IfcManifoldSolidBrep FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcadvancedface.htm"/>
	/// </summary>
	public  partial class IfcAdvancedFace : IfcFaceSurface
	{

		public IfcAdvancedFace(IfcSurface faceSurface,bool sameSense,List<IfcFaceBound> bounds):base(faceSurface,sameSense,bounds)
		{


		}

		public static new IfcAdvancedFace FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAdvancedFace>(json);
		}

		public static new IfcAdvancedFace FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfacesurface.htm"/>
	/// </summary>
	public  partial class IfcFaceSurface : IfcFace
	{
		public IfcSurface FaceSurface{get;set;} 
		public bool SameSense{get;set;} 

		public IfcFaceSurface(IfcSurface faceSurface,bool sameSense,List<IfcFaceBound> bounds):base(bounds)
		{
			FaceSurface = faceSurface;
			SameSense = sameSense;


		}

		public static new IfcFaceSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFaceSurface>(json);
		}

		public static new IfcFaceSurface FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairterminal.htm"/>
	/// </summary>
	public  partial class IfcAirTerminal : IfcFlowTerminal
	{
		public IfcAirTerminalTypeEnum PredefinedType{get;set;} // optional

		public IfcAirTerminal(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcAirTerminal FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAirTerminal>(json);
		}

		public static new IfcAirTerminal FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowterminal.htm"/>
	/// </summary>
	public  partial class IfcFlowTerminal : IfcDistributionFlowElement
	{

		public IfcFlowTerminal(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFlowTerminal FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowTerminal>(json);
		}

		public static new IfcFlowTerminal FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairterminalbox.htm"/>
	/// </summary>
	public  partial class IfcAirTerminalBox : IfcFlowController
	{
		public IfcAirTerminalBoxTypeEnum PredefinedType{get;set;} // optional

		public IfcAirTerminalBox(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcAirTerminalBox FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAirTerminalBox>(json);
		}

		public static new IfcAirTerminalBox FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowcontroller.htm"/>
	/// </summary>
	public  partial class IfcFlowController : IfcDistributionFlowElement
	{

		public IfcFlowController(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFlowController FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowController>(json);
		}

		public static new IfcFlowController FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairterminalboxtype.htm"/>
	/// </summary>
	public  partial class IfcAirTerminalBoxType : IfcFlowControllerType
	{
		public IfcAirTerminalBoxTypeEnum PredefinedType{get;set;} 

		public IfcAirTerminalBoxType(IfcAirTerminalBoxTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcAirTerminalBoxType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAirTerminalBoxType>(json);
		}

		public static new IfcAirTerminalBoxType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowcontrollertype.htm"/>
	/// </summary>
	public abstract partial class IfcFlowControllerType : IfcDistributionFlowElementType
	{

		public IfcFlowControllerType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFlowControllerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowControllerType>(json);
		}

		public static new IfcFlowControllerType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairterminaltype.htm"/>
	/// </summary>
	public  partial class IfcAirTerminalType : IfcFlowTerminalType
	{
		public IfcAirTerminalTypeEnum PredefinedType{get;set;} 

		public IfcAirTerminalType(IfcAirTerminalTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcAirTerminalType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAirTerminalType>(json);
		}

		public static new IfcAirTerminalType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowterminaltype.htm"/>
	/// </summary>
	public abstract partial class IfcFlowTerminalType : IfcDistributionFlowElementType
	{

		public IfcFlowTerminalType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFlowTerminalType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowTerminalType>(json);
		}

		public static new IfcFlowTerminalType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairtoairheatrecovery.htm"/>
	/// </summary>
	public  partial class IfcAirToAirHeatRecovery : IfcEnergyConversionDevice
	{
		public IfcAirToAirHeatRecoveryTypeEnum PredefinedType{get;set;} // optional

		public IfcAirToAirHeatRecovery(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcAirToAirHeatRecovery FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAirToAirHeatRecovery>(json);
		}

		public static new IfcAirToAirHeatRecovery FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcenergyconversiondevice.htm"/>
	/// </summary>
	public  partial class IfcEnergyConversionDevice : IfcDistributionFlowElement
	{

		public IfcEnergyConversionDevice(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcEnergyConversionDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEnergyConversionDevice>(json);
		}

		public static new IfcEnergyConversionDevice FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcairtoairheatrecoverytype.htm"/>
	/// </summary>
	public  partial class IfcAirToAirHeatRecoveryType : IfcEnergyConversionDeviceType
	{
		public IfcAirToAirHeatRecoveryTypeEnum PredefinedType{get;set;} 

		public IfcAirToAirHeatRecoveryType(IfcAirToAirHeatRecoveryTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcAirToAirHeatRecoveryType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAirToAirHeatRecoveryType>(json);
		}

		public static new IfcAirToAirHeatRecoveryType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcenergyconversiondevicetype.htm"/>
	/// </summary>
	public abstract partial class IfcEnergyConversionDeviceType : IfcDistributionFlowElementType
	{

		public IfcEnergyConversionDeviceType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcEnergyConversionDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEnergyConversionDeviceType>(json);
		}

		public static new IfcEnergyConversionDeviceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcalarm.htm"/>
	/// </summary>
	public  partial class IfcAlarm : IfcDistributionControlElement
	{
		public IfcAlarmTypeEnum PredefinedType{get;set;} // optional

		public IfcAlarm(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcAlarm FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAlarm>(json);
		}

		public static new IfcAlarm FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcalarmtype.htm"/>
	/// </summary>
	public  partial class IfcAlarmType : IfcDistributionControlElementType
	{
		public IfcAlarmTypeEnum PredefinedType{get;set;} 

		public IfcAlarmType(IfcAlarmTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcAlarmType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAlarmType>(json);
		}

		public static new IfcAlarmType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcannotation.htm"/>
	/// </summary>
	public  partial class IfcAnnotation : IfcProduct
	{

		public IfcAnnotation(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcAnnotation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAnnotation>(json);
		}

		public static new IfcAnnotation FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproduct.htm"/>
	/// </summary>
	public abstract partial class IfcProduct : IfcObject
	{
		public IfcObjectPlacement ObjectPlacement{get;set;} // optional
		public IfcProductRepresentation Representation{get;set;} // optional

		public IfcProduct(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcProduct FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProduct>(json);
		}

		public static new IfcProduct FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcannotationfillarea.htm"/>
	/// </summary>
	public  partial class IfcAnnotationFillArea : IfcGeometricRepresentationItem
	{
		public IfcCurve OuterBoundary{get;set;} 
		public List<IfcCurve> InnerBoundaries{get;set;} // optional

		public IfcAnnotationFillArea(IfcCurve outerBoundary):base()
		{
			OuterBoundary = outerBoundary;

			InnerBoundaries = new List<IfcCurve>();

		}

		public static new IfcAnnotationFillArea FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAnnotationFillArea>(json);
		}

		public static new IfcAnnotationFillArea FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeometricrepresentationitem.htm"/>
	/// </summary>
	public abstract partial class IfcGeometricRepresentationItem : IfcRepresentationItem
	{

		public IfcGeometricRepresentationItem():base()
		{


		}

		public static new IfcGeometricRepresentationItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGeometricRepresentationItem>(json);
		}

		public static new IfcGeometricRepresentationItem FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcapplication.htm"/>
	/// </summary>
	public  partial class IfcApplication : IfcBase
	{
		public IfcOrganization ApplicationDeveloper{get;set;} 
		public IfcLabel Version{get;set;} 
		public IfcLabel ApplicationFullName{get;set;} 
		public IfcIdentifier ApplicationIdentifier{get;set;} 

		public IfcApplication(IfcOrganization applicationDeveloper,IfcLabel version,IfcLabel applicationFullName,IfcIdentifier applicationIdentifier):base()
		{
			ApplicationDeveloper = applicationDeveloper;
			Version = version;
			ApplicationFullName = applicationFullName;
			ApplicationIdentifier = applicationIdentifier;


		}

		public static  IfcApplication FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcApplication>(json);
		}

		public static  IfcApplication FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcappliedvalue.htm"/>
	/// </summary>
	public  partial class IfcAppliedValue : IfcBase
	{
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcAppliedValueSelect AppliedValue{get;set;} // optional
		public IfcMeasureWithUnit UnitBasis{get;set;} // optional
		public IfcDate ApplicableDate{get;set;} // optional
		public IfcDate FixedUntilDate{get;set;} // optional
		public IfcLabel Category{get;set;} // optional
		public IfcLabel Condition{get;set;} // optional
		public IfcArithmeticOperatorEnum ArithmeticOperator{get;set;} // optional
		public List<IfcAppliedValue> Components{get;set;} // optional

		public IfcAppliedValue():base()
		{

			Components = new List<IfcAppliedValue>();

		}

		public static  IfcAppliedValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAppliedValue>(json);
		}

		public static  IfcAppliedValue FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccostvalue.htm"/>
	/// </summary>
	public  partial class IfcCostValue : IfcAppliedValue
	{

		public IfcCostValue():base()
		{


		}

		public static new IfcCostValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCostValue>(json);
		}

		public static new IfcCostValue FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcapproval.htm"/>
	/// </summary>
	public  partial class IfcApproval : IfcBase
	{
		public IfcIdentifier Identifier{get;set;} // optional
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcDateTime TimeOfApproval{get;set;} // optional
		public IfcLabel Status{get;set;} // optional
		public IfcLabel Level{get;set;} // optional
		public IfcText Qualifier{get;set;} // optional
		public IfcActorSelect RequestingApproval{get;set;} // optional
		public IfcActorSelect GivingApproval{get;set;} // optional

		public IfcApproval():base()
		{


		}

		public static  IfcApproval FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcApproval>(json);
		}

		public static  IfcApproval FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcapprovalrelationship.htm"/>
	/// </summary>
	public  partial class IfcApprovalRelationship : IfcResourceLevelRelationship
	{
		public IfcApproval RelatingApproval{get;set;} 
		public List<IfcApproval> RelatedApprovals{get;set;} 

		public IfcApprovalRelationship(IfcApproval relatingApproval,List<IfcApproval> relatedApprovals):base()
		{
			RelatingApproval = relatingApproval;
			RelatedApprovals = relatedApprovals;


		}

		public static new IfcApprovalRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcApprovalRelationship>(json);
		}

		public static new IfcApprovalRelationship FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcresourcelevelrelationship.htm"/>
	/// </summary>
	public abstract partial class IfcResourceLevelRelationship : IfcBase
	{
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional

		public IfcResourceLevelRelationship():base()
		{


		}

		public static  IfcResourceLevelRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcResourceLevelRelationship>(json);
		}

		public static  IfcResourceLevelRelationship FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcarbitraryclosedprofiledef.htm"/>
	/// </summary>
	public  partial class IfcArbitraryClosedProfileDef : IfcProfileDef
	{
		public IfcCurve OuterCurve{get;set;} 

		public IfcArbitraryClosedProfileDef(IfcCurve outerCurve,IfcProfileTypeEnum profileType):base(profileType)
		{
			OuterCurve = outerCurve;


		}

		public static new IfcArbitraryClosedProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcArbitraryClosedProfileDef>(json);
		}

		public static new IfcArbitraryClosedProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcarbitraryprofiledefwithvoids.htm"/>
	/// </summary>
	public  partial class IfcArbitraryProfileDefWithVoids : IfcArbitraryClosedProfileDef
	{
		public List<IfcCurve> InnerCurves{get;set;} 

		public IfcArbitraryProfileDefWithVoids(List<IfcCurve> innerCurves,IfcCurve outerCurve,IfcProfileTypeEnum profileType):base(outerCurve,profileType)
		{
			InnerCurves = innerCurves;


		}

		public static new IfcArbitraryProfileDefWithVoids FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcArbitraryProfileDefWithVoids>(json);
		}

		public static new IfcArbitraryProfileDefWithVoids FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprofiledef.htm"/>
	/// </summary>
	public  partial class IfcProfileDef : IfcBase
	{
		public IfcProfileTypeEnum ProfileType{get;set;} 
		public IfcLabel ProfileName{get;set;} // optional

		public IfcProfileDef(IfcProfileTypeEnum profileType):base()
		{
			ProfileType = profileType;


		}

		public static  IfcProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProfileDef>(json);
		}

		public static  IfcProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcarbitraryopenprofiledef.htm"/>
	/// </summary>
	public  partial class IfcArbitraryOpenProfileDef : IfcProfileDef
	{
		public IfcBoundedCurve Curve{get;set;} 

		public IfcArbitraryOpenProfileDef(IfcBoundedCurve curve,IfcProfileTypeEnum profileType):base(profileType)
		{
			Curve = curve;


		}

		public static new IfcArbitraryOpenProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcArbitraryOpenProfileDef>(json);
		}

		public static new IfcArbitraryOpenProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccenterlineprofiledef.htm"/>
	/// </summary>
	public  partial class IfcCenterLineProfileDef : IfcArbitraryOpenProfileDef
	{
		public IfcPositiveLengthMeasure Thickness{get;set;} 

		public IfcCenterLineProfileDef(IfcPositiveLengthMeasure thickness,IfcBoundedCurve curve,IfcProfileTypeEnum profileType):base(curve,profileType)
		{
			Thickness = thickness;


		}

		public static new IfcCenterLineProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCenterLineProfileDef>(json);
		}

		public static new IfcCenterLineProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcasset.htm"/>
	/// </summary>
	public  partial class IfcAsset : IfcGroup
	{
		public IfcIdentifier Identification{get;set;} // optional
		public IfcCostValue OriginalValue{get;set;} // optional
		public IfcCostValue CurrentValue{get;set;} // optional
		public IfcCostValue TotalReplacementCost{get;set;} // optional
		public IfcActorSelect Owner{get;set;} // optional
		public IfcActorSelect User{get;set;} // optional
		public IfcPerson ResponsiblePerson{get;set;} // optional
		public IfcDate IncorporationDate{get;set;} // optional
		public IfcCostValue DepreciatedValue{get;set;} // optional

		public IfcAsset(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcAsset FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAsset>(json);
		}

		public static new IfcAsset FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgroup.htm"/>
	/// </summary>
	public  partial class IfcGroup : IfcObject
	{

		public IfcGroup(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcGroup FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGroup>(json);
		}

		public static new IfcGroup FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcasymmetricishapeprofiledef.htm"/>
	/// </summary>
	public  partial class IfcAsymmetricIShapeProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure BottomFlangeWidth{get;set;} 
		public IfcPositiveLengthMeasure OverallDepth{get;set;} 
		public IfcPositiveLengthMeasure WebThickness{get;set;} 
		public IfcPositiveLengthMeasure BottomFlangeThickness{get;set;} 
		public IfcNonNegativeLengthMeasure BottomFlangeFilletRadius{get;set;} // optional
		public IfcPositiveLengthMeasure TopFlangeWidth{get;set;} 
		public IfcPositiveLengthMeasure TopFlangeThickness{get;set;} // optional
		public IfcNonNegativeLengthMeasure TopFlangeFilletRadius{get;set;} // optional
		public IfcNonNegativeLengthMeasure BottomFlangeEdgeRadius{get;set;} // optional
		public IfcPlaneAngleMeasure BottomFlangeSlope{get;set;} // optional
		public IfcNonNegativeLengthMeasure TopFlangeEdgeRadius{get;set;} // optional
		public IfcPlaneAngleMeasure TopFlangeSlope{get;set;} // optional

		public IfcAsymmetricIShapeProfileDef(IfcPositiveLengthMeasure bottomFlangeWidth,IfcPositiveLengthMeasure overallDepth,IfcPositiveLengthMeasure webThickness,IfcPositiveLengthMeasure bottomFlangeThickness,IfcPositiveLengthMeasure topFlangeWidth,IfcProfileTypeEnum profileType):base(profileType)
		{
			BottomFlangeWidth = bottomFlangeWidth;
			OverallDepth = overallDepth;
			WebThickness = webThickness;
			BottomFlangeThickness = bottomFlangeThickness;
			TopFlangeWidth = topFlangeWidth;


		}

		public static new IfcAsymmetricIShapeProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAsymmetricIShapeProfileDef>(json);
		}

		public static new IfcAsymmetricIShapeProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcparameterizedprofiledef.htm"/>
	/// </summary>
	public abstract partial class IfcParameterizedProfileDef : IfcProfileDef
	{
		public IfcAxis2Placement2D Position{get;set;} // optional

		public IfcParameterizedProfileDef(IfcProfileTypeEnum profileType):base(profileType)
		{


		}

		public static new IfcParameterizedProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcParameterizedProfileDef>(json);
		}

		public static new IfcParameterizedProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaudiovisualappliance.htm"/>
	/// </summary>
	public  partial class IfcAudioVisualAppliance : IfcFlowTerminal
	{
		public IfcAudioVisualApplianceTypeEnum PredefinedType{get;set;} // optional

		public IfcAudioVisualAppliance(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcAudioVisualAppliance FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAudioVisualAppliance>(json);
		}

		public static new IfcAudioVisualAppliance FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaudiovisualappliancetype.htm"/>
	/// </summary>
	public  partial class IfcAudioVisualApplianceType : IfcFlowTerminalType
	{
		public IfcAudioVisualApplianceTypeEnum PredefinedType{get;set;} 

		public IfcAudioVisualApplianceType(IfcAudioVisualApplianceTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcAudioVisualApplianceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAudioVisualApplianceType>(json);
		}

		public static new IfcAudioVisualApplianceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaxis1placement.htm"/>
	/// </summary>
	public  partial class IfcAxis1Placement : IfcPlacement
	{
		public IfcDirection Axis{get;set;} // optional

		public IfcAxis1Placement(IfcCartesianPoint location):base(location)
		{


		}

		public static new IfcAxis1Placement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAxis1Placement>(json);
		}

		public static new IfcAxis1Placement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplacement.htm"/>
	/// </summary>
	public abstract partial class IfcPlacement : IfcGeometricRepresentationItem
	{
		public IfcCartesianPoint Location{get;set;} 

		public IfcPlacement(IfcCartesianPoint location):base()
		{
			Location = location;


		}

		public static new IfcPlacement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlacement>(json);
		}

		public static new IfcPlacement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaxis2placement2d.htm"/>
	/// </summary>
	public  partial class IfcAxis2Placement2D : IfcPlacement
	{
		public IfcDirection RefDirection{get;set;} // optional

		public IfcAxis2Placement2D(IfcCartesianPoint location):base(location)
		{


		}

		public static new IfcAxis2Placement2D FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAxis2Placement2D>(json);
		}

		public static new IfcAxis2Placement2D FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcaxis2placement3d.htm"/>
	/// </summary>
	public  partial class IfcAxis2Placement3D : IfcPlacement
	{
		public IfcDirection Axis{get;set;} // optional
		public IfcDirection RefDirection{get;set;} // optional

		public IfcAxis2Placement3D(IfcCartesianPoint location):base(location)
		{


		}

		public static new IfcAxis2Placement3D FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcAxis2Placement3D>(json);
		}

		public static new IfcAxis2Placement3D FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbsplinecurve.htm"/>
	/// </summary>
	public abstract partial class IfcBSplineCurve : IfcBoundedCurve
	{
		public int Degree{get;set;} 
		public List<IfcCartesianPoint> ControlPointsList{get;set;} 
		public IfcBSplineCurveForm CurveForm{get;set;} 
		public bool? ClosedCurve{get;set;} 
		public bool? SelfIntersect{get;set;} 

		public IfcBSplineCurve(int degree,List<IfcCartesianPoint> controlPointsList,IfcBSplineCurveForm curveForm,bool? closedCurve,bool? selfIntersect):base()
		{
			Degree = degree;
			ControlPointsList = controlPointsList;
			CurveForm = curveForm;
			ClosedCurve = closedCurve;
			SelfIntersect = selfIntersect;


		}

		public static new IfcBSplineCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBSplineCurve>(json);
		}

		public static new IfcBSplineCurve FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbsplinecurvewithknots.htm"/>
	/// </summary>
	public  partial class IfcBSplineCurveWithKnots : IfcBSplineCurve
	{
		public List<int> KnotMultiplicities{get;set;} 
		public List<IfcParameterValue> Knots{get;set;} 
		public IfcKnotType KnotSpec{get;set;} 

		public IfcBSplineCurveWithKnots(List<int> knotMultiplicities,List<IfcParameterValue> knots,IfcKnotType knotSpec,int degree,List<IfcCartesianPoint> controlPointsList,IfcBSplineCurveForm curveForm,bool? closedCurve,bool? selfIntersect):base(degree,controlPointsList,curveForm,closedCurve,selfIntersect)
		{
			KnotMultiplicities = knotMultiplicities;
			Knots = knots;
			KnotSpec = knotSpec;


		}

		public static new IfcBSplineCurveWithKnots FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBSplineCurveWithKnots>(json);
		}

		public static new IfcBSplineCurveWithKnots FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundedcurve.htm"/>
	/// </summary>
	public abstract partial class IfcBoundedCurve : IfcCurve
	{

		public IfcBoundedCurve():base()
		{


		}

		public static new IfcBoundedCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundedCurve>(json);
		}

		public static new IfcBoundedCurve FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrationalbsplinecurvewithknots.htm"/>
	/// </summary>
	public  partial class IfcRationalBSplineCurveWithKnots : IfcBSplineCurveWithKnots
	{
		public List<double> WeightsData{get;set;} 

		public IfcRationalBSplineCurveWithKnots(List<double> weightsData,List<int> knotMultiplicities,List<IfcParameterValue> knots,IfcKnotType knotSpec,int degree,List<IfcCartesianPoint> controlPointsList,IfcBSplineCurveForm curveForm,bool? closedCurve,bool? selfIntersect):base(knotMultiplicities,knots,knotSpec,degree,controlPointsList,curveForm,closedCurve,selfIntersect)
		{
			WeightsData = weightsData;


		}

		public static new IfcRationalBSplineCurveWithKnots FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRationalBSplineCurveWithKnots>(json);
		}

		public static new IfcRationalBSplineCurveWithKnots FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbsplinesurface.htm"/>
	/// </summary>
	public abstract partial class IfcBSplineSurface : IfcBoundedSurface
	{
		public int UDegree{get;set;} 
		public int VDegree{get;set;} 
		public List<List<IfcCartesianPoint>> ControlPointsList{get;set;} 
		public IfcBSplineSurfaceForm SurfaceForm{get;set;} 
		public bool? UClosed{get;set;} 
		public bool? VClosed{get;set;} 
		public bool? SelfIntersect{get;set;} 

		public IfcBSplineSurface(int uDegree,int vDegree,List<List<IfcCartesianPoint>> controlPointsList,IfcBSplineSurfaceForm surfaceForm,bool? uClosed,bool? vClosed,bool? selfIntersect):base()
		{
			UDegree = uDegree;
			VDegree = vDegree;
			ControlPointsList = controlPointsList;
			SurfaceForm = surfaceForm;
			UClosed = uClosed;
			VClosed = vClosed;
			SelfIntersect = selfIntersect;


		}

		public static new IfcBSplineSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBSplineSurface>(json);
		}

		public static new IfcBSplineSurface FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbsplinesurfacewithknots.htm"/>
	/// </summary>
	public  partial class IfcBSplineSurfaceWithKnots : IfcBSplineSurface
	{
		public List<int> UMultiplicities{get;set;} 
		public List<int> VMultiplicities{get;set;} 
		public List<IfcParameterValue> UKnots{get;set;} 
		public List<IfcParameterValue> VKnots{get;set;} 
		public IfcKnotType KnotSpec{get;set;} 

		public IfcBSplineSurfaceWithKnots(List<int> uMultiplicities,List<int> vMultiplicities,List<IfcParameterValue> uKnots,List<IfcParameterValue> vKnots,IfcKnotType knotSpec,int uDegree,int vDegree,List<List<IfcCartesianPoint>> controlPointsList,IfcBSplineSurfaceForm surfaceForm,bool? uClosed,bool? vClosed,bool? selfIntersect):base(uDegree,vDegree,controlPointsList,surfaceForm,uClosed,vClosed,selfIntersect)
		{
			UMultiplicities = uMultiplicities;
			VMultiplicities = vMultiplicities;
			UKnots = uKnots;
			VKnots = vKnots;
			KnotSpec = knotSpec;


		}

		public static new IfcBSplineSurfaceWithKnots FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBSplineSurfaceWithKnots>(json);
		}

		public static new IfcBSplineSurfaceWithKnots FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundedsurface.htm"/>
	/// </summary>
	public abstract partial class IfcBoundedSurface : IfcSurface
	{

		public IfcBoundedSurface():base()
		{


		}

		public static new IfcBoundedSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundedSurface>(json);
		}

		public static new IfcBoundedSurface FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrationalbsplinesurfacewithknots.htm"/>
	/// </summary>
	public  partial class IfcRationalBSplineSurfaceWithKnots : IfcBSplineSurfaceWithKnots
	{
		public List<List<double>> WeightsData{get;set;} 

		public IfcRationalBSplineSurfaceWithKnots(List<List<double>> weightsData,List<int> uMultiplicities,List<int> vMultiplicities,List<IfcParameterValue> uKnots,List<IfcParameterValue> vKnots,IfcKnotType knotSpec,int uDegree,int vDegree,List<List<IfcCartesianPoint>> controlPointsList,IfcBSplineSurfaceForm surfaceForm,bool? uClosed,bool? vClosed,bool? selfIntersect):base(uMultiplicities,vMultiplicities,uKnots,vKnots,knotSpec,uDegree,vDegree,controlPointsList,surfaceForm,uClosed,vClosed,selfIntersect)
		{
			WeightsData = weightsData;


		}

		public static new IfcRationalBSplineSurfaceWithKnots FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRationalBSplineSurfaceWithKnots>(json);
		}

		public static new IfcRationalBSplineSurfaceWithKnots FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbeam.htm"/>
	/// </summary>
	public  partial class IfcBeam : IfcBuildingElement
	{
		public IfcBeamTypeEnum PredefinedType{get;set;} // optional

		public IfcBeam(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcBeam FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBeam>(json);
		}

		public static new IfcBeam FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbeamstandardcase.htm"/>
	/// </summary>
	public  partial class IfcBeamStandardCase : IfcBeam
	{

		public IfcBeamStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcBeamStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBeamStandardCase>(json);
		}

		public static new IfcBeamStandardCase FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingelement.htm"/>
	/// </summary>
	public abstract partial class IfcBuildingElement : IfcElement
	{

		public IfcBuildingElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcBuildingElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuildingElement>(json);
		}

		public static new IfcBuildingElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbeamtype.htm"/>
	/// </summary>
	public  partial class IfcBeamType : IfcBuildingElementType
	{
		public IfcBeamTypeEnum PredefinedType{get;set;} 

		public IfcBeamType(IfcBeamTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcBeamType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBeamType>(json);
		}

		public static new IfcBeamType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingelementtype.htm"/>
	/// </summary>
	public abstract partial class IfcBuildingElementType : IfcElementType
	{

		public IfcBuildingElementType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcBuildingElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuildingElementType>(json);
		}

		public static new IfcBuildingElementType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcblobtexture.htm"/>
	/// </summary>
	public  partial class IfcBlobTexture : IfcSurfaceTexture
	{
		public IfcIdentifier RasterFormat{get;set;} 
		public byte[] RasterCode{get;set;} 

		public IfcBlobTexture(IfcIdentifier rasterFormat,byte[] rasterCode,bool repeatS,bool repeatT):base(repeatS,repeatT)
		{
			RasterFormat = rasterFormat;
			RasterCode = rasterCode;


		}

		public static new IfcBlobTexture FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBlobTexture>(json);
		}

		public static new IfcBlobTexture FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacetexture.htm"/>
	/// </summary>
	public abstract partial class IfcSurfaceTexture : IfcPresentationItem
	{
		public bool RepeatS{get;set;} 
		public bool RepeatT{get;set;} 
		public IfcIdentifier Mode{get;set;} // optional
		public IfcCartesianTransformationOperator2D TextureTransform{get;set;} // optional
		public List<IfcIdentifier> Parameter{get;set;} // optional

		public IfcSurfaceTexture(bool repeatS,bool repeatT):base()
		{
			RepeatS = repeatS;
			RepeatT = repeatT;

			Parameter = new List<IfcIdentifier>();

		}

		public static new IfcSurfaceTexture FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceTexture>(json);
		}

		public static new IfcSurfaceTexture FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcblock.htm"/>
	/// </summary>
	public  partial class IfcBlock : IfcCsgPrimitive3D
	{
		public IfcPositiveLengthMeasure XLength{get;set;} 
		public IfcPositiveLengthMeasure YLength{get;set;} 
		public IfcPositiveLengthMeasure ZLength{get;set;} 

		public IfcBlock(IfcPositiveLengthMeasure xLength,IfcPositiveLengthMeasure yLength,IfcPositiveLengthMeasure zLength,IfcAxis2Placement3D position):base(position)
		{
			XLength = xLength;
			YLength = yLength;
			ZLength = zLength;


		}

		public static new IfcBlock FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBlock>(json);
		}

		public static new IfcBlock FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccsgprimitive3d.htm"/>
	/// </summary>
	public abstract partial class IfcCsgPrimitive3D : IfcGeometricRepresentationItem
	{
		public IfcAxis2Placement3D Position{get;set;} 

		public IfcCsgPrimitive3D(IfcAxis2Placement3D position):base()
		{
			Position = position;


		}

		public static new IfcCsgPrimitive3D FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCsgPrimitive3D>(json);
		}

		public static new IfcCsgPrimitive3D FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboiler.htm"/>
	/// </summary>
	public  partial class IfcBoiler : IfcEnergyConversionDevice
	{
		public IfcBoilerTypeEnum PredefinedType{get;set;} // optional

		public IfcBoiler(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcBoiler FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoiler>(json);
		}

		public static new IfcBoiler FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboilertype.htm"/>
	/// </summary>
	public  partial class IfcBoilerType : IfcEnergyConversionDeviceType
	{
		public IfcBoilerTypeEnum PredefinedType{get;set;} 

		public IfcBoilerType(IfcBoilerTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcBoilerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoilerType>(json);
		}

		public static new IfcBoilerType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbooleanclippingresult.htm"/>
	/// </summary>
	public  partial class IfcBooleanClippingResult : IfcBooleanResult
	{

		public IfcBooleanClippingResult(IfcBooleanOperator op,IfcBooleanOperand firstOperand,IfcBooleanOperand secondOperand):base(op,firstOperand,secondOperand)
		{


		}

		public static new IfcBooleanClippingResult FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBooleanClippingResult>(json);
		}

		public static new IfcBooleanClippingResult FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbooleanresult.htm"/>
	/// </summary>
	public  partial class IfcBooleanResult : IfcGeometricRepresentationItem
	{
		public IfcBooleanOperator Operator{get;set;} 
		public IfcBooleanOperand FirstOperand{get;set;} 
		public IfcBooleanOperand SecondOperand{get;set;} 

		public IfcBooleanResult(IfcBooleanOperator op,IfcBooleanOperand firstOperand,IfcBooleanOperand secondOperand):base()
		{
			Operator = op;
			FirstOperand = firstOperand;
			SecondOperand = secondOperand;


		}

		public static new IfcBooleanResult FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBooleanResult>(json);
		}

		public static new IfcBooleanResult FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundarycondition.htm"/>
	/// </summary>
	public abstract partial class IfcBoundaryCondition : IfcBase
	{
		public IfcLabel Name{get;set;} // optional

		public IfcBoundaryCondition():base()
		{


		}

		public static  IfcBoundaryCondition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundaryCondition>(json);
		}

		public static  IfcBoundaryCondition FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundaryedgecondition.htm"/>
	/// </summary>
	public  partial class IfcBoundaryEdgeCondition : IfcBoundaryCondition
	{
		public IfcModulusOfTranslationalSubgradeReactionSelect TranslationalStiffnessByLengthX{get;set;} // optional
		public IfcModulusOfTranslationalSubgradeReactionSelect TranslationalStiffnessByLengthY{get;set;} // optional
		public IfcModulusOfTranslationalSubgradeReactionSelect TranslationalStiffnessByLengthZ{get;set;} // optional
		public IfcModulusOfRotationalSubgradeReactionSelect RotationalStiffnessByLengthX{get;set;} // optional
		public IfcModulusOfRotationalSubgradeReactionSelect RotationalStiffnessByLengthY{get;set;} // optional
		public IfcModulusOfRotationalSubgradeReactionSelect RotationalStiffnessByLengthZ{get;set;} // optional

		public IfcBoundaryEdgeCondition():base()
		{


		}

		public static new IfcBoundaryEdgeCondition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundaryEdgeCondition>(json);
		}

		public static new IfcBoundaryEdgeCondition FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundaryfacecondition.htm"/>
	/// </summary>
	public  partial class IfcBoundaryFaceCondition : IfcBoundaryCondition
	{
		public IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaX{get;set;} // optional
		public IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaY{get;set;} // optional
		public IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaZ{get;set;} // optional

		public IfcBoundaryFaceCondition():base()
		{


		}

		public static new IfcBoundaryFaceCondition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundaryFaceCondition>(json);
		}

		public static new IfcBoundaryFaceCondition FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundarynodecondition.htm"/>
	/// </summary>
	public  partial class IfcBoundaryNodeCondition : IfcBoundaryCondition
	{
		public IfcTranslationalStiffnessSelect TranslationalStiffnessX{get;set;} // optional
		public IfcTranslationalStiffnessSelect TranslationalStiffnessY{get;set;} // optional
		public IfcTranslationalStiffnessSelect TranslationalStiffnessZ{get;set;} // optional
		public IfcRotationalStiffnessSelect RotationalStiffnessX{get;set;} // optional
		public IfcRotationalStiffnessSelect RotationalStiffnessY{get;set;} // optional
		public IfcRotationalStiffnessSelect RotationalStiffnessZ{get;set;} // optional

		public IfcBoundaryNodeCondition():base()
		{


		}

		public static new IfcBoundaryNodeCondition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundaryNodeCondition>(json);
		}

		public static new IfcBoundaryNodeCondition FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundarycurve.htm"/>
	/// </summary>
	public  partial class IfcBoundaryCurve : IfcCompositeCurveOnSurface
	{

		public IfcBoundaryCurve(List<IfcCompositeCurveSegment> segments,bool? selfIntersect):base(segments,selfIntersect)
		{


		}

		public static new IfcBoundaryCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundaryCurve>(json);
		}

		public static new IfcBoundaryCurve FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcouterboundarycurve.htm"/>
	/// </summary>
	public  partial class IfcOuterBoundaryCurve : IfcBoundaryCurve
	{

		public IfcOuterBoundaryCurve(List<IfcCompositeCurveSegment> segments,bool? selfIntersect):base(segments,selfIntersect)
		{


		}

		public static new IfcOuterBoundaryCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOuterBoundaryCurve>(json);
		}

		public static new IfcOuterBoundaryCurve FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccompositecurveonsurface.htm"/>
	/// </summary>
	public  partial class IfcCompositeCurveOnSurface : IfcCompositeCurve
	{

		public IfcCompositeCurveOnSurface(List<IfcCompositeCurveSegment> segments,bool? selfIntersect):base(segments,selfIntersect)
		{


		}

		public static new IfcCompositeCurveOnSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCompositeCurveOnSurface>(json);
		}

		public static new IfcCompositeCurveOnSurface FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundarynodeconditionwarping.htm"/>
	/// </summary>
	public  partial class IfcBoundaryNodeConditionWarping : IfcBoundaryNodeCondition
	{
		public IfcWarpingStiffnessSelect WarpingStiffness{get;set;} // optional

		public IfcBoundaryNodeConditionWarping():base()
		{


		}

		public static new IfcBoundaryNodeConditionWarping FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundaryNodeConditionWarping>(json);
		}

		public static new IfcBoundaryNodeConditionWarping FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccompositecurve.htm"/>
	/// </summary>
	public  partial class IfcCompositeCurve : IfcBoundedCurve
	{
		public List<IfcCompositeCurveSegment> Segments{get;set;} 
		public bool? SelfIntersect{get;set;} 

		public IfcCompositeCurve(List<IfcCompositeCurveSegment> segments,bool? selfIntersect):base()
		{
			Segments = segments;
			SelfIntersect = selfIntersect;


		}

		public static new IfcCompositeCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCompositeCurve>(json);
		}

		public static new IfcCompositeCurve FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpolyline.htm"/>
	/// </summary>
	public  partial class IfcPolyline : IfcBoundedCurve
	{
		public List<IfcCartesianPoint> Points{get;set;} 

		public IfcPolyline(List<IfcCartesianPoint> points):base()
		{
			Points = points;


		}

		public static new IfcPolyline FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPolyline>(json);
		}

		public static new IfcPolyline FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctrimmedcurve.htm"/>
	/// </summary>
	public  partial class IfcTrimmedCurve : IfcBoundedCurve
	{
		public IfcCurve BasisCurve{get;set;} 
		public List<IfcTrimmingSelect> Trim1{get;set;} 
		public List<IfcTrimmingSelect> Trim2{get;set;} 
		public bool SenseAgreement{get;set;} 
		public IfcTrimmingPreference MasterRepresentation{get;set;} 

		public IfcTrimmedCurve(IfcCurve basisCurve,List<IfcTrimmingSelect> trim1,List<IfcTrimmingSelect> trim2,bool senseAgreement,IfcTrimmingPreference masterRepresentation):base()
		{
			BasisCurve = basisCurve;
			Trim1 = trim1;
			Trim2 = trim2;
			SenseAgreement = senseAgreement;
			MasterRepresentation = masterRepresentation;


		}

		public static new IfcTrimmedCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTrimmedCurve>(json);
		}

		public static new IfcTrimmedCurve FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurve.htm"/>
	/// </summary>
	public abstract partial class IfcCurve : IfcGeometricRepresentationItem
	{

		public IfcCurve():base()
		{


		}

		public static new IfcCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurve>(json);
		}

		public static new IfcCurve FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurveboundedplane.htm"/>
	/// </summary>
	public  partial class IfcCurveBoundedPlane : IfcBoundedSurface
	{
		public IfcPlane BasisSurface{get;set;} 
		public IfcCurve OuterBoundary{get;set;} 
		public List<IfcCurve> InnerBoundaries{get;set;} 

		public IfcCurveBoundedPlane(IfcPlane basisSurface,IfcCurve outerBoundary,List<IfcCurve> innerBoundaries):base()
		{
			BasisSurface = basisSurface;
			OuterBoundary = outerBoundary;
			InnerBoundaries = innerBoundaries;


		}

		public static new IfcCurveBoundedPlane FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveBoundedPlane>(json);
		}

		public static new IfcCurveBoundedPlane FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurveboundedsurface.htm"/>
	/// </summary>
	public  partial class IfcCurveBoundedSurface : IfcBoundedSurface
	{
		public IfcSurface BasisSurface{get;set;} 
		public List<IfcBoundaryCurve> Boundaries{get;set;} 
		public bool ImplicitOuter{get;set;} 

		public IfcCurveBoundedSurface(IfcSurface basisSurface,List<IfcBoundaryCurve> boundaries,bool implicitOuter):base()
		{
			BasisSurface = basisSurface;
			Boundaries = boundaries;
			ImplicitOuter = implicitOuter;


		}

		public static new IfcCurveBoundedSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveBoundedSurface>(json);
		}

		public static new IfcCurveBoundedSurface FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrectangulartrimmedsurface.htm"/>
	/// </summary>
	public  partial class IfcRectangularTrimmedSurface : IfcBoundedSurface
	{
		public IfcSurface BasisSurface{get;set;} 
		public IfcParameterValue U1{get;set;} 
		public IfcParameterValue V1{get;set;} 
		public IfcParameterValue U2{get;set;} 
		public IfcParameterValue V2{get;set;} 
		public bool Usense{get;set;} 
		public bool Vsense{get;set;} 

		public IfcRectangularTrimmedSurface(IfcSurface basisSurface,IfcParameterValue u1,IfcParameterValue v1,IfcParameterValue u2,IfcParameterValue v2,bool usense,bool vsense):base()
		{
			BasisSurface = basisSurface;
			U1 = u1;
			V1 = v1;
			U2 = u2;
			V2 = v2;
			Usense = usense;
			Vsense = vsense;


		}

		public static new IfcRectangularTrimmedSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRectangularTrimmedSurface>(json);
		}

		public static new IfcRectangularTrimmedSurface FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurface.htm"/>
	/// </summary>
	public abstract partial class IfcSurface : IfcGeometricRepresentationItem
	{

		public IfcSurface():base()
		{


		}

		public static new IfcSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurface>(json);
		}

		public static new IfcSurface FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboundingbox.htm"/>
	/// </summary>
	public  partial class IfcBoundingBox : IfcGeometricRepresentationItem
	{
		public IfcCartesianPoint Corner{get;set;} 
		public IfcPositiveLengthMeasure XDim{get;set;} 
		public IfcPositiveLengthMeasure YDim{get;set;} 
		public IfcPositiveLengthMeasure ZDim{get;set;} 

		public IfcBoundingBox(IfcCartesianPoint corner,IfcPositiveLengthMeasure xDim,IfcPositiveLengthMeasure yDim,IfcPositiveLengthMeasure zDim):base()
		{
			Corner = corner;
			XDim = xDim;
			YDim = yDim;
			ZDim = zDim;


		}

		public static new IfcBoundingBox FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoundingBox>(json);
		}

		public static new IfcBoundingBox FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcboxedhalfspace.htm"/>
	/// </summary>
	public  partial class IfcBoxedHalfSpace : IfcHalfSpaceSolid
	{
		public IfcBoundingBox Enclosure{get;set;} 

		public IfcBoxedHalfSpace(IfcBoundingBox enclosure,IfcSurface baseSurface,bool agreementFlag):base(baseSurface,agreementFlag)
		{
			Enclosure = enclosure;


		}

		public static new IfcBoxedHalfSpace FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBoxedHalfSpace>(json);
		}

		public static new IfcBoxedHalfSpace FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifchalfspacesolid.htm"/>
	/// </summary>
	public  partial class IfcHalfSpaceSolid : IfcGeometricRepresentationItem
	{
		public IfcSurface BaseSurface{get;set;} 
		public bool AgreementFlag{get;set;} 

		public IfcHalfSpaceSolid(IfcSurface baseSurface,bool agreementFlag):base()
		{
			BaseSurface = baseSurface;
			AgreementFlag = agreementFlag;


		}

		public static new IfcHalfSpaceSolid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcHalfSpaceSolid>(json);
		}

		public static new IfcHalfSpaceSolid FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuilding.htm"/>
	/// </summary>
	public  partial class IfcBuilding : IfcSpatialStructureElement
	{
		public IfcLengthMeasure ElevationOfRefHeight{get;set;} // optional
		public IfcLengthMeasure ElevationOfTerrain{get;set;} // optional
		public IfcPostalAddress BuildingAddress{get;set;} // optional

		public IfcBuilding(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcBuilding FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuilding>(json);
		}

		public static new IfcBuilding FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspatialstructureelement.htm"/>
	/// </summary>
	public abstract partial class IfcSpatialStructureElement : IfcSpatialElement
	{
		public IfcElementCompositionEnum CompositionType{get;set;} // optional

		public IfcSpatialStructureElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSpatialStructureElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpatialStructureElement>(json);
		}

		public static new IfcSpatialStructureElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingelementproxy.htm"/>
	/// </summary>
	public  partial class IfcBuildingElementProxy : IfcBuildingElement
	{
		public IfcBuildingElementProxyTypeEnum PredefinedType{get;set;} // optional

		public IfcBuildingElementProxy(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcBuildingElementProxy FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuildingElementProxy>(json);
		}

		public static new IfcBuildingElementProxy FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcchimney.htm"/>
	/// </summary>
	public  partial class IfcChimney : IfcBuildingElement
	{
		public IfcChimneyTypeEnum PredefinedType{get;set;} // optional

		public IfcChimney(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcChimney FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcChimney>(json);
		}

		public static new IfcChimney FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolumn.htm"/>
	/// </summary>
	public  partial class IfcColumn : IfcBuildingElement
	{
		public IfcColumnTypeEnum PredefinedType{get;set;} // optional

		public IfcColumn(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcColumn FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcColumn>(json);
		}

		public static new IfcColumn FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccovering.htm"/>
	/// </summary>
	public  partial class IfcCovering : IfcBuildingElement
	{
		public IfcCoveringTypeEnum PredefinedType{get;set;} // optional

		public IfcCovering(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcCovering FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCovering>(json);
		}

		public static new IfcCovering FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurtainwall.htm"/>
	/// </summary>
	public  partial class IfcCurtainWall : IfcBuildingElement
	{
		public IfcCurtainWallTypeEnum PredefinedType{get;set;} // optional

		public IfcCurtainWall(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcCurtainWall FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurtainWall>(json);
		}

		public static new IfcCurtainWall FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoor.htm"/>
	/// </summary>
	public  partial class IfcDoor : IfcBuildingElement
	{
		public IfcPositiveLengthMeasure OverallHeight{get;set;} // optional
		public IfcPositiveLengthMeasure OverallWidth{get;set;} // optional
		public IfcDoorTypeEnum PredefinedType{get;set;} // optional
		public IfcDoorTypeOperationEnum OperationType{get;set;} // optional
		public IfcLabel UserDefinedOperationType{get;set;} // optional

		public IfcDoor(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDoor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDoor>(json);
		}

		public static new IfcDoor FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfooting.htm"/>
	/// </summary>
	public  partial class IfcFooting : IfcBuildingElement
	{
		public IfcFootingTypeEnum PredefinedType{get;set;} // optional

		public IfcFooting(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFooting FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFooting>(json);
		}

		public static new IfcFooting FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmember.htm"/>
	/// </summary>
	public  partial class IfcMember : IfcBuildingElement
	{
		public IfcMemberTypeEnum PredefinedType{get;set;} // optional

		public IfcMember(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcMember FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMember>(json);
		}

		public static new IfcMember FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpile.htm"/>
	/// </summary>
	public  partial class IfcPile : IfcBuildingElement
	{
		public IfcPileTypeEnum PredefinedType{get;set;} // optional
		public IfcPileConstructionEnum ConstructionType{get;set;} // optional

		public IfcPile(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcPile FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPile>(json);
		}

		public static new IfcPile FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplate.htm"/>
	/// </summary>
	public  partial class IfcPlate : IfcBuildingElement
	{
		public IfcPlateTypeEnum PredefinedType{get;set;} // optional

		public IfcPlate(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcPlate FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlate>(json);
		}

		public static new IfcPlate FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrailing.htm"/>
	/// </summary>
	public  partial class IfcRailing : IfcBuildingElement
	{
		public IfcRailingTypeEnum PredefinedType{get;set;} // optional

		public IfcRailing(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcRailing FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRailing>(json);
		}

		public static new IfcRailing FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcramp.htm"/>
	/// </summary>
	public  partial class IfcRamp : IfcBuildingElement
	{
		public IfcRampTypeEnum PredefinedType{get;set;} // optional

		public IfcRamp(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcRamp FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRamp>(json);
		}

		public static new IfcRamp FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrampflight.htm"/>
	/// </summary>
	public  partial class IfcRampFlight : IfcBuildingElement
	{
		public IfcRampFlightTypeEnum PredefinedType{get;set;} // optional

		public IfcRampFlight(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcRampFlight FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRampFlight>(json);
		}

		public static new IfcRampFlight FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcroof.htm"/>
	/// </summary>
	public  partial class IfcRoof : IfcBuildingElement
	{
		public IfcRoofTypeEnum PredefinedType{get;set;} // optional

		public IfcRoof(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcRoof FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRoof>(json);
		}

		public static new IfcRoof FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshadingdevice.htm"/>
	/// </summary>
	public  partial class IfcShadingDevice : IfcBuildingElement
	{
		public IfcShadingDeviceTypeEnum PredefinedType{get;set;} // optional

		public IfcShadingDevice(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcShadingDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcShadingDevice>(json);
		}

		public static new IfcShadingDevice FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcslab.htm"/>
	/// </summary>
	public  partial class IfcSlab : IfcBuildingElement
	{
		public IfcSlabTypeEnum PredefinedType{get;set;} // optional

		public IfcSlab(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSlab FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSlab>(json);
		}

		public static new IfcSlab FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstair.htm"/>
	/// </summary>
	public  partial class IfcStair : IfcBuildingElement
	{
		public IfcStairTypeEnum PredefinedType{get;set;} // optional

		public IfcStair(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcStair FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStair>(json);
		}

		public static new IfcStair FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstairflight.htm"/>
	/// </summary>
	public  partial class IfcStairFlight : IfcBuildingElement
	{
		public int NumberOfRiser{get;set;} // optional
		public int NumberOfTreads{get;set;} // optional
		public IfcPositiveLengthMeasure RiserHeight{get;set;} // optional
		public IfcPositiveLengthMeasure TreadLength{get;set;} // optional
		public IfcStairFlightTypeEnum PredefinedType{get;set;} // optional

		public IfcStairFlight(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcStairFlight FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStairFlight>(json);
		}

		public static new IfcStairFlight FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwall.htm"/>
	/// </summary>
	public  partial class IfcWall : IfcBuildingElement
	{
		public IfcWallTypeEnum PredefinedType{get;set;} // optional

		public IfcWall(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcWall FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWall>(json);
		}

		public static new IfcWall FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindow.htm"/>
	/// </summary>
	public  partial class IfcWindow : IfcBuildingElement
	{
		public IfcPositiveLengthMeasure OverallHeight{get;set;} // optional
		public IfcPositiveLengthMeasure OverallWidth{get;set;} // optional
		public IfcWindowTypeEnum PredefinedType{get;set;} // optional
		public IfcWindowTypePartitioningEnum PartitioningType{get;set;} // optional
		public IfcLabel UserDefinedPartitioningType{get;set;} // optional

		public IfcWindow(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcWindow FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWindow>(json);
		}

		public static new IfcWindow FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelement.htm"/>
	/// </summary>
	public abstract partial class IfcElement : IfcProduct
	{
		public IfcIdentifier Tag{get;set;} // optional

		public IfcElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElement>(json);
		}

		public static new IfcElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingelementpart.htm"/>
	/// </summary>
	public  partial class IfcBuildingElementPart : IfcElementComponent
	{
		public IfcBuildingElementPartTypeEnum PredefinedType{get;set;} // optional

		public IfcBuildingElementPart(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcBuildingElementPart FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuildingElementPart>(json);
		}

		public static new IfcBuildingElementPart FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementcomponent.htm"/>
	/// </summary>
	public abstract partial class IfcElementComponent : IfcElement
	{

		public IfcElementComponent(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcElementComponent FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElementComponent>(json);
		}

		public static new IfcElementComponent FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingelementparttype.htm"/>
	/// </summary>
	public  partial class IfcBuildingElementPartType : IfcElementComponentType
	{
		public IfcBuildingElementPartTypeEnum PredefinedType{get;set;} 

		public IfcBuildingElementPartType(IfcBuildingElementPartTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcBuildingElementPartType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuildingElementPartType>(json);
		}

		public static new IfcBuildingElementPartType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementcomponenttype.htm"/>
	/// </summary>
	public abstract partial class IfcElementComponentType : IfcElementType
	{

		public IfcElementComponentType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcElementComponentType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElementComponentType>(json);
		}

		public static new IfcElementComponentType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingelementproxytype.htm"/>
	/// </summary>
	public  partial class IfcBuildingElementProxyType : IfcBuildingElementType
	{
		public IfcBuildingElementProxyTypeEnum PredefinedType{get;set;} 

		public IfcBuildingElementProxyType(IfcBuildingElementProxyTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcBuildingElementProxyType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuildingElementProxyType>(json);
		}

		public static new IfcBuildingElementProxyType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcchimneytype.htm"/>
	/// </summary>
	public  partial class IfcChimneyType : IfcBuildingElementType
	{
		public IfcChimneyTypeEnum PredefinedType{get;set;} 

		public IfcChimneyType(IfcChimneyTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcChimneyType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcChimneyType>(json);
		}

		public static new IfcChimneyType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolumntype.htm"/>
	/// </summary>
	public  partial class IfcColumnType : IfcBuildingElementType
	{
		public IfcColumnTypeEnum PredefinedType{get;set;} 

		public IfcColumnType(IfcColumnTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcColumnType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcColumnType>(json);
		}

		public static new IfcColumnType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoveringtype.htm"/>
	/// </summary>
	public  partial class IfcCoveringType : IfcBuildingElementType
	{
		public IfcCoveringTypeEnum PredefinedType{get;set;} 

		public IfcCoveringType(IfcCoveringTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcCoveringType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCoveringType>(json);
		}

		public static new IfcCoveringType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurtainwalltype.htm"/>
	/// </summary>
	public  partial class IfcCurtainWallType : IfcBuildingElementType
	{
		public IfcCurtainWallTypeEnum PredefinedType{get;set;} 

		public IfcCurtainWallType(IfcCurtainWallTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcCurtainWallType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurtainWallType>(json);
		}

		public static new IfcCurtainWallType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoortype.htm"/>
	/// </summary>
	public  partial class IfcDoorType : IfcBuildingElementType
	{
		public IfcDoorTypeEnum PredefinedType{get;set;} 
		public IfcDoorTypeOperationEnum OperationType{get;set;} 
		public bool ParameterTakesPrecedence{get;set;} // optional
		public IfcLabel UserDefinedOperationType{get;set;} // optional

		public IfcDoorType(IfcDoorTypeEnum predefinedType,IfcDoorTypeOperationEnum operationType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;
			OperationType = operationType;


		}

		public static new IfcDoorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDoorType>(json);
		}

		public static new IfcDoorType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfootingtype.htm"/>
	/// </summary>
	public  partial class IfcFootingType : IfcBuildingElementType
	{
		public IfcFootingTypeEnum PredefinedType{get;set;} 

		public IfcFootingType(IfcFootingTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcFootingType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFootingType>(json);
		}

		public static new IfcFootingType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmembertype.htm"/>
	/// </summary>
	public  partial class IfcMemberType : IfcBuildingElementType
	{
		public IfcMemberTypeEnum PredefinedType{get;set;} 

		public IfcMemberType(IfcMemberTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcMemberType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMemberType>(json);
		}

		public static new IfcMemberType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpiletype.htm"/>
	/// </summary>
	public  partial class IfcPileType : IfcBuildingElementType
	{
		public IfcPileTypeEnum PredefinedType{get;set;} 

		public IfcPileType(IfcPileTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcPileType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPileType>(json);
		}

		public static new IfcPileType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplatetype.htm"/>
	/// </summary>
	public  partial class IfcPlateType : IfcBuildingElementType
	{
		public IfcPlateTypeEnum PredefinedType{get;set;} 

		public IfcPlateType(IfcPlateTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcPlateType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlateType>(json);
		}

		public static new IfcPlateType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrailingtype.htm"/>
	/// </summary>
	public  partial class IfcRailingType : IfcBuildingElementType
	{
		public IfcRailingTypeEnum PredefinedType{get;set;} 

		public IfcRailingType(IfcRailingTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcRailingType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRailingType>(json);
		}

		public static new IfcRailingType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrampflighttype.htm"/>
	/// </summary>
	public  partial class IfcRampFlightType : IfcBuildingElementType
	{
		public IfcRampFlightTypeEnum PredefinedType{get;set;} 

		public IfcRampFlightType(IfcRampFlightTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcRampFlightType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRampFlightType>(json);
		}

		public static new IfcRampFlightType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcramptype.htm"/>
	/// </summary>
	public  partial class IfcRampType : IfcBuildingElementType
	{
		public IfcRampTypeEnum PredefinedType{get;set;} 

		public IfcRampType(IfcRampTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcRampType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRampType>(json);
		}

		public static new IfcRampType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrooftype.htm"/>
	/// </summary>
	public  partial class IfcRoofType : IfcBuildingElementType
	{
		public IfcRoofTypeEnum PredefinedType{get;set;} 

		public IfcRoofType(IfcRoofTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcRoofType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRoofType>(json);
		}

		public static new IfcRoofType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshadingdevicetype.htm"/>
	/// </summary>
	public  partial class IfcShadingDeviceType : IfcBuildingElementType
	{
		public IfcShadingDeviceTypeEnum PredefinedType{get;set;} 

		public IfcShadingDeviceType(IfcShadingDeviceTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcShadingDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcShadingDeviceType>(json);
		}

		public static new IfcShadingDeviceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcslabtype.htm"/>
	/// </summary>
	public  partial class IfcSlabType : IfcBuildingElementType
	{
		public IfcSlabTypeEnum PredefinedType{get;set;} 

		public IfcSlabType(IfcSlabTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcSlabType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSlabType>(json);
		}

		public static new IfcSlabType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstairflighttype.htm"/>
	/// </summary>
	public  partial class IfcStairFlightType : IfcBuildingElementType
	{
		public IfcStairFlightTypeEnum PredefinedType{get;set;} 

		public IfcStairFlightType(IfcStairFlightTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcStairFlightType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStairFlightType>(json);
		}

		public static new IfcStairFlightType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstairtype.htm"/>
	/// </summary>
	public  partial class IfcStairType : IfcBuildingElementType
	{
		public IfcStairTypeEnum PredefinedType{get;set;} 

		public IfcStairType(IfcStairTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcStairType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStairType>(json);
		}

		public static new IfcStairType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwalltype.htm"/>
	/// </summary>
	public  partial class IfcWallType : IfcBuildingElementType
	{
		public IfcWallTypeEnum PredefinedType{get;set;} 

		public IfcWallType(IfcWallTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcWallType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWallType>(json);
		}

		public static new IfcWallType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowtype.htm"/>
	/// </summary>
	public  partial class IfcWindowType : IfcBuildingElementType
	{
		public IfcWindowTypeEnum PredefinedType{get;set;} 
		public IfcWindowTypePartitioningEnum PartitioningType{get;set;} 
		public bool ParameterTakesPrecedence{get;set;} // optional
		public IfcLabel UserDefinedPartitioningType{get;set;} // optional

		public IfcWindowType(IfcWindowTypeEnum predefinedType,IfcWindowTypePartitioningEnum partitioningType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;
			PartitioningType = partitioningType;


		}

		public static new IfcWindowType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWindowType>(json);
		}

		public static new IfcWindowType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementtype.htm"/>
	/// </summary>
	public abstract partial class IfcElementType : IfcTypeProduct
	{
		public IfcLabel ElementType{get;set;} // optional

		public IfcElementType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElementType>(json);
		}

		public static new IfcElementType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingstorey.htm"/>
	/// </summary>
	public  partial class IfcBuildingStorey : IfcSpatialStructureElement
	{
		public IfcLengthMeasure Elevation{get;set;} // optional

		public IfcBuildingStorey(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcBuildingStorey FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuildingStorey>(json);
		}

		public static new IfcBuildingStorey FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcbuildingsystem.htm"/>
	/// </summary>
	public  partial class IfcBuildingSystem : IfcSystem
	{
		public IfcBuildingSystemTypeEnum PredefinedType{get;set;} // optional

		public IfcBuildingSystem(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcBuildingSystem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBuildingSystem>(json);
		}

		public static new IfcBuildingSystem FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsystem.htm"/>
	/// </summary>
	public  partial class IfcSystem : IfcGroup
	{

		public IfcSystem(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSystem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSystem>(json);
		}

		public static new IfcSystem FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcburner.htm"/>
	/// </summary>
	public  partial class IfcBurner : IfcEnergyConversionDevice
	{
		public IfcBurnerTypeEnum PredefinedType{get;set;} // optional

		public IfcBurner(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcBurner FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBurner>(json);
		}

		public static new IfcBurner FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcburnertype.htm"/>
	/// </summary>
	public  partial class IfcBurnerType : IfcEnergyConversionDeviceType
	{
		public IfcBurnerTypeEnum PredefinedType{get;set;} 

		public IfcBurnerType(IfcBurnerTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcBurnerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcBurnerType>(json);
		}

		public static new IfcBurnerType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccshapeprofiledef.htm"/>
	/// </summary>
	public  partial class IfcCShapeProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure Depth{get;set;} 
		public IfcPositiveLengthMeasure Width{get;set;} 
		public IfcPositiveLengthMeasure WallThickness{get;set;} 
		public IfcPositiveLengthMeasure Girth{get;set;} 
		public IfcNonNegativeLengthMeasure InternalFilletRadius{get;set;} // optional

		public IfcCShapeProfileDef(IfcPositiveLengthMeasure depth,IfcPositiveLengthMeasure width,IfcPositiveLengthMeasure wallThickness,IfcPositiveLengthMeasure girth,IfcProfileTypeEnum profileType):base(profileType)
		{
			Depth = depth;
			Width = width;
			WallThickness = wallThickness;
			Girth = girth;


		}

		public static new IfcCShapeProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCShapeProfileDef>(json);
		}

		public static new IfcCShapeProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablecarrierfitting.htm"/>
	/// </summary>
	public  partial class IfcCableCarrierFitting : IfcFlowFitting
	{
		public IfcCableCarrierFittingTypeEnum PredefinedType{get;set;} // optional

		public IfcCableCarrierFitting(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcCableCarrierFitting FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCableCarrierFitting>(json);
		}

		public static new IfcCableCarrierFitting FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowfitting.htm"/>
	/// </summary>
	public  partial class IfcFlowFitting : IfcDistributionFlowElement
	{

		public IfcFlowFitting(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFlowFitting FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowFitting>(json);
		}

		public static new IfcFlowFitting FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablecarrierfittingtype.htm"/>
	/// </summary>
	public  partial class IfcCableCarrierFittingType : IfcFlowFittingType
	{
		public IfcCableCarrierFittingTypeEnum PredefinedType{get;set;} 

		public IfcCableCarrierFittingType(IfcCableCarrierFittingTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcCableCarrierFittingType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCableCarrierFittingType>(json);
		}

		public static new IfcCableCarrierFittingType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowfittingtype.htm"/>
	/// </summary>
	public abstract partial class IfcFlowFittingType : IfcDistributionFlowElementType
	{

		public IfcFlowFittingType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFlowFittingType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowFittingType>(json);
		}

		public static new IfcFlowFittingType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablecarriersegment.htm"/>
	/// </summary>
	public  partial class IfcCableCarrierSegment : IfcFlowSegment
	{
		public IfcCableCarrierSegmentTypeEnum PredefinedType{get;set;} // optional

		public IfcCableCarrierSegment(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcCableCarrierSegment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCableCarrierSegment>(json);
		}

		public static new IfcCableCarrierSegment FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowsegment.htm"/>
	/// </summary>
	public  partial class IfcFlowSegment : IfcDistributionFlowElement
	{

		public IfcFlowSegment(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFlowSegment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowSegment>(json);
		}

		public static new IfcFlowSegment FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablecarriersegmenttype.htm"/>
	/// </summary>
	public  partial class IfcCableCarrierSegmentType : IfcFlowSegmentType
	{
		public IfcCableCarrierSegmentTypeEnum PredefinedType{get;set;} 

		public IfcCableCarrierSegmentType(IfcCableCarrierSegmentTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcCableCarrierSegmentType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCableCarrierSegmentType>(json);
		}

		public static new IfcCableCarrierSegmentType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowsegmenttype.htm"/>
	/// </summary>
	public abstract partial class IfcFlowSegmentType : IfcDistributionFlowElementType
	{

		public IfcFlowSegmentType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFlowSegmentType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowSegmentType>(json);
		}

		public static new IfcFlowSegmentType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablefitting.htm"/>
	/// </summary>
	public  partial class IfcCableFitting : IfcFlowFitting
	{
		public IfcCableFittingTypeEnum PredefinedType{get;set;} // optional

		public IfcCableFitting(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcCableFitting FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCableFitting>(json);
		}

		public static new IfcCableFitting FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablefittingtype.htm"/>
	/// </summary>
	public  partial class IfcCableFittingType : IfcFlowFittingType
	{
		public IfcCableFittingTypeEnum PredefinedType{get;set;} 

		public IfcCableFittingType(IfcCableFittingTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcCableFittingType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCableFittingType>(json);
		}

		public static new IfcCableFittingType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablesegment.htm"/>
	/// </summary>
	public  partial class IfcCableSegment : IfcFlowSegment
	{
		public IfcCableSegmentTypeEnum PredefinedType{get;set;} // optional

		public IfcCableSegment(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcCableSegment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCableSegment>(json);
		}

		public static new IfcCableSegment FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccablesegmenttype.htm"/>
	/// </summary>
	public  partial class IfcCableSegmentType : IfcFlowSegmentType
	{
		public IfcCableSegmentTypeEnum PredefinedType{get;set;} 

		public IfcCableSegmentType(IfcCableSegmentTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcCableSegmentType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCableSegmentType>(json);
		}

		public static new IfcCableSegmentType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccartesianpoint.htm"/>
	/// </summary>
	public  partial class IfcCartesianPoint : IfcPoint
	{
		public List<IfcLengthMeasure> Coordinates{get;set;} 

		public IfcCartesianPoint(List<IfcLengthMeasure> coordinates):base()
		{
			Coordinates = coordinates;


		}

		public static new IfcCartesianPoint FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCartesianPoint>(json);
		}

		public static new IfcCartesianPoint FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpoint.htm"/>
	/// </summary>
	public abstract partial class IfcPoint : IfcGeometricRepresentationItem
	{

		public IfcPoint():base()
		{


		}

		public static new IfcPoint FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPoint>(json);
		}

		public static new IfcPoint FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccartesianpointlist.htm"/>
	/// </summary>
	public abstract partial class IfcCartesianPointList : IfcGeometricRepresentationItem
	{

		public IfcCartesianPointList():base()
		{


		}

		public static new IfcCartesianPointList FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCartesianPointList>(json);
		}

		public static new IfcCartesianPointList FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccartesianpointlist3d.htm"/>
	/// </summary>
	public  partial class IfcCartesianPointList3D : IfcCartesianPointList
	{
		public List<List<IfcLengthMeasure>> CoordList{get;set;} 

		public IfcCartesianPointList3D(List<List<IfcLengthMeasure>> coordList):base()
		{
			CoordList = coordList;


		}

		public static new IfcCartesianPointList3D FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCartesianPointList3D>(json);
		}

		public static new IfcCartesianPointList3D FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccartesiantransformationoperator.htm"/>
	/// </summary>
	public abstract partial class IfcCartesianTransformationOperator : IfcGeometricRepresentationItem
	{
		public IfcDirection Axis1{get;set;} // optional
		public IfcDirection Axis2{get;set;} // optional
		public IfcCartesianPoint LocalOrigin{get;set;} 
		public double Scale{get;set;} // optional

		public IfcCartesianTransformationOperator(IfcCartesianPoint localOrigin):base()
		{
			LocalOrigin = localOrigin;


		}

		public static new IfcCartesianTransformationOperator FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCartesianTransformationOperator>(json);
		}

		public static new IfcCartesianTransformationOperator FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccartesiantransformationoperator2d.htm"/>
	/// </summary>
	public  partial class IfcCartesianTransformationOperator2D : IfcCartesianTransformationOperator
	{

		public IfcCartesianTransformationOperator2D(IfcCartesianPoint localOrigin):base(localOrigin)
		{


		}

		public static new IfcCartesianTransformationOperator2D FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCartesianTransformationOperator2D>(json);
		}

		public static new IfcCartesianTransformationOperator2D FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccartesiantransformationoperator3d.htm"/>
	/// </summary>
	public  partial class IfcCartesianTransformationOperator3D : IfcCartesianTransformationOperator
	{
		public IfcDirection Axis3{get;set;} // optional

		public IfcCartesianTransformationOperator3D(IfcCartesianPoint localOrigin):base(localOrigin)
		{


		}

		public static new IfcCartesianTransformationOperator3D FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCartesianTransformationOperator3D>(json);
		}

		public static new IfcCartesianTransformationOperator3D FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccartesiantransformationoperator2dnonuniform.htm"/>
	/// </summary>
	public  partial class IfcCartesianTransformationOperator2DnonUniform : IfcCartesianTransformationOperator2D
	{
		public double Scale2{get;set;} // optional

		public IfcCartesianTransformationOperator2DnonUniform(IfcCartesianPoint localOrigin):base(localOrigin)
		{


		}

		public static new IfcCartesianTransformationOperator2DnonUniform FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCartesianTransformationOperator2DnonUniform>(json);
		}

		public static new IfcCartesianTransformationOperator2DnonUniform FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccartesiantransformationoperator3dnonuniform.htm"/>
	/// </summary>
	public  partial class IfcCartesianTransformationOperator3DnonUniform : IfcCartesianTransformationOperator3D
	{
		public double Scale2{get;set;} // optional
		public double Scale3{get;set;} // optional

		public IfcCartesianTransformationOperator3DnonUniform(IfcCartesianPoint localOrigin):base(localOrigin)
		{


		}

		public static new IfcCartesianTransformationOperator3DnonUniform FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCartesianTransformationOperator3DnonUniform>(json);
		}

		public static new IfcCartesianTransformationOperator3DnonUniform FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcchiller.htm"/>
	/// </summary>
	public  partial class IfcChiller : IfcEnergyConversionDevice
	{
		public IfcChillerTypeEnum PredefinedType{get;set;} // optional

		public IfcChiller(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcChiller FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcChiller>(json);
		}

		public static new IfcChiller FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcchillertype.htm"/>
	/// </summary>
	public  partial class IfcChillerType : IfcEnergyConversionDeviceType
	{
		public IfcChillerTypeEnum PredefinedType{get;set;} 

		public IfcChillerType(IfcChillerTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcChillerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcChillerType>(json);
		}

		public static new IfcChillerType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccircle.htm"/>
	/// </summary>
	public  partial class IfcCircle : IfcConic
	{
		public IfcPositiveLengthMeasure Radius{get;set;} 

		public IfcCircle(IfcPositiveLengthMeasure radius,IfcAxis2Placement position):base(position)
		{
			Radius = radius;


		}

		public static new IfcCircle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCircle>(json);
		}

		public static new IfcCircle FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconic.htm"/>
	/// </summary>
	public abstract partial class IfcConic : IfcCurve
	{
		public IfcAxis2Placement Position{get;set;} 

		public IfcConic(IfcAxis2Placement position):base()
		{
			Position = position;


		}

		public static new IfcConic FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConic>(json);
		}

		public static new IfcConic FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccirclehollowprofiledef.htm"/>
	/// </summary>
	public  partial class IfcCircleHollowProfileDef : IfcCircleProfileDef
	{
		public IfcPositiveLengthMeasure WallThickness{get;set;} 

		public IfcCircleHollowProfileDef(IfcPositiveLengthMeasure wallThickness,IfcPositiveLengthMeasure radius,IfcProfileTypeEnum profileType):base(radius,profileType)
		{
			WallThickness = wallThickness;


		}

		public static new IfcCircleHollowProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCircleHollowProfileDef>(json);
		}

		public static new IfcCircleHollowProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccircleprofiledef.htm"/>
	/// </summary>
	public  partial class IfcCircleProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure Radius{get;set;} 

		public IfcCircleProfileDef(IfcPositiveLengthMeasure radius,IfcProfileTypeEnum profileType):base(profileType)
		{
			Radius = radius;


		}

		public static new IfcCircleProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCircleProfileDef>(json);
		}

		public static new IfcCircleProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccivilelement.htm"/>
	/// </summary>
	public  partial class IfcCivilElement : IfcElement
	{

		public IfcCivilElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcCivilElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCivilElement>(json);
		}

		public static new IfcCivilElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccivilelementtype.htm"/>
	/// </summary>
	public  partial class IfcCivilElementType : IfcElementType
	{

		public IfcCivilElementType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcCivilElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCivilElementType>(json);
		}

		public static new IfcCivilElementType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcclassification.htm"/>
	/// </summary>
	public  partial class IfcClassification : IfcExternalInformation
	{
		public IfcLabel Source{get;set;} // optional
		public IfcLabel Edition{get;set;} // optional
		public IfcDate EditionDate{get;set;} // optional
		public IfcLabel Name{get;set;} 
		public IfcText Description{get;set;} // optional
		public IfcURIReference Location{get;set;} // optional
		public List<IfcIdentifier> ReferenceTokens{get;set;} // optional

		public IfcClassification(IfcLabel name):base()
		{
			Name = name;

			ReferenceTokens = new List<IfcIdentifier>();

		}

		public static new IfcClassification FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcClassification>(json);
		}

		public static new IfcClassification FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternalinformation.htm"/>
	/// </summary>
	public abstract partial class IfcExternalInformation : IfcBase
	{

		public IfcExternalInformation():base()
		{


		}

		public static  IfcExternalInformation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExternalInformation>(json);
		}

		public static  IfcExternalInformation FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcclassificationreference.htm"/>
	/// </summary>
	public  partial class IfcClassificationReference : IfcExternalReference
	{
		public IfcClassificationReferenceSelect ReferencedSource{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcIdentifier Sort{get;set;} // optional

		public IfcClassificationReference():base()
		{


		}

		public static new IfcClassificationReference FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcClassificationReference>(json);
		}

		public static new IfcClassificationReference FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternalreference.htm"/>
	/// </summary>
	public abstract partial class IfcExternalReference : IfcBase
	{
		public IfcURIReference Location{get;set;} // optional
		public IfcIdentifier Identification{get;set;} // optional
		public IfcLabel Name{get;set;} // optional

		public IfcExternalReference():base()
		{


		}

		public static  IfcExternalReference FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExternalReference>(json);
		}

		public static  IfcExternalReference FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcclosedshell.htm"/>
	/// </summary>
	public  partial class IfcClosedShell : IfcConnectedFaceSet
	{

		public IfcClosedShell(List<IfcFace> cfsFaces):base(cfsFaces)
		{


		}

		public static new IfcClosedShell FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcClosedShell>(json);
		}

		public static new IfcClosedShell FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconnectedfaceset.htm"/>
	/// </summary>
	public  partial class IfcConnectedFaceSet : IfcTopologicalRepresentationItem
	{
		public List<IfcFace> CfsFaces{get;set;} 

		public IfcConnectedFaceSet(List<IfcFace> cfsFaces):base()
		{
			CfsFaces = cfsFaces;


		}

		public static new IfcConnectedFaceSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConnectedFaceSet>(json);
		}

		public static new IfcConnectedFaceSet FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoil.htm"/>
	/// </summary>
	public  partial class IfcCoil : IfcEnergyConversionDevice
	{
		public IfcCoilTypeEnum PredefinedType{get;set;} // optional

		public IfcCoil(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcCoil FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCoil>(json);
		}

		public static new IfcCoil FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoiltype.htm"/>
	/// </summary>
	public  partial class IfcCoilType : IfcEnergyConversionDeviceType
	{
		public IfcCoilTypeEnum PredefinedType{get;set;} 

		public IfcCoilType(IfcCoilTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcCoilType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCoilType>(json);
		}

		public static new IfcCoilType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolourrgb.htm"/>
	/// </summary>
	public  partial class IfcColourRgb : IfcColourSpecification
	{
		public IfcNormalisedRatioMeasure Red{get;set;} 
		public IfcNormalisedRatioMeasure Green{get;set;} 
		public IfcNormalisedRatioMeasure Blue{get;set;} 

		public IfcColourRgb(IfcNormalisedRatioMeasure red,IfcNormalisedRatioMeasure green,IfcNormalisedRatioMeasure blue):base()
		{
			Red = red;
			Green = green;
			Blue = blue;


		}

		public static new IfcColourRgb FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcColourRgb>(json);
		}

		public static new IfcColourRgb FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolourspecification.htm"/>
	/// </summary>
	public abstract partial class IfcColourSpecification : IfcPresentationItem
	{
		public IfcLabel Name{get;set;} // optional

		public IfcColourSpecification():base()
		{


		}

		public static new IfcColourSpecification FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcColourSpecification>(json);
		}

		public static new IfcColourSpecification FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolourrgblist.htm"/>
	/// </summary>
	public  partial class IfcColourRgbList : IfcPresentationItem
	{
		public List<List<IfcNormalisedRatioMeasure>> ColourList{get;set;} 

		public IfcColourRgbList(List<List<IfcNormalisedRatioMeasure>> colourList):base()
		{
			ColourList = colourList;


		}

		public static new IfcColourRgbList FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcColourRgbList>(json);
		}

		public static new IfcColourRgbList FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpresentationitem.htm"/>
	/// </summary>
	public abstract partial class IfcPresentationItem : IfcBase
	{

		public IfcPresentationItem():base()
		{


		}

		public static  IfcPresentationItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPresentationItem>(json);
		}

		public static  IfcPresentationItem FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccolumnstandardcase.htm"/>
	/// </summary>
	public  partial class IfcColumnStandardCase : IfcColumn
	{

		public IfcColumnStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcColumnStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcColumnStandardCase>(json);
		}

		public static new IfcColumnStandardCase FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccommunicationsappliance.htm"/>
	/// </summary>
	public  partial class IfcCommunicationsAppliance : IfcFlowTerminal
	{
		public IfcCommunicationsApplianceTypeEnum PredefinedType{get;set;} // optional

		public IfcCommunicationsAppliance(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcCommunicationsAppliance FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCommunicationsAppliance>(json);
		}

		public static new IfcCommunicationsAppliance FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccommunicationsappliancetype.htm"/>
	/// </summary>
	public  partial class IfcCommunicationsApplianceType : IfcFlowTerminalType
	{
		public IfcCommunicationsApplianceTypeEnum PredefinedType{get;set;} 

		public IfcCommunicationsApplianceType(IfcCommunicationsApplianceTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcCommunicationsApplianceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCommunicationsApplianceType>(json);
		}

		public static new IfcCommunicationsApplianceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccomplexproperty.htm"/>
	/// </summary>
	public  partial class IfcComplexProperty : IfcProperty
	{
		public IfcIdentifier UsageName{get;set;} 
		public List<IfcProperty> HasProperties{get;set;} 

		public IfcComplexProperty(IfcIdentifier usageName,List<IfcProperty> hasProperties,IfcIdentifier name):base(name)
		{
			UsageName = usageName;
			HasProperties = hasProperties;


		}

		public static new IfcComplexProperty FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcComplexProperty>(json);
		}

		public static new IfcComplexProperty FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproperty.htm"/>
	/// </summary>
	public abstract partial class IfcProperty : IfcPropertyAbstraction
	{
		public IfcIdentifier Name{get;set;} 
		public IfcText Description{get;set;} // optional

		public IfcProperty(IfcIdentifier name):base()
		{
			Name = name;


		}

		public static new IfcProperty FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProperty>(json);
		}

		public static new IfcProperty FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccomplexpropertytemplate.htm"/>
	/// </summary>
	public  partial class IfcComplexPropertyTemplate : IfcPropertyTemplate
	{
		public IfcLabel UsageName{get;set;} // optional
		public IfcComplexPropertyTemplateTypeEnum TemplateType{get;set;} // optional
		public List<IfcPropertyTemplate> HasPropertyTemplates{get;set;} // optional

		public IfcComplexPropertyTemplate(IfcGloballyUniqueId globalId):base(globalId)
		{

			HasPropertyTemplates = new List<IfcPropertyTemplate>();

		}

		public static new IfcComplexPropertyTemplate FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcComplexPropertyTemplate>(json);
		}

		public static new IfcComplexPropertyTemplate FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertytemplate.htm"/>
	/// </summary>
	public abstract partial class IfcPropertyTemplate : IfcPropertyTemplateDefinition
	{

		public IfcPropertyTemplate(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcPropertyTemplate FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyTemplate>(json);
		}

		public static new IfcPropertyTemplate FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccompositecurvesegment.htm"/>
	/// </summary>
	public  partial class IfcCompositeCurveSegment : IfcGeometricRepresentationItem
	{
		public IfcTransitionCode Transition{get;set;} 
		public bool SameSense{get;set;} 
		public IfcCurve ParentCurve{get;set;} 

		public IfcCompositeCurveSegment(IfcTransitionCode transition,bool sameSense,IfcCurve parentCurve):base()
		{
			Transition = transition;
			SameSense = sameSense;
			ParentCurve = parentCurve;


		}

		public static new IfcCompositeCurveSegment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCompositeCurveSegment>(json);
		}

		public static new IfcCompositeCurveSegment FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreparametrisedcompositecurvesegment.htm"/>
	/// </summary>
	public  partial class IfcReparametrisedCompositeCurveSegment : IfcCompositeCurveSegment
	{
		public IfcParameterValue ParamLength{get;set;} 

		public IfcReparametrisedCompositeCurveSegment(IfcParameterValue paramLength,IfcTransitionCode transition,bool sameSense,IfcCurve parentCurve):base(transition,sameSense,parentCurve)
		{
			ParamLength = paramLength;


		}

		public static new IfcReparametrisedCompositeCurveSegment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReparametrisedCompositeCurveSegment>(json);
		}

		public static new IfcReparametrisedCompositeCurveSegment FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccompositeprofiledef.htm"/>
	/// </summary>
	public  partial class IfcCompositeProfileDef : IfcProfileDef
	{
		public List<IfcProfileDef> Profiles{get;set;} 
		public IfcLabel Label{get;set;} // optional

		public IfcCompositeProfileDef(List<IfcProfileDef> profiles,IfcProfileTypeEnum profileType):base(profileType)
		{
			Profiles = profiles;


		}

		public static new IfcCompositeProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCompositeProfileDef>(json);
		}

		public static new IfcCompositeProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccompressor.htm"/>
	/// </summary>
	public  partial class IfcCompressor : IfcFlowMovingDevice
	{
		public IfcCompressorTypeEnum PredefinedType{get;set;} // optional

		public IfcCompressor(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcCompressor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCompressor>(json);
		}

		public static new IfcCompressor FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowmovingdevice.htm"/>
	/// </summary>
	public  partial class IfcFlowMovingDevice : IfcDistributionFlowElement
	{

		public IfcFlowMovingDevice(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFlowMovingDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowMovingDevice>(json);
		}

		public static new IfcFlowMovingDevice FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccompressortype.htm"/>
	/// </summary>
	public  partial class IfcCompressorType : IfcFlowMovingDeviceType
	{
		public IfcCompressorTypeEnum PredefinedType{get;set;} 

		public IfcCompressorType(IfcCompressorTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcCompressorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCompressorType>(json);
		}

		public static new IfcCompressorType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowmovingdevicetype.htm"/>
	/// </summary>
	public abstract partial class IfcFlowMovingDeviceType : IfcDistributionFlowElementType
	{

		public IfcFlowMovingDeviceType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFlowMovingDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowMovingDeviceType>(json);
		}

		public static new IfcFlowMovingDeviceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccondenser.htm"/>
	/// </summary>
	public  partial class IfcCondenser : IfcEnergyConversionDevice
	{
		public IfcCondenserTypeEnum PredefinedType{get;set;} // optional

		public IfcCondenser(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcCondenser FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCondenser>(json);
		}

		public static new IfcCondenser FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccondensertype.htm"/>
	/// </summary>
	public  partial class IfcCondenserType : IfcEnergyConversionDeviceType
	{
		public IfcCondenserTypeEnum PredefinedType{get;set;} 

		public IfcCondenserType(IfcCondenserTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcCondenserType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCondenserType>(json);
		}

		public static new IfcCondenserType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcellipse.htm"/>
	/// </summary>
	public  partial class IfcEllipse : IfcConic
	{
		public IfcPositiveLengthMeasure SemiAxis1{get;set;} 
		public IfcPositiveLengthMeasure SemiAxis2{get;set;} 

		public IfcEllipse(IfcPositiveLengthMeasure semiAxis1,IfcPositiveLengthMeasure semiAxis2,IfcAxis2Placement position):base(position)
		{
			SemiAxis1 = semiAxis1;
			SemiAxis2 = semiAxis2;


		}

		public static new IfcEllipse FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEllipse>(json);
		}

		public static new IfcEllipse FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcopenshell.htm"/>
	/// </summary>
	public  partial class IfcOpenShell : IfcConnectedFaceSet
	{

		public IfcOpenShell(List<IfcFace> cfsFaces):base(cfsFaces)
		{


		}

		public static new IfcOpenShell FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOpenShell>(json);
		}

		public static new IfcOpenShell FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctopologicalrepresentationitem.htm"/>
	/// </summary>
	public abstract partial class IfcTopologicalRepresentationItem : IfcRepresentationItem
	{

		public IfcTopologicalRepresentationItem():base()
		{


		}

		public static new IfcTopologicalRepresentationItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTopologicalRepresentationItem>(json);
		}

		public static new IfcTopologicalRepresentationItem FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconnectioncurvegeometry.htm"/>
	/// </summary>
	public  partial class IfcConnectionCurveGeometry : IfcConnectionGeometry
	{
		public IfcCurveOrEdgeCurve CurveOnRelatingElement{get;set;} 
		public IfcCurveOrEdgeCurve CurveOnRelatedElement{get;set;} // optional

		public IfcConnectionCurveGeometry(IfcCurveOrEdgeCurve curveOnRelatingElement):base()
		{
			CurveOnRelatingElement = curveOnRelatingElement;


		}

		public static new IfcConnectionCurveGeometry FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConnectionCurveGeometry>(json);
		}

		public static new IfcConnectionCurveGeometry FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconnectiongeometry.htm"/>
	/// </summary>
	public abstract partial class IfcConnectionGeometry : IfcBase
	{

		public IfcConnectionGeometry():base()
		{


		}

		public static  IfcConnectionGeometry FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConnectionGeometry>(json);
		}

		public static  IfcConnectionGeometry FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconnectionpointgeometry.htm"/>
	/// </summary>
	public  partial class IfcConnectionPointGeometry : IfcConnectionGeometry
	{
		public IfcPointOrVertexPoint PointOnRelatingElement{get;set;} 
		public IfcPointOrVertexPoint PointOnRelatedElement{get;set;} // optional

		public IfcConnectionPointGeometry(IfcPointOrVertexPoint pointOnRelatingElement):base()
		{
			PointOnRelatingElement = pointOnRelatingElement;


		}

		public static new IfcConnectionPointGeometry FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConnectionPointGeometry>(json);
		}

		public static new IfcConnectionPointGeometry FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconnectionsurfacegeometry.htm"/>
	/// </summary>
	public  partial class IfcConnectionSurfaceGeometry : IfcConnectionGeometry
	{
		public IfcSurfaceOrFaceSurface SurfaceOnRelatingElement{get;set;} 
		public IfcSurfaceOrFaceSurface SurfaceOnRelatedElement{get;set;} // optional

		public IfcConnectionSurfaceGeometry(IfcSurfaceOrFaceSurface surfaceOnRelatingElement):base()
		{
			SurfaceOnRelatingElement = surfaceOnRelatingElement;


		}

		public static new IfcConnectionSurfaceGeometry FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConnectionSurfaceGeometry>(json);
		}

		public static new IfcConnectionSurfaceGeometry FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconnectionvolumegeometry.htm"/>
	/// </summary>
	public  partial class IfcConnectionVolumeGeometry : IfcConnectionGeometry
	{
		public IfcSolidOrShell VolumeOnRelatingElement{get;set;} 
		public IfcSolidOrShell VolumeOnRelatedElement{get;set;} // optional

		public IfcConnectionVolumeGeometry(IfcSolidOrShell volumeOnRelatingElement):base()
		{
			VolumeOnRelatingElement = volumeOnRelatingElement;


		}

		public static new IfcConnectionVolumeGeometry FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConnectionVolumeGeometry>(json);
		}

		public static new IfcConnectionVolumeGeometry FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconnectionpointeccentricity.htm"/>
	/// </summary>
	public  partial class IfcConnectionPointEccentricity : IfcConnectionPointGeometry
	{
		public IfcLengthMeasure EccentricityInX{get;set;} // optional
		public IfcLengthMeasure EccentricityInY{get;set;} // optional
		public IfcLengthMeasure EccentricityInZ{get;set;} // optional

		public IfcConnectionPointEccentricity(IfcPointOrVertexPoint pointOnRelatingElement):base(pointOnRelatingElement)
		{


		}

		public static new IfcConnectionPointEccentricity FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConnectionPointEccentricity>(json);
		}

		public static new IfcConnectionPointEccentricity FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstraint.htm"/>
	/// </summary>
	public abstract partial class IfcConstraint : IfcBase
	{
		public IfcLabel Name{get;set;} 
		public IfcText Description{get;set;} // optional
		public IfcConstraintEnum ConstraintGrade{get;set;} 
		public IfcLabel ConstraintSource{get;set;} // optional
		public IfcActorSelect CreatingActor{get;set;} // optional
		public IfcDateTime CreationTime{get;set;} // optional
		public IfcLabel UserDefinedGrade{get;set;} // optional

		public IfcConstraint(IfcLabel name,IfcConstraintEnum constraintGrade):base()
		{
			Name = name;
			ConstraintGrade = constraintGrade;


		}

		public static  IfcConstraint FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstraint>(json);
		}

		public static  IfcConstraint FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmetric.htm"/>
	/// </summary>
	public  partial class IfcMetric : IfcConstraint
	{
		public IfcBenchmarkEnum Benchmark{get;set;} 
		public IfcLabel ValueSource{get;set;} // optional
		public IfcMetricValueSelect DataValue{get;set;} 
		public IfcReference ReferencePath{get;set;} // optional

		public IfcMetric(IfcBenchmarkEnum benchmark,IfcMetricValueSelect dataValue,IfcLabel name,IfcConstraintEnum constraintGrade):base(name,constraintGrade)
		{
			Benchmark = benchmark;
			DataValue = dataValue;


		}

		public static new IfcMetric FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMetric>(json);
		}

		public static new IfcMetric FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcobjective.htm"/>
	/// </summary>
	public  partial class IfcObjective : IfcConstraint
	{
		public List<IfcConstraint> BenchmarkValues{get;set;} // optional
		public IfcLogicalOperatorEnum LogicalAggregator{get;set;} // optional
		public IfcObjectiveEnum ObjectiveQualifier{get;set;} 
		public IfcLabel UserDefinedQualifier{get;set;} // optional

		public IfcObjective(IfcObjectiveEnum objectiveQualifier,IfcLabel name,IfcConstraintEnum constraintGrade):base(name,constraintGrade)
		{
			ObjectiveQualifier = objectiveQualifier;

			BenchmarkValues = new List<IfcConstraint>();

		}

		public static new IfcObjective FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcObjective>(json);
		}

		public static new IfcObjective FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionequipmentresource.htm"/>
	/// </summary>
	public  partial class IfcConstructionEquipmentResource : IfcConstructionResource
	{
		public IfcConstructionEquipmentResourceTypeEnum PredefinedType{get;set;} // optional

		public IfcConstructionEquipmentResource(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcConstructionEquipmentResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstructionEquipmentResource>(json);
		}

		public static new IfcConstructionEquipmentResource FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionresource.htm"/>
	/// </summary>
	public abstract partial class IfcConstructionResource : IfcResource
	{
		public IfcResourceTime Usage{get;set;} // optional
		public List<IfcAppliedValue> BaseCosts{get;set;} // optional
		public IfcPhysicalQuantity BaseQuantity{get;set;} // optional

		public IfcConstructionResource(IfcGloballyUniqueId globalId):base(globalId)
		{

			BaseCosts = new List<IfcAppliedValue>();

		}

		public static new IfcConstructionResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstructionResource>(json);
		}

		public static new IfcConstructionResource FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionequipmentresourcetype.htm"/>
	/// </summary>
	public  partial class IfcConstructionEquipmentResourceType : IfcConstructionResourceType
	{
		public IfcConstructionEquipmentResourceTypeEnum PredefinedType{get;set;} 

		public IfcConstructionEquipmentResourceType(IfcConstructionEquipmentResourceTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcConstructionEquipmentResourceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstructionEquipmentResourceType>(json);
		}

		public static new IfcConstructionEquipmentResourceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionresourcetype.htm"/>
	/// </summary>
	public abstract partial class IfcConstructionResourceType : IfcTypeResource
	{
		public List<IfcAppliedValue> BaseCosts{get;set;} // optional
		public IfcPhysicalQuantity BaseQuantity{get;set;} // optional

		public IfcConstructionResourceType(IfcGloballyUniqueId globalId):base(globalId)
		{

			BaseCosts = new List<IfcAppliedValue>();

		}

		public static new IfcConstructionResourceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstructionResourceType>(json);
		}

		public static new IfcConstructionResourceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionmaterialresource.htm"/>
	/// </summary>
	public  partial class IfcConstructionMaterialResource : IfcConstructionResource
	{
		public IfcConstructionMaterialResourceTypeEnum PredefinedType{get;set;} // optional

		public IfcConstructionMaterialResource(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcConstructionMaterialResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstructionMaterialResource>(json);
		}

		public static new IfcConstructionMaterialResource FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionmaterialresourcetype.htm"/>
	/// </summary>
	public  partial class IfcConstructionMaterialResourceType : IfcConstructionResourceType
	{
		public IfcConstructionMaterialResourceTypeEnum PredefinedType{get;set;} 

		public IfcConstructionMaterialResourceType(IfcConstructionMaterialResourceTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcConstructionMaterialResourceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstructionMaterialResourceType>(json);
		}

		public static new IfcConstructionMaterialResourceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionproductresource.htm"/>
	/// </summary>
	public  partial class IfcConstructionProductResource : IfcConstructionResource
	{
		public IfcConstructionProductResourceTypeEnum PredefinedType{get;set;} // optional

		public IfcConstructionProductResource(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcConstructionProductResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstructionProductResource>(json);
		}

		public static new IfcConstructionProductResource FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconstructionproductresourcetype.htm"/>
	/// </summary>
	public  partial class IfcConstructionProductResourceType : IfcConstructionResourceType
	{
		public IfcConstructionProductResourceTypeEnum PredefinedType{get;set;} 

		public IfcConstructionProductResourceType(IfcConstructionProductResourceTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcConstructionProductResourceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConstructionProductResourceType>(json);
		}

		public static new IfcConstructionProductResourceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccrewresource.htm"/>
	/// </summary>
	public  partial class IfcCrewResource : IfcConstructionResource
	{
		public IfcCrewResourceTypeEnum PredefinedType{get;set;} // optional

		public IfcCrewResource(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcCrewResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCrewResource>(json);
		}

		public static new IfcCrewResource FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclaborresource.htm"/>
	/// </summary>
	public  partial class IfcLaborResource : IfcConstructionResource
	{
		public IfcLaborResourceTypeEnum PredefinedType{get;set;} // optional

		public IfcLaborResource(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcLaborResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLaborResource>(json);
		}

		public static new IfcLaborResource FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsubcontractresource.htm"/>
	/// </summary>
	public  partial class IfcSubContractResource : IfcConstructionResource
	{
		public IfcSubContractResourceTypeEnum PredefinedType{get;set;} // optional

		public IfcSubContractResource(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSubContractResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSubContractResource>(json);
		}

		public static new IfcSubContractResource FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcresource.htm"/>
	/// </summary>
	public abstract partial class IfcResource : IfcObject
	{
		public IfcIdentifier Identification{get;set;} // optional
		public IfcText LongDescription{get;set;} // optional

		public IfcResource(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcResource>(json);
		}

		public static new IfcResource FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccrewresourcetype.htm"/>
	/// </summary>
	public  partial class IfcCrewResourceType : IfcConstructionResourceType
	{
		public IfcCrewResourceTypeEnum PredefinedType{get;set;} 

		public IfcCrewResourceType(IfcCrewResourceTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcCrewResourceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCrewResourceType>(json);
		}

		public static new IfcCrewResourceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclaborresourcetype.htm"/>
	/// </summary>
	public  partial class IfcLaborResourceType : IfcConstructionResourceType
	{
		public IfcLaborResourceTypeEnum PredefinedType{get;set;} 

		public IfcLaborResourceType(IfcLaborResourceTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcLaborResourceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLaborResourceType>(json);
		}

		public static new IfcLaborResourceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsubcontractresourcetype.htm"/>
	/// </summary>
	public  partial class IfcSubContractResourceType : IfcConstructionResourceType
	{
		public IfcSubContractResourceTypeEnum PredefinedType{get;set;} 

		public IfcSubContractResourceType(IfcSubContractResourceTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcSubContractResourceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSubContractResourceType>(json);
		}

		public static new IfcSubContractResourceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctyperesource.htm"/>
	/// </summary>
	public abstract partial class IfcTypeResource : IfcTypeObject
	{
		public IfcIdentifier Identification{get;set;} // optional
		public IfcText LongDescription{get;set;} // optional
		public IfcLabel ResourceType{get;set;} // optional

		public IfcTypeResource(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcTypeResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTypeResource>(json);
		}

		public static new IfcTypeResource FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccontext.htm"/>
	/// </summary>
	public abstract partial class IfcContext : IfcObjectDefinition
	{
		public IfcLabel ObjectType{get;set;} // optional
		public IfcLabel LongName{get;set;} // optional
		public IfcLabel Phase{get;set;} // optional
		public List<IfcRepresentationContext> RepresentationContexts{get;set;} // optional
		public IfcUnitAssignment UnitsInContext{get;set;} // optional

		public IfcContext(IfcGloballyUniqueId globalId):base(globalId)
		{

			RepresentationContexts = new List<IfcRepresentationContext>();

		}

		public static new IfcContext FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcContext>(json);
		}

		public static new IfcContext FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproject.htm"/>
	/// </summary>
	public  partial class IfcProject : IfcContext
	{

		public IfcProject(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcProject FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProject>(json);
		}

		public static new IfcProject FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprojectlibrary.htm"/>
	/// </summary>
	public  partial class IfcProjectLibrary : IfcContext
	{

		public IfcProjectLibrary(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcProjectLibrary FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProjectLibrary>(json);
		}

		public static new IfcProjectLibrary FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcobjectdefinition.htm"/>
	/// </summary>
	public abstract partial class IfcObjectDefinition : IfcRoot
	{

		public IfcObjectDefinition(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcObjectDefinition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcObjectDefinition>(json);
		}

		public static new IfcObjectDefinition FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccontextdependentunit.htm"/>
	/// </summary>
	public  partial class IfcContextDependentUnit : IfcNamedUnit
	{
		public IfcLabel Name{get;set;} 

		public IfcContextDependentUnit(IfcLabel name,IfcDimensionalExponents dimensions,IfcUnitEnum unitType):base(dimensions,unitType)
		{
			Name = name;


		}

		public static new IfcContextDependentUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcContextDependentUnit>(json);
		}

		public static new IfcContextDependentUnit FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcnamedunit.htm"/>
	/// </summary>
	public abstract partial class IfcNamedUnit : IfcBase
	{
		public IfcDimensionalExponents Dimensions{get;set;} 
		public IfcUnitEnum UnitType{get;set;} 

		public IfcNamedUnit(IfcDimensionalExponents dimensions,IfcUnitEnum unitType):base()
		{
			Dimensions = dimensions;
			UnitType = unitType;


		}

		public static  IfcNamedUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcNamedUnit>(json);
		}

		public static  IfcNamedUnit FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccostitem.htm"/>
	/// </summary>
	public  partial class IfcCostItem : IfcControl
	{
		public IfcCostItemTypeEnum PredefinedType{get;set;} // optional
		public List<IfcCostValue> CostValues{get;set;} // optional
		public List<IfcPhysicalQuantity> CostQuantities{get;set;} // optional

		public IfcCostItem(IfcGloballyUniqueId globalId):base(globalId)
		{

			CostValues = new List<IfcCostValue>();
			CostQuantities = new List<IfcPhysicalQuantity>();

		}

		public static new IfcCostItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCostItem>(json);
		}

		public static new IfcCostItem FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccostschedule.htm"/>
	/// </summary>
	public  partial class IfcCostSchedule : IfcControl
	{
		public IfcCostScheduleTypeEnum PredefinedType{get;set;} // optional
		public IfcLabel Status{get;set;} // optional
		public IfcDateTime SubmittedOn{get;set;} // optional
		public IfcDateTime UpdateDate{get;set;} // optional

		public IfcCostSchedule(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcCostSchedule FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCostSchedule>(json);
		}

		public static new IfcCostSchedule FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcperformancehistory.htm"/>
	/// </summary>
	public  partial class IfcPerformanceHistory : IfcControl
	{
		public IfcLabel LifeCyclePhase{get;set;} 
		public IfcPerformanceHistoryTypeEnum PredefinedType{get;set;} // optional

		public IfcPerformanceHistory(IfcLabel lifeCyclePhase,IfcGloballyUniqueId globalId):base(globalId)
		{
			LifeCyclePhase = lifeCyclePhase;


		}

		public static new IfcPerformanceHistory FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPerformanceHistory>(json);
		}

		public static new IfcPerformanceHistory FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpermit.htm"/>
	/// </summary>
	public  partial class IfcPermit : IfcControl
	{
		public IfcPermitTypeEnum PredefinedType{get;set;} // optional
		public IfcLabel Status{get;set;} // optional
		public IfcText LongDescription{get;set;} // optional

		public IfcPermit(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcPermit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPermit>(json);
		}

		public static new IfcPermit FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprojectorder.htm"/>
	/// </summary>
	public  partial class IfcProjectOrder : IfcControl
	{
		public IfcProjectOrderTypeEnum PredefinedType{get;set;} // optional
		public IfcLabel Status{get;set;} // optional
		public IfcText LongDescription{get;set;} // optional

		public IfcProjectOrder(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcProjectOrder FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProjectOrder>(json);
		}

		public static new IfcProjectOrder FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcworkcalendar.htm"/>
	/// </summary>
	public  partial class IfcWorkCalendar : IfcControl
	{
		public List<IfcWorkTime> WorkingTimes{get;set;} // optional
		public List<IfcWorkTime> ExceptionTimes{get;set;} // optional
		public IfcWorkCalendarTypeEnum PredefinedType{get;set;} // optional

		public IfcWorkCalendar(IfcGloballyUniqueId globalId):base(globalId)
		{

			WorkingTimes = new List<IfcWorkTime>();
			ExceptionTimes = new List<IfcWorkTime>();

		}

		public static new IfcWorkCalendar FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWorkCalendar>(json);
		}

		public static new IfcWorkCalendar FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcworkcontrol.htm"/>
	/// </summary>
	public abstract partial class IfcWorkControl : IfcControl
	{
		public IfcDateTime CreationDate{get;set;} 
		public List<IfcPerson> Creators{get;set;} // optional
		public IfcLabel Purpose{get;set;} // optional
		public IfcDuration Duration{get;set;} // optional
		public IfcDuration TotalFloat{get;set;} // optional
		public IfcDateTime StartTime{get;set;} 
		public IfcDateTime FinishTime{get;set;} // optional

		public IfcWorkControl(IfcDateTime creationDate,IfcDateTime startTime,IfcGloballyUniqueId globalId):base(globalId)
		{
			CreationDate = creationDate;
			StartTime = startTime;

			Creators = new List<IfcPerson>();

		}

		public static new IfcWorkControl FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWorkControl>(json);
		}

		public static new IfcWorkControl FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccontroller.htm"/>
	/// </summary>
	public  partial class IfcController : IfcDistributionControlElement
	{
		public IfcControllerTypeEnum PredefinedType{get;set;} // optional

		public IfcController(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcController FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcController>(json);
		}

		public static new IfcController FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccontrollertype.htm"/>
	/// </summary>
	public  partial class IfcControllerType : IfcDistributionControlElementType
	{
		public IfcControllerTypeEnum PredefinedType{get;set;} 

		public IfcControllerType(IfcControllerTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcControllerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcControllerType>(json);
		}

		public static new IfcControllerType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconversionbasedunit.htm"/>
	/// </summary>
	public  partial class IfcConversionBasedUnit : IfcNamedUnit
	{
		public IfcLabel Name{get;set;} 
		public IfcMeasureWithUnit ConversionFactor{get;set;} 

		public IfcConversionBasedUnit(IfcLabel name,IfcMeasureWithUnit conversionFactor,IfcDimensionalExponents dimensions,IfcUnitEnum unitType):base(dimensions,unitType)
		{
			Name = name;
			ConversionFactor = conversionFactor;


		}

		public static new IfcConversionBasedUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConversionBasedUnit>(json);
		}

		public static new IfcConversionBasedUnit FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcconversionbasedunitwithoffset.htm"/>
	/// </summary>
	public  partial class IfcConversionBasedUnitWithOffset : IfcConversionBasedUnit
	{
		public IfcReal ConversionOffset{get;set;} 

		public IfcConversionBasedUnitWithOffset(IfcReal conversionOffset,IfcLabel name,IfcMeasureWithUnit conversionFactor,IfcDimensionalExponents dimensions,IfcUnitEnum unitType):base(name,conversionFactor,dimensions,unitType)
		{
			ConversionOffset = conversionOffset;


		}

		public static new IfcConversionBasedUnitWithOffset FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcConversionBasedUnitWithOffset>(json);
		}

		public static new IfcConversionBasedUnitWithOffset FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccooledbeam.htm"/>
	/// </summary>
	public  partial class IfcCooledBeam : IfcEnergyConversionDevice
	{
		public IfcCooledBeamTypeEnum PredefinedType{get;set;} // optional

		public IfcCooledBeam(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcCooledBeam FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCooledBeam>(json);
		}

		public static new IfcCooledBeam FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccooledbeamtype.htm"/>
	/// </summary>
	public  partial class IfcCooledBeamType : IfcEnergyConversionDeviceType
	{
		public IfcCooledBeamTypeEnum PredefinedType{get;set;} 

		public IfcCooledBeamType(IfcCooledBeamTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcCooledBeamType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCooledBeamType>(json);
		}

		public static new IfcCooledBeamType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoolingtower.htm"/>
	/// </summary>
	public  partial class IfcCoolingTower : IfcEnergyConversionDevice
	{
		public IfcCoolingTowerTypeEnum PredefinedType{get;set;} // optional

		public IfcCoolingTower(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcCoolingTower FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCoolingTower>(json);
		}

		public static new IfcCoolingTower FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoolingtowertype.htm"/>
	/// </summary>
	public  partial class IfcCoolingTowerType : IfcEnergyConversionDeviceType
	{
		public IfcCoolingTowerTypeEnum PredefinedType{get;set;} 

		public IfcCoolingTowerType(IfcCoolingTowerTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcCoolingTowerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCoolingTowerType>(json);
		}

		public static new IfcCoolingTowerType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoordinateoperation.htm"/>
	/// </summary>
	public abstract partial class IfcCoordinateOperation : IfcBase
	{
		public IfcCoordinateReferenceSystemSelect SourceCRS{get;set;} 
		public IfcCoordinateReferenceSystem TargetCRS{get;set;} 

		public IfcCoordinateOperation(IfcCoordinateReferenceSystemSelect sourceCRS,IfcCoordinateReferenceSystem targetCRS):base()
		{
			SourceCRS = sourceCRS;
			TargetCRS = targetCRS;


		}

		public static  IfcCoordinateOperation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCoordinateOperation>(json);
		}

		public static  IfcCoordinateOperation FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmapconversion.htm"/>
	/// </summary>
	public  partial class IfcMapConversion : IfcCoordinateOperation
	{
		public IfcLengthMeasure Eastings{get;set;} 
		public IfcLengthMeasure Northings{get;set;} 
		public IfcLengthMeasure OrthogonalHeight{get;set;} 
		public IfcReal XAxisAbscissa{get;set;} // optional
		public IfcReal XAxisOrdinate{get;set;} // optional
		public IfcReal Scale{get;set;} // optional

		public IfcMapConversion(IfcLengthMeasure eastings,IfcLengthMeasure northings,IfcLengthMeasure orthogonalHeight,IfcCoordinateReferenceSystemSelect sourceCRS,IfcCoordinateReferenceSystem targetCRS):base(sourceCRS,targetCRS)
		{
			Eastings = eastings;
			Northings = northings;
			OrthogonalHeight = orthogonalHeight;


		}

		public static new IfcMapConversion FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMapConversion>(json);
		}

		public static new IfcMapConversion FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccoordinatereferencesystem.htm"/>
	/// </summary>
	public abstract partial class IfcCoordinateReferenceSystem : IfcBase
	{
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcIdentifier GeodeticDatum{get;set;} 
		public IfcIdentifier VerticalDatum{get;set;} // optional

		public IfcCoordinateReferenceSystem(IfcIdentifier geodeticDatum):base()
		{
			GeodeticDatum = geodeticDatum;


		}

		public static  IfcCoordinateReferenceSystem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCoordinateReferenceSystem>(json);
		}

		public static  IfcCoordinateReferenceSystem FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprojectedcrs.htm"/>
	/// </summary>
	public  partial class IfcProjectedCRS : IfcCoordinateReferenceSystem
	{
		public IfcIdentifier MapProjection{get;set;} // optional
		public IfcIdentifier MapZone{get;set;} // optional
		public IfcNamedUnit MapUnit{get;set;} // optional

		public IfcProjectedCRS(IfcIdentifier geodeticDatum):base(geodeticDatum)
		{


		}

		public static new IfcProjectedCRS FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProjectedCRS>(json);
		}

		public static new IfcProjectedCRS FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrectangularpyramid.htm"/>
	/// </summary>
	public  partial class IfcRectangularPyramid : IfcCsgPrimitive3D
	{
		public IfcPositiveLengthMeasure XLength{get;set;} 
		public IfcPositiveLengthMeasure YLength{get;set;} 
		public IfcPositiveLengthMeasure Height{get;set;} 

		public IfcRectangularPyramid(IfcPositiveLengthMeasure xLength,IfcPositiveLengthMeasure yLength,IfcPositiveLengthMeasure height,IfcAxis2Placement3D position):base(position)
		{
			XLength = xLength;
			YLength = yLength;
			Height = height;


		}

		public static new IfcRectangularPyramid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRectangularPyramid>(json);
		}

		public static new IfcRectangularPyramid FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrightcircularcone.htm"/>
	/// </summary>
	public  partial class IfcRightCircularCone : IfcCsgPrimitive3D
	{
		public IfcPositiveLengthMeasure Height{get;set;} 
		public IfcPositiveLengthMeasure BottomRadius{get;set;} 

		public IfcRightCircularCone(IfcPositiveLengthMeasure height,IfcPositiveLengthMeasure bottomRadius,IfcAxis2Placement3D position):base(position)
		{
			Height = height;
			BottomRadius = bottomRadius;


		}

		public static new IfcRightCircularCone FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRightCircularCone>(json);
		}

		public static new IfcRightCircularCone FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrightcircularcylinder.htm"/>
	/// </summary>
	public  partial class IfcRightCircularCylinder : IfcCsgPrimitive3D
	{
		public IfcPositiveLengthMeasure Height{get;set;} 
		public IfcPositiveLengthMeasure Radius{get;set;} 

		public IfcRightCircularCylinder(IfcPositiveLengthMeasure height,IfcPositiveLengthMeasure radius,IfcAxis2Placement3D position):base(position)
		{
			Height = height;
			Radius = radius;


		}

		public static new IfcRightCircularCylinder FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRightCircularCylinder>(json);
		}

		public static new IfcRightCircularCylinder FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsphere.htm"/>
	/// </summary>
	public  partial class IfcSphere : IfcCsgPrimitive3D
	{
		public IfcPositiveLengthMeasure Radius{get;set;} 

		public IfcSphere(IfcPositiveLengthMeasure radius,IfcAxis2Placement3D position):base(position)
		{
			Radius = radius;


		}

		public static new IfcSphere FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSphere>(json);
		}

		public static new IfcSphere FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccsgsolid.htm"/>
	/// </summary>
	public  partial class IfcCsgSolid : IfcSolidModel
	{
		public IfcCsgSelect TreeRootExpression{get;set;} 

		public IfcCsgSolid(IfcCsgSelect treeRootExpression):base()
		{
			TreeRootExpression = treeRootExpression;


		}

		public static new IfcCsgSolid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCsgSolid>(json);
		}

		public static new IfcCsgSolid FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsolidmodel.htm"/>
	/// </summary>
	public abstract partial class IfcSolidModel : IfcGeometricRepresentationItem
	{

		public IfcSolidModel():base()
		{


		}

		public static new IfcSolidModel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSolidModel>(json);
		}

		public static new IfcSolidModel FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurrencyrelationship.htm"/>
	/// </summary>
	public  partial class IfcCurrencyRelationship : IfcResourceLevelRelationship
	{
		public IfcMonetaryUnit RelatingMonetaryUnit{get;set;} 
		public IfcMonetaryUnit RelatedMonetaryUnit{get;set;} 
		public IfcPositiveRatioMeasure ExchangeRate{get;set;} 
		public IfcDateTime RateDateTime{get;set;} // optional
		public IfcLibraryInformation RateSource{get;set;} // optional

		public IfcCurrencyRelationship(IfcMonetaryUnit relatingMonetaryUnit,IfcMonetaryUnit relatedMonetaryUnit,IfcPositiveRatioMeasure exchangeRate):base()
		{
			RelatingMonetaryUnit = relatingMonetaryUnit;
			RelatedMonetaryUnit = relatedMonetaryUnit;
			ExchangeRate = exchangeRate;


		}

		public static new IfcCurrencyRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurrencyRelationship>(json);
		}

		public static new IfcCurrencyRelationship FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcline.htm"/>
	/// </summary>
	public  partial class IfcLine : IfcCurve
	{
		public IfcCartesianPoint Pnt{get;set;} 
		public IfcVector Dir{get;set;} 

		public IfcLine(IfcCartesianPoint pnt,IfcVector dir):base()
		{
			Pnt = pnt;
			Dir = dir;


		}

		public static new IfcLine FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLine>(json);
		}

		public static new IfcLine FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcoffsetcurve2d.htm"/>
	/// </summary>
	public  partial class IfcOffsetCurve2D : IfcCurve
	{
		public IfcCurve BasisCurve{get;set;} 
		public IfcLengthMeasure Distance{get;set;} 
		public bool? SelfIntersect{get;set;} 

		public IfcOffsetCurve2D(IfcCurve basisCurve,IfcLengthMeasure distance,bool? selfIntersect):base()
		{
			BasisCurve = basisCurve;
			Distance = distance;
			SelfIntersect = selfIntersect;


		}

		public static new IfcOffsetCurve2D FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOffsetCurve2D>(json);
		}

		public static new IfcOffsetCurve2D FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcoffsetcurve3d.htm"/>
	/// </summary>
	public  partial class IfcOffsetCurve3D : IfcCurve
	{
		public IfcCurve BasisCurve{get;set;} 
		public IfcLengthMeasure Distance{get;set;} 
		public bool? SelfIntersect{get;set;} 
		public IfcDirection RefDirection{get;set;} 

		public IfcOffsetCurve3D(IfcCurve basisCurve,IfcLengthMeasure distance,bool? selfIntersect,IfcDirection refDirection):base()
		{
			BasisCurve = basisCurve;
			Distance = distance;
			SelfIntersect = selfIntersect;
			RefDirection = refDirection;


		}

		public static new IfcOffsetCurve3D FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOffsetCurve3D>(json);
		}

		public static new IfcOffsetCurve3D FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpcurve.htm"/>
	/// </summary>
	public  partial class IfcPcurve : IfcCurve
	{
		public IfcSurface BasisSurface{get;set;} 
		public IfcCurve ReferenceCurve{get;set;} 

		public IfcPcurve(IfcSurface basisSurface,IfcCurve referenceCurve):base()
		{
			BasisSurface = basisSurface;
			ReferenceCurve = referenceCurve;


		}

		public static new IfcPcurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPcurve>(json);
		}

		public static new IfcPcurve FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurvestyle.htm"/>
	/// </summary>
	public  partial class IfcCurveStyle : IfcPresentationStyle
	{
		public IfcCurveFontOrScaledCurveFontSelect CurveFont{get;set;} // optional
		public IfcSizeSelect CurveWidth{get;set;} // optional
		public IfcColour CurveColour{get;set;} // optional
		public bool ModelOrDraughting{get;set;} // optional

		public IfcCurveStyle():base()
		{


		}

		public static new IfcCurveStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveStyle>(json);
		}

		public static new IfcCurveStyle FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpresentationstyle.htm"/>
	/// </summary>
	public abstract partial class IfcPresentationStyle : IfcBase
	{
		public IfcLabel Name{get;set;} // optional

		public IfcPresentationStyle():base()
		{


		}

		public static  IfcPresentationStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPresentationStyle>(json);
		}

		public static  IfcPresentationStyle FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurvestylefont.htm"/>
	/// </summary>
	public  partial class IfcCurveStyleFont : IfcPresentationItem
	{
		public IfcLabel Name{get;set;} // optional
		public List<IfcCurveStyleFontPattern> PatternList{get;set;} 

		public IfcCurveStyleFont(List<IfcCurveStyleFontPattern> patternList):base()
		{
			PatternList = patternList;


		}

		public static new IfcCurveStyleFont FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveStyleFont>(json);
		}

		public static new IfcCurveStyleFont FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurvestylefontandscaling.htm"/>
	/// </summary>
	public  partial class IfcCurveStyleFontAndScaling : IfcPresentationItem
	{
		public IfcLabel Name{get;set;} // optional
		public IfcCurveStyleFontSelect CurveFont{get;set;} 
		public IfcPositiveRatioMeasure CurveFontScaling{get;set;} 

		public IfcCurveStyleFontAndScaling(IfcCurveStyleFontSelect curveFont,IfcPositiveRatioMeasure curveFontScaling):base()
		{
			CurveFont = curveFont;
			CurveFontScaling = curveFontScaling;


		}

		public static new IfcCurveStyleFontAndScaling FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveStyleFontAndScaling>(json);
		}

		public static new IfcCurveStyleFontAndScaling FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccurvestylefontpattern.htm"/>
	/// </summary>
	public  partial class IfcCurveStyleFontPattern : IfcPresentationItem
	{
		public IfcLengthMeasure VisibleSegmentLength{get;set;} 
		public IfcPositiveLengthMeasure InvisibleSegmentLength{get;set;} 

		public IfcCurveStyleFontPattern(IfcLengthMeasure visibleSegmentLength,IfcPositiveLengthMeasure invisibleSegmentLength):base()
		{
			VisibleSegmentLength = visibleSegmentLength;
			InvisibleSegmentLength = invisibleSegmentLength;


		}

		public static new IfcCurveStyleFontPattern FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCurveStyleFontPattern>(json);
		}

		public static new IfcCurveStyleFontPattern FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifccylindricalsurface.htm"/>
	/// </summary>
	public  partial class IfcCylindricalSurface : IfcElementarySurface
	{
		public IfcPositiveLengthMeasure Radius{get;set;} 

		public IfcCylindricalSurface(IfcPositiveLengthMeasure radius,IfcAxis2Placement3D position):base(position)
		{
			Radius = radius;


		}

		public static new IfcCylindricalSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcCylindricalSurface>(json);
		}

		public static new IfcCylindricalSurface FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementarysurface.htm"/>
	/// </summary>
	public abstract partial class IfcElementarySurface : IfcSurface
	{
		public IfcAxis2Placement3D Position{get;set;} 

		public IfcElementarySurface(IfcAxis2Placement3D position):base()
		{
			Position = position;


		}

		public static new IfcElementarySurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElementarySurface>(json);
		}

		public static new IfcElementarySurface FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdamper.htm"/>
	/// </summary>
	public  partial class IfcDamper : IfcFlowController
	{
		public IfcDamperTypeEnum PredefinedType{get;set;} // optional

		public IfcDamper(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDamper FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDamper>(json);
		}

		public static new IfcDamper FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdampertype.htm"/>
	/// </summary>
	public  partial class IfcDamperType : IfcFlowControllerType
	{
		public IfcDamperTypeEnum PredefinedType{get;set;} 

		public IfcDamperType(IfcDamperTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcDamperType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDamperType>(json);
		}

		public static new IfcDamperType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcderivedprofiledef.htm"/>
	/// </summary>
	public  partial class IfcDerivedProfileDef : IfcProfileDef
	{
		public IfcProfileDef ParentProfile{get;set;} 
		public IfcCartesianTransformationOperator2D Operator{get;set;} 
		public IfcLabel Label{get;set;} // optional

		public IfcDerivedProfileDef(IfcProfileDef parentProfile,IfcCartesianTransformationOperator2D op,IfcProfileTypeEnum profileType):base(profileType)
		{
			ParentProfile = parentProfile;
			Operator = op;


		}

		public static new IfcDerivedProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDerivedProfileDef>(json);
		}

		public static new IfcDerivedProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmirroredprofiledef.htm"/>
	/// </summary>
	public  partial class IfcMirroredProfileDef : IfcDerivedProfileDef
	{

		public IfcMirroredProfileDef(IfcProfileDef parentProfile,IfcCartesianTransformationOperator2D op,IfcProfileTypeEnum profileType):base(parentProfile,op,profileType)
		{


		}

		public static new IfcMirroredProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMirroredProfileDef>(json);
		}

		public static new IfcMirroredProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcderivedunit.htm"/>
	/// </summary>
	public  partial class IfcDerivedUnit : IfcBase
	{
		public List<IfcDerivedUnitElement> Elements{get;set;} 
		public IfcDerivedUnitEnum UnitType{get;set;} 
		public IfcLabel UserDefinedType{get;set;} // optional

		public IfcDerivedUnit(List<IfcDerivedUnitElement> elements,IfcDerivedUnitEnum unitType):base()
		{
			Elements = elements;
			UnitType = unitType;


		}

		public static  IfcDerivedUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDerivedUnit>(json);
		}

		public static  IfcDerivedUnit FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcderivedunitelement.htm"/>
	/// </summary>
	public  partial class IfcDerivedUnitElement : IfcBase
	{
		public IfcNamedUnit Unit{get;set;} 
		public int Exponent{get;set;} 

		public IfcDerivedUnitElement(IfcNamedUnit unit,int exponent):base()
		{
			Unit = unit;
			Exponent = exponent;


		}

		public static  IfcDerivedUnitElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDerivedUnitElement>(json);
		}

		public static  IfcDerivedUnitElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdimensionalexponents.htm"/>
	/// </summary>
	public  partial class IfcDimensionalExponents : IfcBase
	{
		public int LengthExponent{get;set;} 
		public int MassExponent{get;set;} 
		public int TimeExponent{get;set;} 
		public int ElectricCurrentExponent{get;set;} 
		public int ThermodynamicTemperatureExponent{get;set;} 
		public int AmountOfSubstanceExponent{get;set;} 
		public int LuminousIntensityExponent{get;set;} 

		public IfcDimensionalExponents(int lengthExponent,int massExponent,int timeExponent,int electricCurrentExponent,int thermodynamicTemperatureExponent,int amountOfSubstanceExponent,int luminousIntensityExponent):base()
		{
			LengthExponent = lengthExponent;
			MassExponent = massExponent;
			TimeExponent = timeExponent;
			ElectricCurrentExponent = electricCurrentExponent;
			ThermodynamicTemperatureExponent = thermodynamicTemperatureExponent;
			AmountOfSubstanceExponent = amountOfSubstanceExponent;
			LuminousIntensityExponent = luminousIntensityExponent;


		}

		public static  IfcDimensionalExponents FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDimensionalExponents>(json);
		}

		public static  IfcDimensionalExponents FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdirection.htm"/>
	/// </summary>
	public  partial class IfcDirection : IfcGeometricRepresentationItem
	{
		public List<double> DirectionRatios{get;set;} 

		public IfcDirection(List<double> directionRatios):base()
		{
			DirectionRatios = directionRatios;


		}

		public static new IfcDirection FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDirection>(json);
		}

		public static new IfcDirection FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdiscreteaccessory.htm"/>
	/// </summary>
	public  partial class IfcDiscreteAccessory : IfcElementComponent
	{
		public IfcDiscreteAccessoryTypeEnum PredefinedType{get;set;} // optional

		public IfcDiscreteAccessory(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDiscreteAccessory FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDiscreteAccessory>(json);
		}

		public static new IfcDiscreteAccessory FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdiscreteaccessorytype.htm"/>
	/// </summary>
	public  partial class IfcDiscreteAccessoryType : IfcElementComponentType
	{
		public IfcDiscreteAccessoryTypeEnum PredefinedType{get;set;} 

		public IfcDiscreteAccessoryType(IfcDiscreteAccessoryTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcDiscreteAccessoryType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDiscreteAccessoryType>(json);
		}

		public static new IfcDiscreteAccessoryType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionchamberelement.htm"/>
	/// </summary>
	public  partial class IfcDistributionChamberElement : IfcDistributionFlowElement
	{
		public IfcDistributionChamberElementTypeEnum PredefinedType{get;set;} // optional

		public IfcDistributionChamberElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDistributionChamberElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionChamberElement>(json);
		}

		public static new IfcDistributionChamberElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionflowelement.htm"/>
	/// </summary>
	public  partial class IfcDistributionFlowElement : IfcDistributionElement
	{

		public IfcDistributionFlowElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDistributionFlowElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionFlowElement>(json);
		}

		public static new IfcDistributionFlowElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionchamberelementtype.htm"/>
	/// </summary>
	public  partial class IfcDistributionChamberElementType : IfcDistributionFlowElementType
	{
		public IfcDistributionChamberElementTypeEnum PredefinedType{get;set;} 

		public IfcDistributionChamberElementType(IfcDistributionChamberElementTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcDistributionChamberElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionChamberElementType>(json);
		}

		public static new IfcDistributionChamberElementType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionflowelementtype.htm"/>
	/// </summary>
	public abstract partial class IfcDistributionFlowElementType : IfcDistributionElementType
	{

		public IfcDistributionFlowElementType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDistributionFlowElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionFlowElementType>(json);
		}

		public static new IfcDistributionFlowElementType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributioncircuit.htm"/>
	/// </summary>
	public  partial class IfcDistributionCircuit : IfcDistributionSystem
	{

		public IfcDistributionCircuit(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDistributionCircuit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionCircuit>(json);
		}

		public static new IfcDistributionCircuit FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionsystem.htm"/>
	/// </summary>
	public  partial class IfcDistributionSystem : IfcSystem
	{
		public IfcLabel LongName{get;set;} // optional
		public IfcDistributionSystemEnum PredefinedType{get;set;} // optional

		public IfcDistributionSystem(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDistributionSystem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionSystem>(json);
		}

		public static new IfcDistributionSystem FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowinstrument.htm"/>
	/// </summary>
	public  partial class IfcFlowInstrument : IfcDistributionControlElement
	{
		public IfcFlowInstrumentTypeEnum PredefinedType{get;set;} // optional

		public IfcFlowInstrument(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFlowInstrument FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowInstrument>(json);
		}

		public static new IfcFlowInstrument FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprotectivedevicetrippingunit.htm"/>
	/// </summary>
	public  partial class IfcProtectiveDeviceTrippingUnit : IfcDistributionControlElement
	{
		public IfcProtectiveDeviceTrippingUnitTypeEnum PredefinedType{get;set;} // optional

		public IfcProtectiveDeviceTrippingUnit(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcProtectiveDeviceTrippingUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProtectiveDeviceTrippingUnit>(json);
		}

		public static new IfcProtectiveDeviceTrippingUnit FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsensor.htm"/>
	/// </summary>
	public  partial class IfcSensor : IfcDistributionControlElement
	{
		public IfcSensorTypeEnum PredefinedType{get;set;} // optional

		public IfcSensor(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSensor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSensor>(json);
		}

		public static new IfcSensor FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunitarycontrolelement.htm"/>
	/// </summary>
	public  partial class IfcUnitaryControlElement : IfcDistributionControlElement
	{
		public IfcUnitaryControlElementTypeEnum PredefinedType{get;set;} // optional

		public IfcUnitaryControlElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcUnitaryControlElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcUnitaryControlElement>(json);
		}

		public static new IfcUnitaryControlElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionelement.htm"/>
	/// </summary>
	public  partial class IfcDistributionElement : IfcElement
	{

		public IfcDistributionElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDistributionElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionElement>(json);
		}

		public static new IfcDistributionElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowinstrumenttype.htm"/>
	/// </summary>
	public  partial class IfcFlowInstrumentType : IfcDistributionControlElementType
	{
		public IfcFlowInstrumentTypeEnum PredefinedType{get;set;} 

		public IfcFlowInstrumentType(IfcFlowInstrumentTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcFlowInstrumentType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowInstrumentType>(json);
		}

		public static new IfcFlowInstrumentType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprotectivedevicetrippingunittype.htm"/>
	/// </summary>
	public  partial class IfcProtectiveDeviceTrippingUnitType : IfcDistributionControlElementType
	{
		public IfcProtectiveDeviceTrippingUnitTypeEnum PredefinedType{get;set;} 

		public IfcProtectiveDeviceTrippingUnitType(IfcProtectiveDeviceTrippingUnitTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcProtectiveDeviceTrippingUnitType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProtectiveDeviceTrippingUnitType>(json);
		}

		public static new IfcProtectiveDeviceTrippingUnitType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsensortype.htm"/>
	/// </summary>
	public  partial class IfcSensorType : IfcDistributionControlElementType
	{
		public IfcSensorTypeEnum PredefinedType{get;set;} 

		public IfcSensorType(IfcSensorTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcSensorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSensorType>(json);
		}

		public static new IfcSensorType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunitarycontrolelementtype.htm"/>
	/// </summary>
	public  partial class IfcUnitaryControlElementType : IfcDistributionControlElementType
	{
		public IfcUnitaryControlElementTypeEnum PredefinedType{get;set;} 

		public IfcUnitaryControlElementType(IfcUnitaryControlElementTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcUnitaryControlElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcUnitaryControlElementType>(json);
		}

		public static new IfcUnitaryControlElementType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionelementtype.htm"/>
	/// </summary>
	public  partial class IfcDistributionElementType : IfcElementType
	{

		public IfcDistributionElementType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDistributionElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionElementType>(json);
		}

		public static new IfcDistributionElementType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowstoragedevice.htm"/>
	/// </summary>
	public  partial class IfcFlowStorageDevice : IfcDistributionFlowElement
	{

		public IfcFlowStorageDevice(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFlowStorageDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowStorageDevice>(json);
		}

		public static new IfcFlowStorageDevice FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowtreatmentdevice.htm"/>
	/// </summary>
	public  partial class IfcFlowTreatmentDevice : IfcDistributionFlowElement
	{

		public IfcFlowTreatmentDevice(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFlowTreatmentDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowTreatmentDevice>(json);
		}

		public static new IfcFlowTreatmentDevice FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowstoragedevicetype.htm"/>
	/// </summary>
	public abstract partial class IfcFlowStorageDeviceType : IfcDistributionFlowElementType
	{

		public IfcFlowStorageDeviceType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFlowStorageDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowStorageDeviceType>(json);
		}

		public static new IfcFlowStorageDeviceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowtreatmentdevicetype.htm"/>
	/// </summary>
	public abstract partial class IfcFlowTreatmentDeviceType : IfcDistributionFlowElementType
	{

		public IfcFlowTreatmentDeviceType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFlowTreatmentDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowTreatmentDeviceType>(json);
		}

		public static new IfcFlowTreatmentDeviceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdistributionport.htm"/>
	/// </summary>
	public  partial class IfcDistributionPort : IfcPort
	{
		public IfcFlowDirectionEnum FlowDirection{get;set;} // optional
		public IfcDistributionPortTypeEnum PredefinedType{get;set;} // optional
		public IfcDistributionSystemEnum SystemType{get;set;} // optional

		public IfcDistributionPort(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDistributionPort FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDistributionPort>(json);
		}

		public static new IfcDistributionPort FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcport.htm"/>
	/// </summary>
	public abstract partial class IfcPort : IfcProduct
	{

		public IfcPort(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcPort FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPort>(json);
		}

		public static new IfcPort FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdocumentinformation.htm"/>
	/// </summary>
	public  partial class IfcDocumentInformation : IfcExternalInformation
	{
		public IfcIdentifier Identification{get;set;} 
		public IfcLabel Name{get;set;} 
		public IfcText Description{get;set;} // optional
		public IfcURIReference Location{get;set;} // optional
		public IfcText Purpose{get;set;} // optional
		public IfcText IntendedUse{get;set;} // optional
		public IfcText Scope{get;set;} // optional
		public IfcLabel Revision{get;set;} // optional
		public IfcActorSelect DocumentOwner{get;set;} // optional
		public List<IfcActorSelect> Editors{get;set;} // optional
		public IfcDateTime CreationTime{get;set;} // optional
		public IfcDateTime LastRevisionTime{get;set;} // optional
		public IfcIdentifier ElectronicFormat{get;set;} // optional
		public IfcDate ValidFrom{get;set;} // optional
		public IfcDate ValidUntil{get;set;} // optional
		public IfcDocumentConfidentialityEnum Confidentiality{get;set;} // optional
		public IfcDocumentStatusEnum Status{get;set;} // optional

		public IfcDocumentInformation(IfcIdentifier identification,IfcLabel name):base()
		{
			Identification = identification;
			Name = name;

			Editors = new List<IfcActorSelect>();

		}

		public static new IfcDocumentInformation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDocumentInformation>(json);
		}

		public static new IfcDocumentInformation FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdocumentinformationrelationship.htm"/>
	/// </summary>
	public  partial class IfcDocumentInformationRelationship : IfcResourceLevelRelationship
	{
		public IfcDocumentInformation RelatingDocument{get;set;} 
		public List<IfcDocumentInformation> RelatedDocuments{get;set;} 
		public IfcLabel RelationshipType{get;set;} // optional

		public IfcDocumentInformationRelationship(IfcDocumentInformation relatingDocument,List<IfcDocumentInformation> relatedDocuments):base()
		{
			RelatingDocument = relatingDocument;
			RelatedDocuments = relatedDocuments;


		}

		public static new IfcDocumentInformationRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDocumentInformationRelationship>(json);
		}

		public static new IfcDocumentInformationRelationship FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdocumentreference.htm"/>
	/// </summary>
	public  partial class IfcDocumentReference : IfcExternalReference
	{
		public IfcText Description{get;set;} // optional
		public IfcDocumentInformation ReferencedDocument{get;set;} // optional

		public IfcDocumentReference():base()
		{


		}

		public static new IfcDocumentReference FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDocumentReference>(json);
		}

		public static new IfcDocumentReference FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoorstandardcase.htm"/>
	/// </summary>
	public  partial class IfcDoorStandardCase : IfcDoor
	{

		public IfcDoorStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDoorStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDoorStandardCase>(json);
		}

		public static new IfcDoorStandardCase FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoorliningproperties.htm"/>
	/// </summary>
	public  partial class IfcDoorLiningProperties : IfcPreDefinedPropertySet
	{
		public IfcPositiveLengthMeasure LiningDepth{get;set;} // optional
		public IfcNonNegativeLengthMeasure LiningThickness{get;set;} // optional
		public IfcPositiveLengthMeasure ThresholdDepth{get;set;} // optional
		public IfcNonNegativeLengthMeasure ThresholdThickness{get;set;} // optional
		public IfcNonNegativeLengthMeasure TransomThickness{get;set;} // optional
		public IfcLengthMeasure TransomOffset{get;set;} // optional
		public IfcLengthMeasure LiningOffset{get;set;} // optional
		public IfcLengthMeasure ThresholdOffset{get;set;} // optional
		public IfcPositiveLengthMeasure CasingThickness{get;set;} // optional
		public IfcPositiveLengthMeasure CasingDepth{get;set;} // optional
		public IfcShapeAspect ShapeAspectStyle{get;set;} // optional
		public IfcLengthMeasure LiningToPanelOffsetX{get;set;} // optional
		public IfcLengthMeasure LiningToPanelOffsetY{get;set;} // optional

		public IfcDoorLiningProperties(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDoorLiningProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDoorLiningProperties>(json);
		}

		public static new IfcDoorLiningProperties FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpredefinedpropertyset.htm"/>
	/// </summary>
	public abstract partial class IfcPreDefinedPropertySet : IfcPropertySetDefinition
	{

		public IfcPreDefinedPropertySet(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcPreDefinedPropertySet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPreDefinedPropertySet>(json);
		}

		public static new IfcPreDefinedPropertySet FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoorpanelproperties.htm"/>
	/// </summary>
	public  partial class IfcDoorPanelProperties : IfcPreDefinedPropertySet
	{
		public IfcPositiveLengthMeasure PanelDepth{get;set;} // optional
		public IfcDoorPanelOperationEnum PanelOperation{get;set;} 
		public IfcNormalisedRatioMeasure PanelWidth{get;set;} // optional
		public IfcDoorPanelPositionEnum PanelPosition{get;set;} 
		public IfcShapeAspect ShapeAspectStyle{get;set;} // optional

		public IfcDoorPanelProperties(IfcDoorPanelOperationEnum panelOperation,IfcDoorPanelPositionEnum panelPosition,IfcGloballyUniqueId globalId):base(globalId)
		{
			PanelOperation = panelOperation;
			PanelPosition = panelPosition;


		}

		public static new IfcDoorPanelProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDoorPanelProperties>(json);
		}

		public static new IfcDoorPanelProperties FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdoorstyle.htm"/>
	/// </summary>
	public  partial class IfcDoorStyle : IfcTypeProduct
	{
		public IfcDoorStyleOperationEnum OperationType{get;set;} 
		public IfcDoorStyleConstructionEnum ConstructionType{get;set;} 
		public bool ParameterTakesPrecedence{get;set;} 
		public bool Sizeable{get;set;} 

		public IfcDoorStyle(IfcDoorStyleOperationEnum operationType,IfcDoorStyleConstructionEnum constructionType,bool parameterTakesPrecedence,bool sizeable,IfcGloballyUniqueId globalId):base(globalId)
		{
			OperationType = operationType;
			ConstructionType = constructionType;
			ParameterTakesPrecedence = parameterTakesPrecedence;
			Sizeable = sizeable;


		}

		public static new IfcDoorStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDoorStyle>(json);
		}

		public static new IfcDoorStyle FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctypeproduct.htm"/>
	/// </summary>
	public  partial class IfcTypeProduct : IfcTypeObject
	{
		public List<IfcRepresentationMap> RepresentationMaps{get;set;} // optional
		public IfcLabel Tag{get;set;} // optional

		public IfcTypeProduct(IfcGloballyUniqueId globalId):base(globalId)
		{

			RepresentationMaps = new List<IfcRepresentationMap>();

		}

		public static new IfcTypeProduct FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTypeProduct>(json);
		}

		public static new IfcTypeProduct FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdraughtingpredefinedcolour.htm"/>
	/// </summary>
	public  partial class IfcDraughtingPreDefinedColour : IfcPreDefinedColour
	{

		public IfcDraughtingPreDefinedColour(IfcLabel name):base(name)
		{


		}

		public static new IfcDraughtingPreDefinedColour FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDraughtingPreDefinedColour>(json);
		}

		public static new IfcDraughtingPreDefinedColour FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpredefinedcolour.htm"/>
	/// </summary>
	public abstract partial class IfcPreDefinedColour : IfcPreDefinedItem
	{

		public IfcPreDefinedColour(IfcLabel name):base(name)
		{


		}

		public static new IfcPreDefinedColour FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPreDefinedColour>(json);
		}

		public static new IfcPreDefinedColour FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcdraughtingpredefinedcurvefont.htm"/>
	/// </summary>
	public  partial class IfcDraughtingPreDefinedCurveFont : IfcPreDefinedCurveFont
	{

		public IfcDraughtingPreDefinedCurveFont(IfcLabel name):base(name)
		{


		}

		public static new IfcDraughtingPreDefinedCurveFont FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDraughtingPreDefinedCurveFont>(json);
		}

		public static new IfcDraughtingPreDefinedCurveFont FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpredefinedcurvefont.htm"/>
	/// </summary>
	public abstract partial class IfcPreDefinedCurveFont : IfcPreDefinedItem
	{

		public IfcPreDefinedCurveFont(IfcLabel name):base(name)
		{


		}

		public static new IfcPreDefinedCurveFont FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPreDefinedCurveFont>(json);
		}

		public static new IfcPreDefinedCurveFont FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductfitting.htm"/>
	/// </summary>
	public  partial class IfcDuctFitting : IfcFlowFitting
	{
		public IfcDuctFittingTypeEnum PredefinedType{get;set;} // optional

		public IfcDuctFitting(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDuctFitting FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDuctFitting>(json);
		}

		public static new IfcDuctFitting FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductfittingtype.htm"/>
	/// </summary>
	public  partial class IfcDuctFittingType : IfcFlowFittingType
	{
		public IfcDuctFittingTypeEnum PredefinedType{get;set;} 

		public IfcDuctFittingType(IfcDuctFittingTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcDuctFittingType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDuctFittingType>(json);
		}

		public static new IfcDuctFittingType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductsegment.htm"/>
	/// </summary>
	public  partial class IfcDuctSegment : IfcFlowSegment
	{
		public IfcDuctSegmentTypeEnum PredefinedType{get;set;} // optional

		public IfcDuctSegment(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDuctSegment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDuctSegment>(json);
		}

		public static new IfcDuctSegment FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductsegmenttype.htm"/>
	/// </summary>
	public  partial class IfcDuctSegmentType : IfcFlowSegmentType
	{
		public IfcDuctSegmentTypeEnum PredefinedType{get;set;} 

		public IfcDuctSegmentType(IfcDuctSegmentTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcDuctSegmentType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDuctSegmentType>(json);
		}

		public static new IfcDuctSegmentType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductsilencer.htm"/>
	/// </summary>
	public  partial class IfcDuctSilencer : IfcFlowTreatmentDevice
	{
		public IfcDuctSilencerTypeEnum PredefinedType{get;set;} // optional

		public IfcDuctSilencer(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcDuctSilencer FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDuctSilencer>(json);
		}

		public static new IfcDuctSilencer FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcductsilencertype.htm"/>
	/// </summary>
	public  partial class IfcDuctSilencerType : IfcFlowTreatmentDeviceType
	{
		public IfcDuctSilencerTypeEnum PredefinedType{get;set;} 

		public IfcDuctSilencerType(IfcDuctSilencerTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcDuctSilencerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcDuctSilencerType>(json);
		}

		public static new IfcDuctSilencerType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcedge.htm"/>
	/// </summary>
	public  partial class IfcEdge : IfcTopologicalRepresentationItem
	{
		public IfcVertex EdgeStart{get;set;} 
		public IfcVertex EdgeEnd{get;set;} 

		public IfcEdge(IfcVertex edgeStart,IfcVertex edgeEnd):base()
		{
			EdgeStart = edgeStart;
			EdgeEnd = edgeEnd;


		}

		public static new IfcEdge FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEdge>(json);
		}

		public static new IfcEdge FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcedgecurve.htm"/>
	/// </summary>
	public  partial class IfcEdgeCurve : IfcEdge
	{
		public IfcCurve EdgeGeometry{get;set;} 
		public bool SameSense{get;set;} 

		public IfcEdgeCurve(IfcCurve edgeGeometry,bool sameSense,IfcVertex edgeStart,IfcVertex edgeEnd):base(edgeStart,edgeEnd)
		{
			EdgeGeometry = edgeGeometry;
			SameSense = sameSense;


		}

		public static new IfcEdgeCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEdgeCurve>(json);
		}

		public static new IfcEdgeCurve FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcorientededge.htm"/>
	/// </summary>
	public  partial class IfcOrientedEdge : IfcEdge
	{
		public IfcEdge EdgeElement{get;set;} 
		public bool Orientation{get;set;} 

		public IfcOrientedEdge(IfcEdge edgeElement,bool orientation,IfcVertex edgeStart,IfcVertex edgeEnd):base(edgeStart,edgeEnd)
		{
			EdgeElement = edgeElement;
			Orientation = orientation;


		}

		public static new IfcOrientedEdge FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOrientedEdge>(json);
		}

		public static new IfcOrientedEdge FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsubedge.htm"/>
	/// </summary>
	public  partial class IfcSubedge : IfcEdge
	{
		public IfcEdge ParentEdge{get;set;} 

		public IfcSubedge(IfcEdge parentEdge,IfcVertex edgeStart,IfcVertex edgeEnd):base(edgeStart,edgeEnd)
		{
			ParentEdge = parentEdge;


		}

		public static new IfcSubedge FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSubedge>(json);
		}

		public static new IfcSubedge FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcedgeloop.htm"/>
	/// </summary>
	public  partial class IfcEdgeLoop : IfcLoop
	{
		public List<IfcOrientedEdge> EdgeList{get;set;} 

		public IfcEdgeLoop(List<IfcOrientedEdge> edgeList):base()
		{
			EdgeList = edgeList;


		}

		public static new IfcEdgeLoop FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEdgeLoop>(json);
		}

		public static new IfcEdgeLoop FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcloop.htm"/>
	/// </summary>
	public  partial class IfcLoop : IfcTopologicalRepresentationItem
	{

		public IfcLoop():base()
		{


		}

		public static new IfcLoop FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLoop>(json);
		}

		public static new IfcLoop FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricappliance.htm"/>
	/// </summary>
	public  partial class IfcElectricAppliance : IfcFlowTerminal
	{
		public IfcElectricApplianceTypeEnum PredefinedType{get;set;} // optional

		public IfcElectricAppliance(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcElectricAppliance FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricAppliance>(json);
		}

		public static new IfcElectricAppliance FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricappliancetype.htm"/>
	/// </summary>
	public  partial class IfcElectricApplianceType : IfcFlowTerminalType
	{
		public IfcElectricApplianceTypeEnum PredefinedType{get;set;} 

		public IfcElectricApplianceType(IfcElectricApplianceTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcElectricApplianceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricApplianceType>(json);
		}

		public static new IfcElectricApplianceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricdistributionboard.htm"/>
	/// </summary>
	public  partial class IfcElectricDistributionBoard : IfcFlowController
	{
		public IfcElectricDistributionBoardTypeEnum PredefinedType{get;set;} // optional

		public IfcElectricDistributionBoard(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcElectricDistributionBoard FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricDistributionBoard>(json);
		}

		public static new IfcElectricDistributionBoard FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricdistributionboardtype.htm"/>
	/// </summary>
	public  partial class IfcElectricDistributionBoardType : IfcFlowControllerType
	{
		public IfcElectricDistributionBoardTypeEnum PredefinedType{get;set;} 

		public IfcElectricDistributionBoardType(IfcElectricDistributionBoardTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcElectricDistributionBoardType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricDistributionBoardType>(json);
		}

		public static new IfcElectricDistributionBoardType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricflowstoragedevice.htm"/>
	/// </summary>
	public  partial class IfcElectricFlowStorageDevice : IfcFlowStorageDevice
	{
		public IfcElectricFlowStorageDeviceTypeEnum PredefinedType{get;set;} // optional

		public IfcElectricFlowStorageDevice(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcElectricFlowStorageDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricFlowStorageDevice>(json);
		}

		public static new IfcElectricFlowStorageDevice FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricflowstoragedevicetype.htm"/>
	/// </summary>
	public  partial class IfcElectricFlowStorageDeviceType : IfcFlowStorageDeviceType
	{
		public IfcElectricFlowStorageDeviceTypeEnum PredefinedType{get;set;} 

		public IfcElectricFlowStorageDeviceType(IfcElectricFlowStorageDeviceTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcElectricFlowStorageDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricFlowStorageDeviceType>(json);
		}

		public static new IfcElectricFlowStorageDeviceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricgenerator.htm"/>
	/// </summary>
	public  partial class IfcElectricGenerator : IfcEnergyConversionDevice
	{
		public IfcElectricGeneratorTypeEnum PredefinedType{get;set;} // optional

		public IfcElectricGenerator(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcElectricGenerator FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricGenerator>(json);
		}

		public static new IfcElectricGenerator FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricgeneratortype.htm"/>
	/// </summary>
	public  partial class IfcElectricGeneratorType : IfcEnergyConversionDeviceType
	{
		public IfcElectricGeneratorTypeEnum PredefinedType{get;set;} 

		public IfcElectricGeneratorType(IfcElectricGeneratorTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcElectricGeneratorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricGeneratorType>(json);
		}

		public static new IfcElectricGeneratorType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricmotor.htm"/>
	/// </summary>
	public  partial class IfcElectricMotor : IfcEnergyConversionDevice
	{
		public IfcElectricMotorTypeEnum PredefinedType{get;set;} // optional

		public IfcElectricMotor(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcElectricMotor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricMotor>(json);
		}

		public static new IfcElectricMotor FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectricmotortype.htm"/>
	/// </summary>
	public  partial class IfcElectricMotorType : IfcEnergyConversionDeviceType
	{
		public IfcElectricMotorTypeEnum PredefinedType{get;set;} 

		public IfcElectricMotorType(IfcElectricMotorTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcElectricMotorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricMotorType>(json);
		}

		public static new IfcElectricMotorType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectrictimecontrol.htm"/>
	/// </summary>
	public  partial class IfcElectricTimeControl : IfcFlowController
	{
		public IfcElectricTimeControlTypeEnum PredefinedType{get;set;} // optional

		public IfcElectricTimeControl(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcElectricTimeControl FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricTimeControl>(json);
		}

		public static new IfcElectricTimeControl FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelectrictimecontroltype.htm"/>
	/// </summary>
	public  partial class IfcElectricTimeControlType : IfcFlowControllerType
	{
		public IfcElectricTimeControlTypeEnum PredefinedType{get;set;} 

		public IfcElectricTimeControlType(IfcElectricTimeControlTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcElectricTimeControlType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElectricTimeControlType>(json);
		}

		public static new IfcElectricTimeControlType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementassembly.htm"/>
	/// </summary>
	public  partial class IfcElementAssembly : IfcElement
	{
		public IfcAssemblyPlaceEnum AssemblyPlace{get;set;} // optional
		public IfcElementAssemblyTypeEnum PredefinedType{get;set;} // optional

		public IfcElementAssembly(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcElementAssembly FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElementAssembly>(json);
		}

		public static new IfcElementAssembly FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfeatureelement.htm"/>
	/// </summary>
	public abstract partial class IfcFeatureElement : IfcElement
	{

		public IfcFeatureElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFeatureElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFeatureElement>(json);
		}

		public static new IfcFeatureElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfurnishingelement.htm"/>
	/// </summary>
	public  partial class IfcFurnishingElement : IfcElement
	{

		public IfcFurnishingElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFurnishingElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFurnishingElement>(json);
		}

		public static new IfcFurnishingElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeographicelement.htm"/>
	/// </summary>
	public  partial class IfcGeographicElement : IfcElement
	{
		public IfcGeographicElementTypeEnum PredefinedType{get;set;} // optional

		public IfcGeographicElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcGeographicElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGeographicElement>(json);
		}

		public static new IfcGeographicElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctransportelement.htm"/>
	/// </summary>
	public  partial class IfcTransportElement : IfcElement
	{
		public IfcTransportElementTypeEnum PredefinedType{get;set;} // optional

		public IfcTransportElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcTransportElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTransportElement>(json);
		}

		public static new IfcTransportElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvirtualelement.htm"/>
	/// </summary>
	public  partial class IfcVirtualElement : IfcElement
	{

		public IfcVirtualElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcVirtualElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVirtualElement>(json);
		}

		public static new IfcVirtualElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementassemblytype.htm"/>
	/// </summary>
	public  partial class IfcElementAssemblyType : IfcElementType
	{
		public IfcElementAssemblyTypeEnum PredefinedType{get;set;} 

		public IfcElementAssemblyType(IfcElementAssemblyTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcElementAssemblyType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElementAssemblyType>(json);
		}

		public static new IfcElementAssemblyType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfastener.htm"/>
	/// </summary>
	public  partial class IfcFastener : IfcElementComponent
	{
		public IfcFastenerTypeEnum PredefinedType{get;set;} // optional

		public IfcFastener(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFastener FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFastener>(json);
		}

		public static new IfcFastener FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmechanicalfastener.htm"/>
	/// </summary>
	public  partial class IfcMechanicalFastener : IfcElementComponent
	{
		public IfcPositiveLengthMeasure NominalDiameter{get;set;} // optional
		public IfcPositiveLengthMeasure NominalLength{get;set;} // optional
		public IfcMechanicalFastenerTypeEnum PredefinedType{get;set;} // optional

		public IfcMechanicalFastener(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcMechanicalFastener FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMechanicalFastener>(json);
		}

		public static new IfcMechanicalFastener FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingelement.htm"/>
	/// </summary>
	public abstract partial class IfcReinforcingElement : IfcElementComponent
	{
		public IfcLabel SteelGrade{get;set;} // optional

		public IfcReinforcingElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcReinforcingElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReinforcingElement>(json);
		}

		public static new IfcReinforcingElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvibrationisolator.htm"/>
	/// </summary>
	public  partial class IfcVibrationIsolator : IfcElementComponent
	{
		public IfcVibrationIsolatorTypeEnum PredefinedType{get;set;} // optional

		public IfcVibrationIsolator(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcVibrationIsolator FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVibrationIsolator>(json);
		}

		public static new IfcVibrationIsolator FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfastenertype.htm"/>
	/// </summary>
	public  partial class IfcFastenerType : IfcElementComponentType
	{
		public IfcFastenerTypeEnum PredefinedType{get;set;} 

		public IfcFastenerType(IfcFastenerTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcFastenerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFastenerType>(json);
		}

		public static new IfcFastenerType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmechanicalfastenertype.htm"/>
	/// </summary>
	public  partial class IfcMechanicalFastenerType : IfcElementComponentType
	{
		public IfcMechanicalFastenerTypeEnum PredefinedType{get;set;} 
		public IfcPositiveLengthMeasure NominalDiameter{get;set;} // optional
		public IfcPositiveLengthMeasure NominalLength{get;set;} // optional

		public IfcMechanicalFastenerType(IfcMechanicalFastenerTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcMechanicalFastenerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMechanicalFastenerType>(json);
		}

		public static new IfcMechanicalFastenerType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingelementtype.htm"/>
	/// </summary>
	public abstract partial class IfcReinforcingElementType : IfcElementComponentType
	{

		public IfcReinforcingElementType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcReinforcingElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReinforcingElementType>(json);
		}

		public static new IfcReinforcingElementType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvibrationisolatortype.htm"/>
	/// </summary>
	public  partial class IfcVibrationIsolatorType : IfcElementComponentType
	{
		public IfcVibrationIsolatorTypeEnum PredefinedType{get;set;} 

		public IfcVibrationIsolatorType(IfcVibrationIsolatorTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcVibrationIsolatorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVibrationIsolatorType>(json);
		}

		public static new IfcVibrationIsolatorType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcelementquantity.htm"/>
	/// </summary>
	public  partial class IfcElementQuantity : IfcQuantitySet
	{
		public IfcLabel MethodOfMeasurement{get;set;} // optional
		public List<IfcPhysicalQuantity> Quantities{get;set;} 

		public IfcElementQuantity(List<IfcPhysicalQuantity> quantities,IfcGloballyUniqueId globalId):base(globalId)
		{
			Quantities = quantities;


		}

		public static new IfcElementQuantity FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcElementQuantity>(json);
		}

		public static new IfcElementQuantity FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcquantityset.htm"/>
	/// </summary>
	public abstract partial class IfcQuantitySet : IfcPropertySetDefinition
	{

		public IfcQuantitySet(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcQuantitySet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcQuantitySet>(json);
		}

		public static new IfcQuantitySet FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfurnishingelementtype.htm"/>
	/// </summary>
	public  partial class IfcFurnishingElementType : IfcElementType
	{

		public IfcFurnishingElementType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFurnishingElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFurnishingElementType>(json);
		}

		public static new IfcFurnishingElementType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeographicelementtype.htm"/>
	/// </summary>
	public  partial class IfcGeographicElementType : IfcElementType
	{
		public IfcGeographicElementTypeEnum PredefinedType{get;set;} 

		public IfcGeographicElementType(IfcGeographicElementTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcGeographicElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGeographicElementType>(json);
		}

		public static new IfcGeographicElementType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctransportelementtype.htm"/>
	/// </summary>
	public  partial class IfcTransportElementType : IfcElementType
	{
		public IfcTransportElementTypeEnum PredefinedType{get;set;} 

		public IfcTransportElementType(IfcTransportElementTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcTransportElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTransportElementType>(json);
		}

		public static new IfcTransportElementType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplane.htm"/>
	/// </summary>
	public  partial class IfcPlane : IfcElementarySurface
	{

		public IfcPlane(IfcAxis2Placement3D position):base(position)
		{


		}

		public static new IfcPlane FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlane>(json);
		}

		public static new IfcPlane FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcellipseprofiledef.htm"/>
	/// </summary>
	public  partial class IfcEllipseProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure SemiAxis1{get;set;} 
		public IfcPositiveLengthMeasure SemiAxis2{get;set;} 

		public IfcEllipseProfileDef(IfcPositiveLengthMeasure semiAxis1,IfcPositiveLengthMeasure semiAxis2,IfcProfileTypeEnum profileType):base(profileType)
		{
			SemiAxis1 = semiAxis1;
			SemiAxis2 = semiAxis2;


		}

		public static new IfcEllipseProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEllipseProfileDef>(json);
		}

		public static new IfcEllipseProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcengine.htm"/>
	/// </summary>
	public  partial class IfcEngine : IfcEnergyConversionDevice
	{
		public IfcEngineTypeEnum PredefinedType{get;set;} // optional

		public IfcEngine(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcEngine FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEngine>(json);
		}

		public static new IfcEngine FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcevaporativecooler.htm"/>
	/// </summary>
	public  partial class IfcEvaporativeCooler : IfcEnergyConversionDevice
	{
		public IfcEvaporativeCoolerTypeEnum PredefinedType{get;set;} // optional

		public IfcEvaporativeCooler(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcEvaporativeCooler FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEvaporativeCooler>(json);
		}

		public static new IfcEvaporativeCooler FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcevaporator.htm"/>
	/// </summary>
	public  partial class IfcEvaporator : IfcEnergyConversionDevice
	{
		public IfcEvaporatorTypeEnum PredefinedType{get;set;} // optional

		public IfcEvaporator(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcEvaporator FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEvaporator>(json);
		}

		public static new IfcEvaporator FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcheatexchanger.htm"/>
	/// </summary>
	public  partial class IfcHeatExchanger : IfcEnergyConversionDevice
	{
		public IfcHeatExchangerTypeEnum PredefinedType{get;set;} // optional

		public IfcHeatExchanger(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcHeatExchanger FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcHeatExchanger>(json);
		}

		public static new IfcHeatExchanger FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifchumidifier.htm"/>
	/// </summary>
	public  partial class IfcHumidifier : IfcEnergyConversionDevice
	{
		public IfcHumidifierTypeEnum PredefinedType{get;set;} // optional

		public IfcHumidifier(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcHumidifier FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcHumidifier>(json);
		}

		public static new IfcHumidifier FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmotorconnection.htm"/>
	/// </summary>
	public  partial class IfcMotorConnection : IfcEnergyConversionDevice
	{
		public IfcMotorConnectionTypeEnum PredefinedType{get;set;} // optional

		public IfcMotorConnection(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcMotorConnection FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMotorConnection>(json);
		}

		public static new IfcMotorConnection FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsolardevice.htm"/>
	/// </summary>
	public  partial class IfcSolarDevice : IfcEnergyConversionDevice
	{
		public IfcSolarDeviceTypeEnum PredefinedType{get;set;} // optional

		public IfcSolarDevice(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSolarDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSolarDevice>(json);
		}

		public static new IfcSolarDevice FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctransformer.htm"/>
	/// </summary>
	public  partial class IfcTransformer : IfcEnergyConversionDevice
	{
		public IfcTransformerTypeEnum PredefinedType{get;set;} // optional

		public IfcTransformer(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcTransformer FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTransformer>(json);
		}

		public static new IfcTransformer FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctubebundle.htm"/>
	/// </summary>
	public  partial class IfcTubeBundle : IfcEnergyConversionDevice
	{
		public IfcTubeBundleTypeEnum PredefinedType{get;set;} // optional

		public IfcTubeBundle(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcTubeBundle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTubeBundle>(json);
		}

		public static new IfcTubeBundle FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunitaryequipment.htm"/>
	/// </summary>
	public  partial class IfcUnitaryEquipment : IfcEnergyConversionDevice
	{
		public IfcUnitaryEquipmentTypeEnum PredefinedType{get;set;} // optional

		public IfcUnitaryEquipment(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcUnitaryEquipment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcUnitaryEquipment>(json);
		}

		public static new IfcUnitaryEquipment FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcenginetype.htm"/>
	/// </summary>
	public  partial class IfcEngineType : IfcEnergyConversionDeviceType
	{
		public IfcEngineTypeEnum PredefinedType{get;set;} 

		public IfcEngineType(IfcEngineTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcEngineType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEngineType>(json);
		}

		public static new IfcEngineType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcevaporativecoolertype.htm"/>
	/// </summary>
	public  partial class IfcEvaporativeCoolerType : IfcEnergyConversionDeviceType
	{
		public IfcEvaporativeCoolerTypeEnum PredefinedType{get;set;} 

		public IfcEvaporativeCoolerType(IfcEvaporativeCoolerTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcEvaporativeCoolerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEvaporativeCoolerType>(json);
		}

		public static new IfcEvaporativeCoolerType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcevaporatortype.htm"/>
	/// </summary>
	public  partial class IfcEvaporatorType : IfcEnergyConversionDeviceType
	{
		public IfcEvaporatorTypeEnum PredefinedType{get;set;} 

		public IfcEvaporatorType(IfcEvaporatorTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcEvaporatorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEvaporatorType>(json);
		}

		public static new IfcEvaporatorType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcheatexchangertype.htm"/>
	/// </summary>
	public  partial class IfcHeatExchangerType : IfcEnergyConversionDeviceType
	{
		public IfcHeatExchangerTypeEnum PredefinedType{get;set;} 

		public IfcHeatExchangerType(IfcHeatExchangerTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcHeatExchangerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcHeatExchangerType>(json);
		}

		public static new IfcHeatExchangerType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifchumidifiertype.htm"/>
	/// </summary>
	public  partial class IfcHumidifierType : IfcEnergyConversionDeviceType
	{
		public IfcHumidifierTypeEnum PredefinedType{get;set;} 

		public IfcHumidifierType(IfcHumidifierTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcHumidifierType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcHumidifierType>(json);
		}

		public static new IfcHumidifierType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmotorconnectiontype.htm"/>
	/// </summary>
	public  partial class IfcMotorConnectionType : IfcEnergyConversionDeviceType
	{
		public IfcMotorConnectionTypeEnum PredefinedType{get;set;} 

		public IfcMotorConnectionType(IfcMotorConnectionTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcMotorConnectionType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMotorConnectionType>(json);
		}

		public static new IfcMotorConnectionType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsolardevicetype.htm"/>
	/// </summary>
	public  partial class IfcSolarDeviceType : IfcEnergyConversionDeviceType
	{
		public IfcSolarDeviceTypeEnum PredefinedType{get;set;} 

		public IfcSolarDeviceType(IfcSolarDeviceTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcSolarDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSolarDeviceType>(json);
		}

		public static new IfcSolarDeviceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctransformertype.htm"/>
	/// </summary>
	public  partial class IfcTransformerType : IfcEnergyConversionDeviceType
	{
		public IfcTransformerTypeEnum PredefinedType{get;set;} 

		public IfcTransformerType(IfcTransformerTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcTransformerType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTransformerType>(json);
		}

		public static new IfcTransformerType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctubebundletype.htm"/>
	/// </summary>
	public  partial class IfcTubeBundleType : IfcEnergyConversionDeviceType
	{
		public IfcTubeBundleTypeEnum PredefinedType{get;set;} 

		public IfcTubeBundleType(IfcTubeBundleTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcTubeBundleType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTubeBundleType>(json);
		}

		public static new IfcTubeBundleType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunitaryequipmenttype.htm"/>
	/// </summary>
	public  partial class IfcUnitaryEquipmentType : IfcEnergyConversionDeviceType
	{
		public IfcUnitaryEquipmentTypeEnum PredefinedType{get;set;} 

		public IfcUnitaryEquipmentType(IfcUnitaryEquipmentTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcUnitaryEquipmentType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcUnitaryEquipmentType>(json);
		}

		public static new IfcUnitaryEquipmentType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcevent.htm"/>
	/// </summary>
	public  partial class IfcEvent : IfcProcess
	{
		public IfcEventTypeEnum PredefinedType{get;set;} // optional
		public IfcEventTriggerTypeEnum EventTriggerType{get;set;} // optional
		public IfcLabel UserDefinedEventTriggerType{get;set;} // optional
		public IfcEventTime EventOccurenceTime{get;set;} // optional

		public IfcEvent(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcEvent FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEvent>(json);
		}

		public static new IfcEvent FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprocess.htm"/>
	/// </summary>
	public abstract partial class IfcProcess : IfcObject
	{
		public IfcIdentifier Identification{get;set;} // optional
		public IfcText LongDescription{get;set;} // optional

		public IfcProcess(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcProcess FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProcess>(json);
		}

		public static new IfcProcess FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifceventtime.htm"/>
	/// </summary>
	public  partial class IfcEventTime : IfcSchedulingTime
	{
		public IfcDateTime ActualDate{get;set;} // optional
		public IfcDateTime EarlyDate{get;set;} // optional
		public IfcDateTime LateDate{get;set;} // optional
		public IfcDateTime ScheduleDate{get;set;} // optional

		public IfcEventTime():base()
		{


		}

		public static new IfcEventTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEventTime>(json);
		}

		public static new IfcEventTime FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcschedulingtime.htm"/>
	/// </summary>
	public abstract partial class IfcSchedulingTime : IfcBase
	{
		public IfcLabel Name{get;set;} // optional
		public IfcDataOriginEnum DataOrigin{get;set;} // optional
		public IfcLabel UserDefinedDataOrigin{get;set;} // optional

		public IfcSchedulingTime():base()
		{


		}

		public static  IfcSchedulingTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSchedulingTime>(json);
		}

		public static  IfcSchedulingTime FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifceventtype.htm"/>
	/// </summary>
	public  partial class IfcEventType : IfcTypeProcess
	{
		public IfcEventTypeEnum PredefinedType{get;set;} 
		public IfcEventTriggerTypeEnum EventTriggerType{get;set;} 
		public IfcLabel UserDefinedEventTriggerType{get;set;} // optional

		public IfcEventType(IfcEventTypeEnum predefinedType,IfcEventTriggerTypeEnum eventTriggerType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;
			EventTriggerType = eventTriggerType;


		}

		public static new IfcEventType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcEventType>(json);
		}

		public static new IfcEventType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctypeprocess.htm"/>
	/// </summary>
	public abstract partial class IfcTypeProcess : IfcTypeObject
	{
		public IfcIdentifier Identification{get;set;} // optional
		public IfcText LongDescription{get;set;} // optional
		public IfcLabel ProcessType{get;set;} // optional

		public IfcTypeProcess(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcTypeProcess FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTypeProcess>(json);
		}

		public static new IfcTypeProcess FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcextendedproperties.htm"/>
	/// </summary>
	public abstract partial class IfcExtendedProperties : IfcPropertyAbstraction
	{
		public IfcIdentifier Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public List<IfcProperty> Properties{get;set;} 

		public IfcExtendedProperties(List<IfcProperty> properties):base()
		{
			Properties = properties;


		}

		public static new IfcExtendedProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExtendedProperties>(json);
		}

		public static new IfcExtendedProperties FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialproperties.htm"/>
	/// </summary>
	public  partial class IfcMaterialProperties : IfcExtendedProperties
	{
		public IfcMaterialDefinition Material{get;set;} 

		public IfcMaterialProperties(IfcMaterialDefinition material,List<IfcProperty> properties):base(properties)
		{
			Material = material;


		}

		public static new IfcMaterialProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialProperties>(json);
		}

		public static new IfcMaterialProperties FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprofileproperties.htm"/>
	/// </summary>
	public  partial class IfcProfileProperties : IfcExtendedProperties
	{
		public IfcProfileDef ProfileDefinition{get;set;} 

		public IfcProfileProperties(IfcProfileDef profileDefinition,List<IfcProperty> properties):base(properties)
		{
			ProfileDefinition = profileDefinition;


		}

		public static new IfcProfileProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProfileProperties>(json);
		}

		public static new IfcProfileProperties FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertyabstraction.htm"/>
	/// </summary>
	public abstract partial class IfcPropertyAbstraction : IfcBase
	{

		public IfcPropertyAbstraction():base()
		{


		}

		public static  IfcPropertyAbstraction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyAbstraction>(json);
		}

		public static  IfcPropertyAbstraction FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclibraryinformation.htm"/>
	/// </summary>
	public  partial class IfcLibraryInformation : IfcExternalInformation
	{
		public IfcLabel Name{get;set;} 
		public IfcLabel Version{get;set;} // optional
		public IfcActorSelect Publisher{get;set;} // optional
		public IfcDateTime VersionDate{get;set;} // optional
		public IfcURIReference Location{get;set;} // optional
		public IfcText Description{get;set;} // optional

		public IfcLibraryInformation(IfcLabel name):base()
		{
			Name = name;


		}

		public static new IfcLibraryInformation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLibraryInformation>(json);
		}

		public static new IfcLibraryInformation FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternallydefinedhatchstyle.htm"/>
	/// </summary>
	public  partial class IfcExternallyDefinedHatchStyle : IfcExternalReference
	{

		public IfcExternallyDefinedHatchStyle():base()
		{


		}

		public static new IfcExternallyDefinedHatchStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExternallyDefinedHatchStyle>(json);
		}

		public static new IfcExternallyDefinedHatchStyle FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternallydefinedsurfacestyle.htm"/>
	/// </summary>
	public  partial class IfcExternallyDefinedSurfaceStyle : IfcExternalReference
	{

		public IfcExternallyDefinedSurfaceStyle():base()
		{


		}

		public static new IfcExternallyDefinedSurfaceStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExternallyDefinedSurfaceStyle>(json);
		}

		public static new IfcExternallyDefinedSurfaceStyle FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternallydefinedtextfont.htm"/>
	/// </summary>
	public  partial class IfcExternallyDefinedTextFont : IfcExternalReference
	{

		public IfcExternallyDefinedTextFont():base()
		{


		}

		public static new IfcExternallyDefinedTextFont FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExternallyDefinedTextFont>(json);
		}

		public static new IfcExternallyDefinedTextFont FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclibraryreference.htm"/>
	/// </summary>
	public  partial class IfcLibraryReference : IfcExternalReference
	{
		public IfcText Description{get;set;} // optional
		public IfcLanguageId Language{get;set;} // optional
		public IfcLibraryInformation ReferencedLibrary{get;set;} // optional

		public IfcLibraryReference():base()
		{


		}

		public static new IfcLibraryReference FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLibraryReference>(json);
		}

		public static new IfcLibraryReference FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternalreferencerelationship.htm"/>
	/// </summary>
	public  partial class IfcExternalReferenceRelationship : IfcResourceLevelRelationship
	{
		public IfcExternalReference RelatingReference{get;set;} 
		public List<IfcResourceObjectSelect> RelatedResourceObjects{get;set;} 

		public IfcExternalReferenceRelationship(IfcExternalReference relatingReference,List<IfcResourceObjectSelect> relatedResourceObjects):base()
		{
			RelatingReference = relatingReference;
			RelatedResourceObjects = relatedResourceObjects;


		}

		public static new IfcExternalReferenceRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExternalReferenceRelationship>(json);
		}

		public static new IfcExternalReferenceRelationship FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternalspatialelement.htm"/>
	/// </summary>
	public  partial class IfcExternalSpatialElement : IfcExternalSpatialStructureElement
	{
		public IfcExternalSpatialElementTypeEnum PredefinedType{get;set;} // optional

		public IfcExternalSpatialElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcExternalSpatialElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExternalSpatialElement>(json);
		}

		public static new IfcExternalSpatialElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcexternalspatialstructureelement.htm"/>
	/// </summary>
	public abstract partial class IfcExternalSpatialStructureElement : IfcSpatialElement
	{

		public IfcExternalSpatialStructureElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcExternalSpatialStructureElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExternalSpatialStructureElement>(json);
		}

		public static new IfcExternalSpatialStructureElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspatialelement.htm"/>
	/// </summary>
	public abstract partial class IfcSpatialElement : IfcProduct
	{
		public IfcLabel LongName{get;set;} // optional

		public IfcSpatialElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSpatialElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpatialElement>(json);
		}

		public static new IfcSpatialElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcextrudedareasolid.htm"/>
	/// </summary>
	public  partial class IfcExtrudedAreaSolid : IfcSweptAreaSolid
	{
		public IfcDirection ExtrudedDirection{get;set;} 
		public IfcPositiveLengthMeasure Depth{get;set;} 

		public IfcExtrudedAreaSolid(IfcDirection extrudedDirection,IfcPositiveLengthMeasure depth,IfcProfileDef sweptArea):base(sweptArea)
		{
			ExtrudedDirection = extrudedDirection;
			Depth = depth;


		}

		public static new IfcExtrudedAreaSolid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExtrudedAreaSolid>(json);
		}

		public static new IfcExtrudedAreaSolid FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcextrudedareasolidtapered.htm"/>
	/// </summary>
	public  partial class IfcExtrudedAreaSolidTapered : IfcExtrudedAreaSolid
	{
		public IfcProfileDef EndSweptArea{get;set;} 

		public IfcExtrudedAreaSolidTapered(IfcProfileDef endSweptArea,IfcDirection extrudedDirection,IfcPositiveLengthMeasure depth,IfcProfileDef sweptArea):base(extrudedDirection,depth,sweptArea)
		{
			EndSweptArea = endSweptArea;


		}

		public static new IfcExtrudedAreaSolidTapered FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcExtrudedAreaSolidTapered>(json);
		}

		public static new IfcExtrudedAreaSolidTapered FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsweptareasolid.htm"/>
	/// </summary>
	public abstract partial class IfcSweptAreaSolid : IfcSolidModel
	{
		public IfcProfileDef SweptArea{get;set;} 
		public IfcAxis2Placement3D Position{get;set;} // optional

		public IfcSweptAreaSolid(IfcProfileDef sweptArea):base()
		{
			SweptArea = sweptArea;


		}

		public static new IfcSweptAreaSolid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSweptAreaSolid>(json);
		}

		public static new IfcSweptAreaSolid FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcface.htm"/>
	/// </summary>
	public  partial class IfcFace : IfcTopologicalRepresentationItem
	{
		public List<IfcFaceBound> Bounds{get;set;} 

		public IfcFace(List<IfcFaceBound> bounds):base()
		{
			Bounds = bounds;


		}

		public static new IfcFace FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFace>(json);
		}

		public static new IfcFace FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfacebasedsurfacemodel.htm"/>
	/// </summary>
	public  partial class IfcFaceBasedSurfaceModel : IfcGeometricRepresentationItem
	{
		public List<IfcConnectedFaceSet> FbsmFaces{get;set;} 

		public IfcFaceBasedSurfaceModel(List<IfcConnectedFaceSet> fbsmFaces):base()
		{
			FbsmFaces = fbsmFaces;


		}

		public static new IfcFaceBasedSurfaceModel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFaceBasedSurfaceModel>(json);
		}

		public static new IfcFaceBasedSurfaceModel FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfacebound.htm"/>
	/// </summary>
	public  partial class IfcFaceBound : IfcTopologicalRepresentationItem
	{
		public IfcLoop Bound{get;set;} 
		public bool Orientation{get;set;} 

		public IfcFaceBound(IfcLoop bound,bool orientation):base()
		{
			Bound = bound;
			Orientation = orientation;


		}

		public static new IfcFaceBound FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFaceBound>(json);
		}

		public static new IfcFaceBound FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfaceouterbound.htm"/>
	/// </summary>
	public  partial class IfcFaceOuterBound : IfcFaceBound
	{

		public IfcFaceOuterBound(IfcLoop bound,bool orientation):base(bound,orientation)
		{


		}

		public static new IfcFaceOuterBound FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFaceOuterBound>(json);
		}

		public static new IfcFaceOuterBound FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfacetedbrep.htm"/>
	/// </summary>
	public  partial class IfcFacetedBrep : IfcManifoldSolidBrep
	{

		public IfcFacetedBrep(IfcClosedShell outer):base(outer)
		{


		}

		public static new IfcFacetedBrep FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFacetedBrep>(json);
		}

		public static new IfcFacetedBrep FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfacetedbrepwithvoids.htm"/>
	/// </summary>
	public  partial class IfcFacetedBrepWithVoids : IfcFacetedBrep
	{
		public List<IfcClosedShell> Voids{get;set;} 

		public IfcFacetedBrepWithVoids(List<IfcClosedShell> voids,IfcClosedShell outer):base(outer)
		{
			Voids = voids;


		}

		public static new IfcFacetedBrepWithVoids FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFacetedBrepWithVoids>(json);
		}

		public static new IfcFacetedBrepWithVoids FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfailureconnectioncondition.htm"/>
	/// </summary>
	public  partial class IfcFailureConnectionCondition : IfcStructuralConnectionCondition
	{
		public IfcForceMeasure TensionFailureX{get;set;} // optional
		public IfcForceMeasure TensionFailureY{get;set;} // optional
		public IfcForceMeasure TensionFailureZ{get;set;} // optional
		public IfcForceMeasure CompressionFailureX{get;set;} // optional
		public IfcForceMeasure CompressionFailureY{get;set;} // optional
		public IfcForceMeasure CompressionFailureZ{get;set;} // optional

		public IfcFailureConnectionCondition():base()
		{


		}

		public static new IfcFailureConnectionCondition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFailureConnectionCondition>(json);
		}

		public static new IfcFailureConnectionCondition FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralconnectioncondition.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralConnectionCondition : IfcBase
	{
		public IfcLabel Name{get;set;} // optional

		public IfcStructuralConnectionCondition():base()
		{


		}

		public static  IfcStructuralConnectionCondition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralConnectionCondition>(json);
		}

		public static  IfcStructuralConnectionCondition FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfan.htm"/>
	/// </summary>
	public  partial class IfcFan : IfcFlowMovingDevice
	{
		public IfcFanTypeEnum PredefinedType{get;set;} // optional

		public IfcFan(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFan FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFan>(json);
		}

		public static new IfcFan FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfantype.htm"/>
	/// </summary>
	public  partial class IfcFanType : IfcFlowMovingDeviceType
	{
		public IfcFanTypeEnum PredefinedType{get;set;} 

		public IfcFanType(IfcFanTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcFanType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFanType>(json);
		}

		public static new IfcFanType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfeatureelementaddition.htm"/>
	/// </summary>
	public abstract partial class IfcFeatureElementAddition : IfcFeatureElement
	{

		public IfcFeatureElementAddition(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFeatureElementAddition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFeatureElementAddition>(json);
		}

		public static new IfcFeatureElementAddition FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfeatureelementsubtraction.htm"/>
	/// </summary>
	public abstract partial class IfcFeatureElementSubtraction : IfcFeatureElement
	{

		public IfcFeatureElementSubtraction(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFeatureElementSubtraction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFeatureElementSubtraction>(json);
		}

		public static new IfcFeatureElementSubtraction FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacefeature.htm"/>
	/// </summary>
	public  partial class IfcSurfaceFeature : IfcFeatureElement
	{
		public IfcSurfaceFeatureTypeEnum PredefinedType{get;set;} // optional

		public IfcSurfaceFeature(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSurfaceFeature FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceFeature>(json);
		}

		public static new IfcSurfaceFeature FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprojectionelement.htm"/>
	/// </summary>
	public  partial class IfcProjectionElement : IfcFeatureElementAddition
	{
		public IfcProjectionElementTypeEnum PredefinedType{get;set;} // optional

		public IfcProjectionElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcProjectionElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProjectionElement>(json);
		}

		public static new IfcProjectionElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcopeningelement.htm"/>
	/// </summary>
	public  partial class IfcOpeningElement : IfcFeatureElementSubtraction
	{
		public IfcOpeningElementTypeEnum PredefinedType{get;set;} // optional

		public IfcOpeningElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcOpeningElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOpeningElement>(json);
		}

		public static new IfcOpeningElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvoidingfeature.htm"/>
	/// </summary>
	public  partial class IfcVoidingFeature : IfcFeatureElementSubtraction
	{
		public IfcVoidingFeatureTypeEnum PredefinedType{get;set;} // optional

		public IfcVoidingFeature(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcVoidingFeature FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVoidingFeature>(json);
		}

		public static new IfcVoidingFeature FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfillareastyle.htm"/>
	/// </summary>
	public  partial class IfcFillAreaStyle : IfcPresentationStyle
	{
		public List<IfcFillStyleSelect> FillStyles{get;set;} 
		public bool ModelorDraughting{get;set;} // optional

		public IfcFillAreaStyle(List<IfcFillStyleSelect> fillStyles):base()
		{
			FillStyles = fillStyles;


		}

		public static new IfcFillAreaStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFillAreaStyle>(json);
		}

		public static new IfcFillAreaStyle FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfillareastylehatching.htm"/>
	/// </summary>
	public  partial class IfcFillAreaStyleHatching : IfcGeometricRepresentationItem
	{
		public IfcCurveStyle HatchLineAppearance{get;set;} 
		public IfcHatchLineDistanceSelect StartOfNextHatchLine{get;set;} 
		public IfcCartesianPoint PointOfReferenceHatchLine{get;set;} // optional
		public IfcCartesianPoint PatternStart{get;set;} // optional
		public IfcPlaneAngleMeasure HatchLineAngle{get;set;} 

		public IfcFillAreaStyleHatching(IfcCurveStyle hatchLineAppearance,IfcHatchLineDistanceSelect startOfNextHatchLine,IfcPlaneAngleMeasure hatchLineAngle):base()
		{
			HatchLineAppearance = hatchLineAppearance;
			StartOfNextHatchLine = startOfNextHatchLine;
			HatchLineAngle = hatchLineAngle;


		}

		public static new IfcFillAreaStyleHatching FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFillAreaStyleHatching>(json);
		}

		public static new IfcFillAreaStyleHatching FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfillareastyletiles.htm"/>
	/// </summary>
	public  partial class IfcFillAreaStyleTiles : IfcGeometricRepresentationItem
	{
		public List<IfcVector> TilingPattern{get;set;} 
		public List<IfcStyledItem> Tiles{get;set;} 
		public IfcPositiveRatioMeasure TilingScale{get;set;} 

		public IfcFillAreaStyleTiles(List<IfcVector> tilingPattern,List<IfcStyledItem> tiles,IfcPositiveRatioMeasure tilingScale):base()
		{
			TilingPattern = tilingPattern;
			Tiles = tiles;
			TilingScale = tilingScale;


		}

		public static new IfcFillAreaStyleTiles FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFillAreaStyleTiles>(json);
		}

		public static new IfcFillAreaStyleTiles FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfilter.htm"/>
	/// </summary>
	public  partial class IfcFilter : IfcFlowTreatmentDevice
	{
		public IfcFilterTypeEnum PredefinedType{get;set;} // optional

		public IfcFilter(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFilter FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFilter>(json);
		}

		public static new IfcFilter FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfiltertype.htm"/>
	/// </summary>
	public  partial class IfcFilterType : IfcFlowTreatmentDeviceType
	{
		public IfcFilterTypeEnum PredefinedType{get;set;} 

		public IfcFilterType(IfcFilterTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcFilterType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFilterType>(json);
		}

		public static new IfcFilterType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfiresuppressionterminal.htm"/>
	/// </summary>
	public  partial class IfcFireSuppressionTerminal : IfcFlowTerminal
	{
		public IfcFireSuppressionTerminalTypeEnum PredefinedType{get;set;} // optional

		public IfcFireSuppressionTerminal(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFireSuppressionTerminal FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFireSuppressionTerminal>(json);
		}

		public static new IfcFireSuppressionTerminal FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfiresuppressionterminaltype.htm"/>
	/// </summary>
	public  partial class IfcFireSuppressionTerminalType : IfcFlowTerminalType
	{
		public IfcFireSuppressionTerminalTypeEnum PredefinedType{get;set;} 

		public IfcFireSuppressionTerminalType(IfcFireSuppressionTerminalTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcFireSuppressionTerminalType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFireSuppressionTerminalType>(json);
		}

		public static new IfcFireSuppressionTerminalType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfixedreferencesweptareasolid.htm"/>
	/// </summary>
	public  partial class IfcFixedReferenceSweptAreaSolid : IfcSweptAreaSolid
	{
		public IfcCurve Directrix{get;set;} 
		public IfcParameterValue StartParam{get;set;} // optional
		public IfcParameterValue EndParam{get;set;} // optional
		public IfcDirection FixedReference{get;set;} 

		public IfcFixedReferenceSweptAreaSolid(IfcCurve directrix,IfcDirection fixedReference,IfcProfileDef sweptArea):base(sweptArea)
		{
			Directrix = directrix;
			FixedReference = fixedReference;


		}

		public static new IfcFixedReferenceSweptAreaSolid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFixedReferenceSweptAreaSolid>(json);
		}

		public static new IfcFixedReferenceSweptAreaSolid FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowmeter.htm"/>
	/// </summary>
	public  partial class IfcFlowMeter : IfcFlowController
	{
		public IfcFlowMeterTypeEnum PredefinedType{get;set;} // optional

		public IfcFlowMeter(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFlowMeter FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowMeter>(json);
		}

		public static new IfcFlowMeter FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprotectivedevice.htm"/>
	/// </summary>
	public  partial class IfcProtectiveDevice : IfcFlowController
	{
		public IfcProtectiveDeviceTypeEnum PredefinedType{get;set;} // optional

		public IfcProtectiveDevice(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcProtectiveDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProtectiveDevice>(json);
		}

		public static new IfcProtectiveDevice FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcswitchingdevice.htm"/>
	/// </summary>
	public  partial class IfcSwitchingDevice : IfcFlowController
	{
		public IfcSwitchingDeviceTypeEnum PredefinedType{get;set;} // optional

		public IfcSwitchingDevice(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSwitchingDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSwitchingDevice>(json);
		}

		public static new IfcSwitchingDevice FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvalve.htm"/>
	/// </summary>
	public  partial class IfcValve : IfcFlowController
	{
		public IfcValveTypeEnum PredefinedType{get;set;} // optional

		public IfcValve(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcValve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcValve>(json);
		}

		public static new IfcValve FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcflowmetertype.htm"/>
	/// </summary>
	public  partial class IfcFlowMeterType : IfcFlowControllerType
	{
		public IfcFlowMeterTypeEnum PredefinedType{get;set;} 

		public IfcFlowMeterType(IfcFlowMeterTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcFlowMeterType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFlowMeterType>(json);
		}

		public static new IfcFlowMeterType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprotectivedevicetype.htm"/>
	/// </summary>
	public  partial class IfcProtectiveDeviceType : IfcFlowControllerType
	{
		public IfcProtectiveDeviceTypeEnum PredefinedType{get;set;} 

		public IfcProtectiveDeviceType(IfcProtectiveDeviceTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcProtectiveDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProtectiveDeviceType>(json);
		}

		public static new IfcProtectiveDeviceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcswitchingdevicetype.htm"/>
	/// </summary>
	public  partial class IfcSwitchingDeviceType : IfcFlowControllerType
	{
		public IfcSwitchingDeviceTypeEnum PredefinedType{get;set;} 

		public IfcSwitchingDeviceType(IfcSwitchingDeviceTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcSwitchingDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSwitchingDeviceType>(json);
		}

		public static new IfcSwitchingDeviceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvalvetype.htm"/>
	/// </summary>
	public  partial class IfcValveType : IfcFlowControllerType
	{
		public IfcValveTypeEnum PredefinedType{get;set;} 

		public IfcValveType(IfcValveTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcValveType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcValveType>(json);
		}

		public static new IfcValveType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcjunctionbox.htm"/>
	/// </summary>
	public  partial class IfcJunctionBox : IfcFlowFitting
	{
		public IfcJunctionBoxTypeEnum PredefinedType{get;set;} // optional

		public IfcJunctionBox(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcJunctionBox FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcJunctionBox>(json);
		}

		public static new IfcJunctionBox FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpipefitting.htm"/>
	/// </summary>
	public  partial class IfcPipeFitting : IfcFlowFitting
	{
		public IfcPipeFittingTypeEnum PredefinedType{get;set;} // optional

		public IfcPipeFitting(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcPipeFitting FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPipeFitting>(json);
		}

		public static new IfcPipeFitting FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcjunctionboxtype.htm"/>
	/// </summary>
	public  partial class IfcJunctionBoxType : IfcFlowFittingType
	{
		public IfcJunctionBoxTypeEnum PredefinedType{get;set;} 

		public IfcJunctionBoxType(IfcJunctionBoxTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcJunctionBoxType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcJunctionBoxType>(json);
		}

		public static new IfcJunctionBoxType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpipefittingtype.htm"/>
	/// </summary>
	public  partial class IfcPipeFittingType : IfcFlowFittingType
	{
		public IfcPipeFittingTypeEnum PredefinedType{get;set;} 

		public IfcPipeFittingType(IfcPipeFittingTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcPipeFittingType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPipeFittingType>(json);
		}

		public static new IfcPipeFittingType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpump.htm"/>
	/// </summary>
	public  partial class IfcPump : IfcFlowMovingDevice
	{
		public IfcPumpTypeEnum PredefinedType{get;set;} // optional

		public IfcPump(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcPump FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPump>(json);
		}

		public static new IfcPump FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpumptype.htm"/>
	/// </summary>
	public  partial class IfcPumpType : IfcFlowMovingDeviceType
	{
		public IfcPumpTypeEnum PredefinedType{get;set;} 

		public IfcPumpType(IfcPumpTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcPumpType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPumpType>(json);
		}

		public static new IfcPumpType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpipesegment.htm"/>
	/// </summary>
	public  partial class IfcPipeSegment : IfcFlowSegment
	{
		public IfcPipeSegmentTypeEnum PredefinedType{get;set;} // optional

		public IfcPipeSegment(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcPipeSegment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPipeSegment>(json);
		}

		public static new IfcPipeSegment FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpipesegmenttype.htm"/>
	/// </summary>
	public  partial class IfcPipeSegmentType : IfcFlowSegmentType
	{
		public IfcPipeSegmentTypeEnum PredefinedType{get;set;} 

		public IfcPipeSegmentType(IfcPipeSegmentTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcPipeSegmentType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPipeSegmentType>(json);
		}

		public static new IfcPipeSegmentType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctank.htm"/>
	/// </summary>
	public  partial class IfcTank : IfcFlowStorageDevice
	{
		public IfcTankTypeEnum PredefinedType{get;set;} // optional

		public IfcTank(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcTank FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTank>(json);
		}

		public static new IfcTank FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctanktype.htm"/>
	/// </summary>
	public  partial class IfcTankType : IfcFlowStorageDeviceType
	{
		public IfcTankTypeEnum PredefinedType{get;set;} 

		public IfcTankType(IfcTankTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcTankType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTankType>(json);
		}

		public static new IfcTankType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclamp.htm"/>
	/// </summary>
	public  partial class IfcLamp : IfcFlowTerminal
	{
		public IfcLampTypeEnum PredefinedType{get;set;} // optional

		public IfcLamp(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcLamp FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLamp>(json);
		}

		public static new IfcLamp FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightfixture.htm"/>
	/// </summary>
	public  partial class IfcLightFixture : IfcFlowTerminal
	{
		public IfcLightFixtureTypeEnum PredefinedType{get;set;} // optional

		public IfcLightFixture(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcLightFixture FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightFixture>(json);
		}

		public static new IfcLightFixture FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmedicaldevice.htm"/>
	/// </summary>
	public  partial class IfcMedicalDevice : IfcFlowTerminal
	{
		public IfcMedicalDeviceTypeEnum PredefinedType{get;set;} // optional

		public IfcMedicalDevice(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcMedicalDevice FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMedicalDevice>(json);
		}

		public static new IfcMedicalDevice FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcoutlet.htm"/>
	/// </summary>
	public  partial class IfcOutlet : IfcFlowTerminal
	{
		public IfcOutletTypeEnum PredefinedType{get;set;} // optional

		public IfcOutlet(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcOutlet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOutlet>(json);
		}

		public static new IfcOutlet FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsanitaryterminal.htm"/>
	/// </summary>
	public  partial class IfcSanitaryTerminal : IfcFlowTerminal
	{
		public IfcSanitaryTerminalTypeEnum PredefinedType{get;set;} // optional

		public IfcSanitaryTerminal(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSanitaryTerminal FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSanitaryTerminal>(json);
		}

		public static new IfcSanitaryTerminal FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspaceheater.htm"/>
	/// </summary>
	public  partial class IfcSpaceHeater : IfcFlowTerminal
	{
		public IfcSpaceHeaterTypeEnum PredefinedType{get;set;} // optional

		public IfcSpaceHeater(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSpaceHeater FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpaceHeater>(json);
		}

		public static new IfcSpaceHeater FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstackterminal.htm"/>
	/// </summary>
	public  partial class IfcStackTerminal : IfcFlowTerminal
	{
		public IfcStackTerminalTypeEnum PredefinedType{get;set;} // optional

		public IfcStackTerminal(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcStackTerminal FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStackTerminal>(json);
		}

		public static new IfcStackTerminal FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwasteterminal.htm"/>
	/// </summary>
	public  partial class IfcWasteTerminal : IfcFlowTerminal
	{
		public IfcWasteTerminalTypeEnum PredefinedType{get;set;} // optional

		public IfcWasteTerminal(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcWasteTerminal FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWasteTerminal>(json);
		}

		public static new IfcWasteTerminal FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclamptype.htm"/>
	/// </summary>
	public  partial class IfcLampType : IfcFlowTerminalType
	{
		public IfcLampTypeEnum PredefinedType{get;set;} 

		public IfcLampType(IfcLampTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcLampType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLampType>(json);
		}

		public static new IfcLampType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightfixturetype.htm"/>
	/// </summary>
	public  partial class IfcLightFixtureType : IfcFlowTerminalType
	{
		public IfcLightFixtureTypeEnum PredefinedType{get;set;} 

		public IfcLightFixtureType(IfcLightFixtureTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcLightFixtureType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightFixtureType>(json);
		}

		public static new IfcLightFixtureType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmedicaldevicetype.htm"/>
	/// </summary>
	public  partial class IfcMedicalDeviceType : IfcFlowTerminalType
	{
		public IfcMedicalDeviceTypeEnum PredefinedType{get;set;} 

		public IfcMedicalDeviceType(IfcMedicalDeviceTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcMedicalDeviceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMedicalDeviceType>(json);
		}

		public static new IfcMedicalDeviceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcoutlettype.htm"/>
	/// </summary>
	public  partial class IfcOutletType : IfcFlowTerminalType
	{
		public IfcOutletTypeEnum PredefinedType{get;set;} 

		public IfcOutletType(IfcOutletTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcOutletType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOutletType>(json);
		}

		public static new IfcOutletType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsanitaryterminaltype.htm"/>
	/// </summary>
	public  partial class IfcSanitaryTerminalType : IfcFlowTerminalType
	{
		public IfcSanitaryTerminalTypeEnum PredefinedType{get;set;} 

		public IfcSanitaryTerminalType(IfcSanitaryTerminalTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcSanitaryTerminalType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSanitaryTerminalType>(json);
		}

		public static new IfcSanitaryTerminalType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspaceheatertype.htm"/>
	/// </summary>
	public  partial class IfcSpaceHeaterType : IfcFlowTerminalType
	{
		public IfcSpaceHeaterTypeEnum PredefinedType{get;set;} 

		public IfcSpaceHeaterType(IfcSpaceHeaterTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcSpaceHeaterType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpaceHeaterType>(json);
		}

		public static new IfcSpaceHeaterType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstackterminaltype.htm"/>
	/// </summary>
	public  partial class IfcStackTerminalType : IfcFlowTerminalType
	{
		public IfcStackTerminalTypeEnum PredefinedType{get;set;} 

		public IfcStackTerminalType(IfcStackTerminalTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcStackTerminalType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStackTerminalType>(json);
		}

		public static new IfcStackTerminalType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwasteterminaltype.htm"/>
	/// </summary>
	public  partial class IfcWasteTerminalType : IfcFlowTerminalType
	{
		public IfcWasteTerminalTypeEnum PredefinedType{get;set;} 

		public IfcWasteTerminalType(IfcWasteTerminalTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcWasteTerminalType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWasteTerminalType>(json);
		}

		public static new IfcWasteTerminalType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcinterceptor.htm"/>
	/// </summary>
	public  partial class IfcInterceptor : IfcFlowTreatmentDevice
	{
		public IfcInterceptorTypeEnum PredefinedType{get;set;} // optional

		public IfcInterceptor(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcInterceptor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcInterceptor>(json);
		}

		public static new IfcInterceptor FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcinterceptortype.htm"/>
	/// </summary>
	public  partial class IfcInterceptorType : IfcFlowTreatmentDeviceType
	{
		public IfcInterceptorTypeEnum PredefinedType{get;set;} 

		public IfcInterceptorType(IfcInterceptorTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcInterceptorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcInterceptorType>(json);
		}

		public static new IfcInterceptorType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfurniture.htm"/>
	/// </summary>
	public  partial class IfcFurniture : IfcFurnishingElement
	{
		public IfcFurnitureTypeEnum PredefinedType{get;set;} // optional

		public IfcFurniture(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcFurniture FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFurniture>(json);
		}

		public static new IfcFurniture FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsystemfurnitureelement.htm"/>
	/// </summary>
	public  partial class IfcSystemFurnitureElement : IfcFurnishingElement
	{
		public IfcSystemFurnitureElementTypeEnum PredefinedType{get;set;} // optional

		public IfcSystemFurnitureElement(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSystemFurnitureElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSystemFurnitureElement>(json);
		}

		public static new IfcSystemFurnitureElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcfurnituretype.htm"/>
	/// </summary>
	public  partial class IfcFurnitureType : IfcFurnishingElementType
	{
		public IfcAssemblyPlaceEnum AssemblyPlace{get;set;} 
		public IfcFurnitureTypeEnum PredefinedType{get;set;} // optional

		public IfcFurnitureType(IfcAssemblyPlaceEnum assemblyPlace,IfcGloballyUniqueId globalId):base(globalId)
		{
			AssemblyPlace = assemblyPlace;


		}

		public static new IfcFurnitureType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcFurnitureType>(json);
		}

		public static new IfcFurnitureType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsystemfurnitureelementtype.htm"/>
	/// </summary>
	public  partial class IfcSystemFurnitureElementType : IfcFurnishingElementType
	{
		public IfcSystemFurnitureElementTypeEnum PredefinedType{get;set;} // optional

		public IfcSystemFurnitureElementType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSystemFurnitureElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSystemFurnitureElementType>(json);
		}

		public static new IfcSystemFurnitureElementType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeometriccurveset.htm"/>
	/// </summary>
	public  partial class IfcGeometricCurveSet : IfcGeometricSet
	{

		public IfcGeometricCurveSet(List<IfcGeometricSetSelect> elements):base(elements)
		{


		}

		public static new IfcGeometricCurveSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGeometricCurveSet>(json);
		}

		public static new IfcGeometricCurveSet FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeometricset.htm"/>
	/// </summary>
	public  partial class IfcGeometricSet : IfcGeometricRepresentationItem
	{
		public List<IfcGeometricSetSelect> Elements{get;set;} 

		public IfcGeometricSet(List<IfcGeometricSetSelect> elements):base()
		{
			Elements = elements;


		}

		public static new IfcGeometricSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGeometricSet>(json);
		}

		public static new IfcGeometricSet FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeometricrepresentationcontext.htm"/>
	/// </summary>
	public  partial class IfcGeometricRepresentationContext : IfcRepresentationContext
	{
		public IfcDimensionCount CoordinateSpaceDimension{get;set;} 
		public double Precision{get;set;} // optional
		public IfcAxis2Placement WorldCoordinateSystem{get;set;} 
		public IfcDirection TrueNorth{get;set;} // optional

		public IfcGeometricRepresentationContext(IfcDimensionCount coordinateSpaceDimension,IfcAxis2Placement worldCoordinateSystem):base()
		{
			CoordinateSpaceDimension = coordinateSpaceDimension;
			WorldCoordinateSystem = worldCoordinateSystem;


		}

		public static new IfcGeometricRepresentationContext FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGeometricRepresentationContext>(json);
		}

		public static new IfcGeometricRepresentationContext FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgeometricrepresentationsubcontext.htm"/>
	/// </summary>
	public  partial class IfcGeometricRepresentationSubContext : IfcGeometricRepresentationContext
	{
		public IfcGeometricRepresentationContext ParentContext{get;set;} 
		public IfcPositiveRatioMeasure TargetScale{get;set;} // optional
		public IfcGeometricProjectionEnum TargetView{get;set;} 
		public IfcLabel UserDefinedTargetView{get;set;} // optional

		public IfcGeometricRepresentationSubContext(IfcGeometricRepresentationContext parentContext,IfcGeometricProjectionEnum targetView,IfcDimensionCount coordinateSpaceDimension,IfcAxis2Placement worldCoordinateSystem):base(coordinateSpaceDimension,worldCoordinateSystem)
		{
			ParentContext = parentContext;
			TargetView = targetView;


		}

		public static new IfcGeometricRepresentationSubContext FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGeometricRepresentationSubContext>(json);
		}

		public static new IfcGeometricRepresentationSubContext FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrepresentationcontext.htm"/>
	/// </summary>
	public abstract partial class IfcRepresentationContext : IfcBase
	{
		public IfcLabel ContextIdentifier{get;set;} // optional
		public IfcLabel ContextType{get;set;} // optional

		public IfcRepresentationContext():base()
		{


		}

		public static  IfcRepresentationContext FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRepresentationContext>(json);
		}

		public static  IfcRepresentationContext FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightsource.htm"/>
	/// </summary>
	public abstract partial class IfcLightSource : IfcGeometricRepresentationItem
	{
		public IfcLabel Name{get;set;} // optional
		public IfcColourRgb LightColour{get;set;} 
		public IfcNormalisedRatioMeasure AmbientIntensity{get;set;} // optional
		public IfcNormalisedRatioMeasure Intensity{get;set;} // optional

		public IfcLightSource(IfcColourRgb lightColour):base()
		{
			LightColour = lightColour;


		}

		public static new IfcLightSource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightSource>(json);
		}

		public static new IfcLightSource FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplanarextent.htm"/>
	/// </summary>
	public  partial class IfcPlanarExtent : IfcGeometricRepresentationItem
	{
		public IfcLengthMeasure SizeInX{get;set;} 
		public IfcLengthMeasure SizeInY{get;set;} 

		public IfcPlanarExtent(IfcLengthMeasure sizeInX,IfcLengthMeasure sizeInY):base()
		{
			SizeInX = sizeInX;
			SizeInY = sizeInY;


		}

		public static new IfcPlanarExtent FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlanarExtent>(json);
		}

		public static new IfcPlanarExtent FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsectionedspine.htm"/>
	/// </summary>
	public  partial class IfcSectionedSpine : IfcGeometricRepresentationItem
	{
		public IfcCompositeCurve SpineCurve{get;set;} 
		public List<IfcProfileDef> CrossSections{get;set;} 
		public List<IfcAxis2Placement3D> CrossSectionPositions{get;set;} 

		public IfcSectionedSpine(IfcCompositeCurve spineCurve,List<IfcProfileDef> crossSections,List<IfcAxis2Placement3D> crossSectionPositions):base()
		{
			SpineCurve = spineCurve;
			CrossSections = crossSections;
			CrossSectionPositions = crossSectionPositions;


		}

		public static new IfcSectionedSpine FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSectionedSpine>(json);
		}

		public static new IfcSectionedSpine FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshellbasedsurfacemodel.htm"/>
	/// </summary>
	public  partial class IfcShellBasedSurfaceModel : IfcGeometricRepresentationItem
	{
		public List<IfcShell> SbsmBoundary{get;set;} 

		public IfcShellBasedSurfaceModel(List<IfcShell> sbsmBoundary):base()
		{
			SbsmBoundary = sbsmBoundary;


		}

		public static new IfcShellBasedSurfaceModel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcShellBasedSurfaceModel>(json);
		}

		public static new IfcShellBasedSurfaceModel FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctessellateditem.htm"/>
	/// </summary>
	public abstract partial class IfcTessellatedItem : IfcGeometricRepresentationItem
	{

		public IfcTessellatedItem():base()
		{


		}

		public static new IfcTessellatedItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTessellatedItem>(json);
		}

		public static new IfcTessellatedItem FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextliteral.htm"/>
	/// </summary>
	public  partial class IfcTextLiteral : IfcGeometricRepresentationItem
	{
		public IfcPresentableText Literal{get;set;} 
		public IfcAxis2Placement Placement{get;set;} 
		public IfcTextPath Path{get;set;} 

		public IfcTextLiteral(IfcPresentableText literal,IfcAxis2Placement placement,IfcTextPath path):base()
		{
			Literal = literal;
			Placement = placement;
			Path = path;


		}

		public static new IfcTextLiteral FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextLiteral>(json);
		}

		public static new IfcTextLiteral FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvector.htm"/>
	/// </summary>
	public  partial class IfcVector : IfcGeometricRepresentationItem
	{
		public IfcDirection Orientation{get;set;} 
		public IfcLengthMeasure Magnitude{get;set;} 

		public IfcVector(IfcDirection orientation,IfcLengthMeasure magnitude):base()
		{
			Orientation = orientation;
			Magnitude = magnitude;


		}

		public static new IfcVector FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVector>(json);
		}

		public static new IfcVector FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrepresentationitem.htm"/>
	/// </summary>
	public abstract partial class IfcRepresentationItem : IfcBase
	{

		public IfcRepresentationItem():base()
		{


		}

		public static  IfcRepresentationItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRepresentationItem>(json);
		}

		public static  IfcRepresentationItem FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgrid.htm"/>
	/// </summary>
	public  partial class IfcGrid : IfcProduct
	{
		public List<IfcGridAxis> UAxes{get;set;} 
		public List<IfcGridAxis> VAxes{get;set;} 
		public List<IfcGridAxis> WAxes{get;set;} // optional
		public IfcGridTypeEnum PredefinedType{get;set;} // optional

		public IfcGrid(List<IfcGridAxis> uAxes,List<IfcGridAxis> vAxes,IfcGloballyUniqueId globalId):base(globalId)
		{
			UAxes = uAxes;
			VAxes = vAxes;

			WAxes = new List<IfcGridAxis>();

		}

		public static new IfcGrid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGrid>(json);
		}

		public static new IfcGrid FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgridaxis.htm"/>
	/// </summary>
	public  partial class IfcGridAxis : IfcBase
	{
		public IfcLabel AxisTag{get;set;} // optional
		public IfcCurve AxisCurve{get;set;} 
		public IfcBoolean SameSense{get;set;} 

		public IfcGridAxis(IfcCurve axisCurve,IfcBoolean sameSense):base()
		{
			AxisCurve = axisCurve;
			SameSense = sameSense;


		}

		public static  IfcGridAxis FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGridAxis>(json);
		}

		public static  IfcGridAxis FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcgridplacement.htm"/>
	/// </summary>
	public  partial class IfcGridPlacement : IfcObjectPlacement
	{
		public IfcVirtualGridIntersection PlacementLocation{get;set;} 
		public IfcGridPlacementDirectionSelect PlacementRefDirection{get;set;} // optional

		public IfcGridPlacement(IfcVirtualGridIntersection placementLocation):base()
		{
			PlacementLocation = placementLocation;


		}

		public static new IfcGridPlacement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcGridPlacement>(json);
		}

		public static new IfcGridPlacement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcobjectplacement.htm"/>
	/// </summary>
	public abstract partial class IfcObjectPlacement : IfcBase
	{

		public IfcObjectPlacement():base()
		{


		}

		public static  IfcObjectPlacement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcObjectPlacement>(json);
		}

		public static  IfcObjectPlacement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcinventory.htm"/>
	/// </summary>
	public  partial class IfcInventory : IfcGroup
	{
		public IfcInventoryTypeEnum PredefinedType{get;set;} // optional
		public IfcActorSelect Jurisdiction{get;set;} // optional
		public List<IfcPerson> ResponsiblePersons{get;set;} // optional
		public IfcDate LastUpdateDate{get;set;} // optional
		public IfcCostValue CurrentValue{get;set;} // optional
		public IfcCostValue OriginalValue{get;set;} // optional

		public IfcInventory(IfcGloballyUniqueId globalId):base(globalId)
		{

			ResponsiblePersons = new List<IfcPerson>();

		}

		public static new IfcInventory FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcInventory>(json);
		}

		public static new IfcInventory FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadgroup.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadGroup : IfcGroup
	{
		public IfcLoadGroupTypeEnum PredefinedType{get;set;} 
		public IfcActionTypeEnum ActionType{get;set;} 
		public IfcActionSourceTypeEnum ActionSource{get;set;} 
		public IfcRatioMeasure Coefficient{get;set;} // optional
		public IfcLabel Purpose{get;set;} // optional

		public IfcStructuralLoadGroup(IfcLoadGroupTypeEnum predefinedType,IfcActionTypeEnum actionType,IfcActionSourceTypeEnum actionSource,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;
			ActionType = actionType;
			ActionSource = actionSource;


		}

		public static new IfcStructuralLoadGroup FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadGroup>(json);
		}

		public static new IfcStructuralLoadGroup FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralresultgroup.htm"/>
	/// </summary>
	public  partial class IfcStructuralResultGroup : IfcGroup
	{
		public IfcAnalysisTheoryTypeEnum TheoryType{get;set;} 
		public IfcStructuralLoadGroup ResultForLoadGroup{get;set;} // optional
		public bool IsLinear{get;set;} 

		public IfcStructuralResultGroup(IfcAnalysisTheoryTypeEnum theoryType,bool isLinear,IfcGloballyUniqueId globalId):base(globalId)
		{
			TheoryType = theoryType;
			IsLinear = isLinear;


		}

		public static new IfcStructuralResultGroup FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralResultGroup>(json);
		}

		public static new IfcStructuralResultGroup FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpolygonalboundedhalfspace.htm"/>
	/// </summary>
	public  partial class IfcPolygonalBoundedHalfSpace : IfcHalfSpaceSolid
	{
		public IfcAxis2Placement3D Position{get;set;} 
		public IfcBoundedCurve PolygonalBoundary{get;set;} 

		public IfcPolygonalBoundedHalfSpace(IfcAxis2Placement3D position,IfcBoundedCurve polygonalBoundary,IfcSurface baseSurface,bool agreementFlag):base(baseSurface,agreementFlag)
		{
			Position = position;
			PolygonalBoundary = polygonalBoundary;


		}

		public static new IfcPolygonalBoundedHalfSpace FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPolygonalBoundedHalfSpace>(json);
		}

		public static new IfcPolygonalBoundedHalfSpace FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcishapeprofiledef.htm"/>
	/// </summary>
	public  partial class IfcIShapeProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure OverallWidth{get;set;} 
		public IfcPositiveLengthMeasure OverallDepth{get;set;} 
		public IfcPositiveLengthMeasure WebThickness{get;set;} 
		public IfcPositiveLengthMeasure FlangeThickness{get;set;} 
		public IfcNonNegativeLengthMeasure FilletRadius{get;set;} // optional
		public IfcNonNegativeLengthMeasure FlangeEdgeRadius{get;set;} // optional
		public IfcPlaneAngleMeasure FlangeSlope{get;set;} // optional

		public IfcIShapeProfileDef(IfcPositiveLengthMeasure overallWidth,IfcPositiveLengthMeasure overallDepth,IfcPositiveLengthMeasure webThickness,IfcPositiveLengthMeasure flangeThickness,IfcProfileTypeEnum profileType):base(profileType)
		{
			OverallWidth = overallWidth;
			OverallDepth = overallDepth;
			WebThickness = webThickness;
			FlangeThickness = flangeThickness;


		}

		public static new IfcIShapeProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIShapeProfileDef>(json);
		}

		public static new IfcIShapeProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcimagetexture.htm"/>
	/// </summary>
	public  partial class IfcImageTexture : IfcSurfaceTexture
	{
		public IfcURIReference URLReference{get;set;} 

		public IfcImageTexture(IfcURIReference uRLReference,bool repeatS,bool repeatT):base(repeatS,repeatT)
		{
			URLReference = uRLReference;


		}

		public static new IfcImageTexture FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcImageTexture>(json);
		}

		public static new IfcImageTexture FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcindexedcolourmap.htm"/>
	/// </summary>
	public  partial class IfcIndexedColourMap : IfcPresentationItem
	{
		public IfcTessellatedFaceSet MappedTo{get;set;} 
		public IfcSurfaceStyleShading Overrides{get;set;} // optional
		public IfcColourRgbList Colours{get;set;} 
		public List<int> ColourIndex{get;set;} 

		public IfcIndexedColourMap(IfcTessellatedFaceSet mappedTo,IfcColourRgbList colours,List<int> colourIndex):base()
		{
			MappedTo = mappedTo;
			Colours = colours;
			ColourIndex = colourIndex;


		}

		public static new IfcIndexedColourMap FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIndexedColourMap>(json);
		}

		public static new IfcIndexedColourMap FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcindexedtexturemap.htm"/>
	/// </summary>
	public abstract partial class IfcIndexedTextureMap : IfcTextureCoordinate
	{
		public IfcTessellatedFaceSet MappedTo{get;set;} 
		public IfcTextureVertexList TexCoords{get;set;} 

		public IfcIndexedTextureMap(IfcTessellatedFaceSet mappedTo,IfcTextureVertexList texCoords,List<IfcSurfaceTexture> maps):base(maps)
		{
			MappedTo = mappedTo;
			TexCoords = texCoords;


		}

		public static new IfcIndexedTextureMap FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIndexedTextureMap>(json);
		}

		public static new IfcIndexedTextureMap FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcindexedtriangletexturemap.htm"/>
	/// </summary>
	public  partial class IfcIndexedTriangleTextureMap : IfcIndexedTextureMap
	{
		public List<List<int>> TexCoordIndex{get;set;} // optional

		public IfcIndexedTriangleTextureMap(IfcTessellatedFaceSet mappedTo,IfcTextureVertexList texCoords,List<IfcSurfaceTexture> maps):base(mappedTo,texCoords,maps)
		{

			TexCoordIndex = new List<List<int>>();

		}

		public static new IfcIndexedTriangleTextureMap FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIndexedTriangleTextureMap>(json);
		}

		public static new IfcIndexedTriangleTextureMap FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctexturecoordinate.htm"/>
	/// </summary>
	public abstract partial class IfcTextureCoordinate : IfcPresentationItem
	{
		public List<IfcSurfaceTexture> Maps{get;set;} 

		public IfcTextureCoordinate(List<IfcSurfaceTexture> maps):base()
		{
			Maps = maps;


		}

		public static new IfcTextureCoordinate FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextureCoordinate>(json);
		}

		public static new IfcTextureCoordinate FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcirregulartimeseries.htm"/>
	/// </summary>
	public  partial class IfcIrregularTimeSeries : IfcTimeSeries
	{
		public List<IfcIrregularTimeSeriesValue> Values{get;set;} 

		public IfcIrregularTimeSeries(List<IfcIrregularTimeSeriesValue> values,IfcLabel name,IfcDateTime startTime,IfcDateTime endTime,IfcTimeSeriesDataTypeEnum timeSeriesDataType,IfcDataOriginEnum dataOrigin):base(name,startTime,endTime,timeSeriesDataType,dataOrigin)
		{
			Values = values;


		}

		public static new IfcIrregularTimeSeries FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIrregularTimeSeries>(json);
		}

		public static new IfcIrregularTimeSeries FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctimeseries.htm"/>
	/// </summary>
	public abstract partial class IfcTimeSeries : IfcBase
	{
		public IfcLabel Name{get;set;} 
		public IfcText Description{get;set;} // optional
		public IfcDateTime StartTime{get;set;} 
		public IfcDateTime EndTime{get;set;} 
		public IfcTimeSeriesDataTypeEnum TimeSeriesDataType{get;set;} 
		public IfcDataOriginEnum DataOrigin{get;set;} 
		public IfcLabel UserDefinedDataOrigin{get;set;} // optional
		public IfcUnit Unit{get;set;} // optional

		public IfcTimeSeries(IfcLabel name,IfcDateTime startTime,IfcDateTime endTime,IfcTimeSeriesDataTypeEnum timeSeriesDataType,IfcDataOriginEnum dataOrigin):base()
		{
			Name = name;
			StartTime = startTime;
			EndTime = endTime;
			TimeSeriesDataType = timeSeriesDataType;
			DataOrigin = dataOrigin;


		}

		public static  IfcTimeSeries FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTimeSeries>(json);
		}

		public static  IfcTimeSeries FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcirregulartimeseriesvalue.htm"/>
	/// </summary>
	public  partial class IfcIrregularTimeSeriesValue : IfcBase
	{
		public IfcDateTime TimeStamp{get;set;} 
		public List<IfcValue> ListValues{get;set;} 

		public IfcIrregularTimeSeriesValue(IfcDateTime timeStamp,List<IfcValue> listValues):base()
		{
			TimeStamp = timeStamp;
			ListValues = listValues;


		}

		public static  IfcIrregularTimeSeriesValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcIrregularTimeSeriesValue>(json);
		}

		public static  IfcIrregularTimeSeriesValue FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclshapeprofiledef.htm"/>
	/// </summary>
	public  partial class IfcLShapeProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure Depth{get;set;} 
		public IfcPositiveLengthMeasure Width{get;set;} // optional
		public IfcPositiveLengthMeasure Thickness{get;set;} 
		public IfcNonNegativeLengthMeasure FilletRadius{get;set;} // optional
		public IfcNonNegativeLengthMeasure EdgeRadius{get;set;} // optional
		public IfcPlaneAngleMeasure LegSlope{get;set;} // optional

		public IfcLShapeProfileDef(IfcPositiveLengthMeasure depth,IfcPositiveLengthMeasure thickness,IfcProfileTypeEnum profileType):base(profileType)
		{
			Depth = depth;
			Thickness = thickness;


		}

		public static new IfcLShapeProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLShapeProfileDef>(json);
		}

		public static new IfcLShapeProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclagtime.htm"/>
	/// </summary>
	public  partial class IfcLagTime : IfcSchedulingTime
	{
		public IfcTimeOrRatioSelect LagValue{get;set;} 
		public IfcTaskDurationEnum DurationType{get;set;} 

		public IfcLagTime(IfcTimeOrRatioSelect lagValue,IfcTaskDurationEnum durationType):base()
		{
			LagValue = lagValue;
			DurationType = durationType;


		}

		public static new IfcLagTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLagTime>(json);
		}

		public static new IfcLagTime FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightdistributiondata.htm"/>
	/// </summary>
	public  partial class IfcLightDistributionData : IfcBase
	{
		public IfcPlaneAngleMeasure MainPlaneAngle{get;set;} 
		public List<IfcPlaneAngleMeasure> SecondaryPlaneAngle{get;set;} 
		public List<IfcLuminousIntensityDistributionMeasure> LuminousIntensity{get;set;} 

		public IfcLightDistributionData(IfcPlaneAngleMeasure mainPlaneAngle,List<IfcPlaneAngleMeasure> secondaryPlaneAngle,List<IfcLuminousIntensityDistributionMeasure> luminousIntensity):base()
		{
			MainPlaneAngle = mainPlaneAngle;
			SecondaryPlaneAngle = secondaryPlaneAngle;
			LuminousIntensity = luminousIntensity;


		}

		public static  IfcLightDistributionData FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightDistributionData>(json);
		}

		public static  IfcLightDistributionData FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightintensitydistribution.htm"/>
	/// </summary>
	public  partial class IfcLightIntensityDistribution : IfcBase
	{
		public IfcLightDistributionCurveEnum LightDistributionCurve{get;set;} 
		public List<IfcLightDistributionData> DistributionData{get;set;} 

		public IfcLightIntensityDistribution(IfcLightDistributionCurveEnum lightDistributionCurve,List<IfcLightDistributionData> distributionData):base()
		{
			LightDistributionCurve = lightDistributionCurve;
			DistributionData = distributionData;


		}

		public static  IfcLightIntensityDistribution FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightIntensityDistribution>(json);
		}

		public static  IfcLightIntensityDistribution FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightsourceambient.htm"/>
	/// </summary>
	public  partial class IfcLightSourceAmbient : IfcLightSource
	{

		public IfcLightSourceAmbient(IfcColourRgb lightColour):base(lightColour)
		{


		}

		public static new IfcLightSourceAmbient FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightSourceAmbient>(json);
		}

		public static new IfcLightSourceAmbient FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightsourcedirectional.htm"/>
	/// </summary>
	public  partial class IfcLightSourceDirectional : IfcLightSource
	{
		public IfcDirection Orientation{get;set;} 

		public IfcLightSourceDirectional(IfcDirection orientation,IfcColourRgb lightColour):base(lightColour)
		{
			Orientation = orientation;


		}

		public static new IfcLightSourceDirectional FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightSourceDirectional>(json);
		}

		public static new IfcLightSourceDirectional FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightsourcegoniometric.htm"/>
	/// </summary>
	public  partial class IfcLightSourceGoniometric : IfcLightSource
	{
		public IfcAxis2Placement3D Position{get;set;} 
		public IfcColourRgb ColourAppearance{get;set;} // optional
		public IfcThermodynamicTemperatureMeasure ColourTemperature{get;set;} 
		public IfcLuminousFluxMeasure LuminousFlux{get;set;} 
		public IfcLightEmissionSourceEnum LightEmissionSource{get;set;} 
		public IfcLightDistributionDataSourceSelect LightDistributionDataSource{get;set;} 

		public IfcLightSourceGoniometric(IfcAxis2Placement3D position,IfcThermodynamicTemperatureMeasure colourTemperature,IfcLuminousFluxMeasure luminousFlux,IfcLightEmissionSourceEnum lightEmissionSource,IfcLightDistributionDataSourceSelect lightDistributionDataSource,IfcColourRgb lightColour):base(lightColour)
		{
			Position = position;
			ColourTemperature = colourTemperature;
			LuminousFlux = luminousFlux;
			LightEmissionSource = lightEmissionSource;
			LightDistributionDataSource = lightDistributionDataSource;


		}

		public static new IfcLightSourceGoniometric FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightSourceGoniometric>(json);
		}

		public static new IfcLightSourceGoniometric FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightsourcepositional.htm"/>
	/// </summary>
	public  partial class IfcLightSourcePositional : IfcLightSource
	{
		public IfcCartesianPoint Position{get;set;} 
		public IfcPositiveLengthMeasure Radius{get;set;} 
		public IfcReal ConstantAttenuation{get;set;} 
		public IfcReal DistanceAttenuation{get;set;} 
		public IfcReal QuadricAttenuation{get;set;} 

		public IfcLightSourcePositional(IfcCartesianPoint position,IfcPositiveLengthMeasure radius,IfcReal constantAttenuation,IfcReal distanceAttenuation,IfcReal quadricAttenuation,IfcColourRgb lightColour):base(lightColour)
		{
			Position = position;
			Radius = radius;
			ConstantAttenuation = constantAttenuation;
			DistanceAttenuation = distanceAttenuation;
			QuadricAttenuation = quadricAttenuation;


		}

		public static new IfcLightSourcePositional FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightSourcePositional>(json);
		}

		public static new IfcLightSourcePositional FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclightsourcespot.htm"/>
	/// </summary>
	public  partial class IfcLightSourceSpot : IfcLightSourcePositional
	{
		public IfcDirection Orientation{get;set;} 
		public IfcReal ConcentrationExponent{get;set;} // optional
		public IfcPositivePlaneAngleMeasure SpreadAngle{get;set;} 
		public IfcPositivePlaneAngleMeasure BeamWidthAngle{get;set;} 

		public IfcLightSourceSpot(IfcDirection orientation,IfcPositivePlaneAngleMeasure spreadAngle,IfcPositivePlaneAngleMeasure beamWidthAngle,IfcCartesianPoint position,IfcPositiveLengthMeasure radius,IfcReal constantAttenuation,IfcReal distanceAttenuation,IfcReal quadricAttenuation,IfcColourRgb lightColour):base(position,radius,constantAttenuation,distanceAttenuation,quadricAttenuation,lightColour)
		{
			Orientation = orientation;
			SpreadAngle = spreadAngle;
			BeamWidthAngle = beamWidthAngle;


		}

		public static new IfcLightSourceSpot FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLightSourceSpot>(json);
		}

		public static new IfcLightSourceSpot FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifclocalplacement.htm"/>
	/// </summary>
	public  partial class IfcLocalPlacement : IfcObjectPlacement
	{
		public IfcObjectPlacement PlacementRelTo{get;set;} // optional
		public IfcAxis2Placement RelativePlacement{get;set;} 

		public IfcLocalPlacement(IfcAxis2Placement relativePlacement):base()
		{
			RelativePlacement = relativePlacement;


		}

		public static new IfcLocalPlacement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcLocalPlacement>(json);
		}

		public static new IfcLocalPlacement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpolyloop.htm"/>
	/// </summary>
	public  partial class IfcPolyLoop : IfcLoop
	{
		public List<IfcCartesianPoint> Polygon{get;set;} 

		public IfcPolyLoop(List<IfcCartesianPoint> polygon):base()
		{
			Polygon = polygon;


		}

		public static new IfcPolyLoop FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPolyLoop>(json);
		}

		public static new IfcPolyLoop FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvertexloop.htm"/>
	/// </summary>
	public  partial class IfcVertexLoop : IfcLoop
	{
		public IfcVertex LoopVertex{get;set;} 

		public IfcVertexLoop(IfcVertex loopVertex):base()
		{
			LoopVertex = loopVertex;


		}

		public static new IfcVertexLoop FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVertexLoop>(json);
		}

		public static new IfcVertexLoop FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmappeditem.htm"/>
	/// </summary>
	public  partial class IfcMappedItem : IfcRepresentationItem
	{
		public IfcRepresentationMap MappingSource{get;set;} 
		public IfcCartesianTransformationOperator MappingTarget{get;set;} 

		public IfcMappedItem(IfcRepresentationMap mappingSource,IfcCartesianTransformationOperator mappingTarget):base()
		{
			MappingSource = mappingSource;
			MappingTarget = mappingTarget;


		}

		public static new IfcMappedItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMappedItem>(json);
		}

		public static new IfcMappedItem FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterial.htm"/>
	/// </summary>
	public  partial class IfcMaterial : IfcMaterialDefinition
	{
		public IfcLabel Name{get;set;} 
		public IfcText Description{get;set;} // optional
		public IfcLabel Category{get;set;} // optional

		public IfcMaterial(IfcLabel name):base()
		{
			Name = name;


		}

		public static new IfcMaterial FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterial>(json);
		}

		public static new IfcMaterial FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialdefinition.htm"/>
	/// </summary>
	public abstract partial class IfcMaterialDefinition : IfcBase
	{

		public IfcMaterialDefinition():base()
		{


		}

		public static  IfcMaterialDefinition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialDefinition>(json);
		}

		public static  IfcMaterialDefinition FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialclassificationrelationship.htm"/>
	/// </summary>
	public  partial class IfcMaterialClassificationRelationship : IfcBase
	{
		public List<IfcClassificationSelect> MaterialClassifications{get;set;} 
		public IfcMaterial ClassifiedMaterial{get;set;} 

		public IfcMaterialClassificationRelationship(List<IfcClassificationSelect> materialClassifications,IfcMaterial classifiedMaterial):base()
		{
			MaterialClassifications = materialClassifications;
			ClassifiedMaterial = classifiedMaterial;


		}

		public static  IfcMaterialClassificationRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialClassificationRelationship>(json);
		}

		public static  IfcMaterialClassificationRelationship FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialconstituent.htm"/>
	/// </summary>
	public  partial class IfcMaterialConstituent : IfcMaterialDefinition
	{
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcMaterial Material{get;set;} 
		public IfcNormalisedRatioMeasure Fraction{get;set;} // optional
		public IfcLabel Category{get;set;} // optional

		public IfcMaterialConstituent(IfcMaterial material):base()
		{
			Material = material;


		}

		public static new IfcMaterialConstituent FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialConstituent>(json);
		}

		public static new IfcMaterialConstituent FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialconstituentset.htm"/>
	/// </summary>
	public  partial class IfcMaterialConstituentSet : IfcMaterialDefinition
	{
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public List<IfcMaterialConstituent> MaterialConstituents{get;set;} // optional

		public IfcMaterialConstituentSet():base()
		{

			MaterialConstituents = new List<IfcMaterialConstituent>();

		}

		public static new IfcMaterialConstituentSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialConstituentSet>(json);
		}

		public static new IfcMaterialConstituentSet FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmateriallayer.htm"/>
	/// </summary>
	public  partial class IfcMaterialLayer : IfcMaterialDefinition
	{
		public IfcMaterial Material{get;set;} // optional
		public IfcNonNegativeLengthMeasure LayerThickness{get;set;} 
		public IfcLogical IsVentilated{get;set;} // optional
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcLabel Category{get;set;} // optional
		public IfcNormalisedRatioMeasure Priority{get;set;} // optional

		public IfcMaterialLayer(IfcNonNegativeLengthMeasure layerThickness):base()
		{
			LayerThickness = layerThickness;


		}

		public static new IfcMaterialLayer FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialLayer>(json);
		}

		public static new IfcMaterialLayer FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmateriallayerset.htm"/>
	/// </summary>
	public  partial class IfcMaterialLayerSet : IfcMaterialDefinition
	{
		public List<IfcMaterialLayer> MaterialLayers{get;set;} 
		public IfcLabel LayerSetName{get;set;} // optional
		public IfcText Description{get;set;} // optional

		public IfcMaterialLayerSet(List<IfcMaterialLayer> materialLayers):base()
		{
			MaterialLayers = materialLayers;


		}

		public static new IfcMaterialLayerSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialLayerSet>(json);
		}

		public static new IfcMaterialLayerSet FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialprofile.htm"/>
	/// </summary>
	public  partial class IfcMaterialProfile : IfcMaterialDefinition
	{
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcMaterial Material{get;set;} // optional
		public IfcProfileDef Profile{get;set;} 
		public IfcNormalisedRatioMeasure Priority{get;set;} // optional
		public IfcLabel Category{get;set;} // optional

		public IfcMaterialProfile(IfcProfileDef profile):base()
		{
			Profile = profile;


		}

		public static new IfcMaterialProfile FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialProfile>(json);
		}

		public static new IfcMaterialProfile FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialprofileset.htm"/>
	/// </summary>
	public  partial class IfcMaterialProfileSet : IfcMaterialDefinition
	{
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public List<IfcMaterialProfile> MaterialProfiles{get;set;} 
		public IfcCompositeProfileDef CompositeProfile{get;set;} // optional

		public IfcMaterialProfileSet(List<IfcMaterialProfile> materialProfiles):base()
		{
			MaterialProfiles = materialProfiles;


		}

		public static new IfcMaterialProfileSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialProfileSet>(json);
		}

		public static new IfcMaterialProfileSet FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialdefinitionrepresentation.htm"/>
	/// </summary>
	public  partial class IfcMaterialDefinitionRepresentation : IfcProductRepresentation
	{
		public IfcMaterial RepresentedMaterial{get;set;} 

		public IfcMaterialDefinitionRepresentation(IfcMaterial representedMaterial,List<IfcRepresentation> representations):base(representations)
		{
			RepresentedMaterial = representedMaterial;


		}

		public static new IfcMaterialDefinitionRepresentation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialDefinitionRepresentation>(json);
		}

		public static new IfcMaterialDefinitionRepresentation FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproductrepresentation.htm"/>
	/// </summary>
	public abstract partial class IfcProductRepresentation : IfcBase
	{
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public List<IfcRepresentation> Representations{get;set;} 

		public IfcProductRepresentation(List<IfcRepresentation> representations):base()
		{
			Representations = representations;


		}

		public static  IfcProductRepresentation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProductRepresentation>(json);
		}

		public static  IfcProductRepresentation FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmateriallayerwithoffsets.htm"/>
	/// </summary>
	public  partial class IfcMaterialLayerWithOffsets : IfcMaterialLayer
	{
		public IfcLayerSetDirectionEnum OffsetDirection{get;set;} 
		public List<IfcLengthMeasure> OffsetValues{get;set;} 

		public IfcMaterialLayerWithOffsets(IfcLayerSetDirectionEnum offsetDirection,List<IfcLengthMeasure> offsetValues,IfcNonNegativeLengthMeasure layerThickness):base(layerThickness)
		{
			OffsetDirection = offsetDirection;
			OffsetValues = offsetValues;


		}

		public static new IfcMaterialLayerWithOffsets FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialLayerWithOffsets>(json);
		}

		public static new IfcMaterialLayerWithOffsets FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmateriallayersetusage.htm"/>
	/// </summary>
	public  partial class IfcMaterialLayerSetUsage : IfcMaterialUsageDefinition
	{
		public IfcMaterialLayerSet ForLayerSet{get;set;} 
		public IfcLayerSetDirectionEnum LayerSetDirection{get;set;} 
		public IfcDirectionSenseEnum DirectionSense{get;set;} 
		public IfcLengthMeasure OffsetFromReferenceLine{get;set;} 
		public IfcPositiveLengthMeasure ReferenceExtent{get;set;} // optional

		public IfcMaterialLayerSetUsage(IfcMaterialLayerSet forLayerSet,IfcLayerSetDirectionEnum layerSetDirection,IfcDirectionSenseEnum directionSense,IfcLengthMeasure offsetFromReferenceLine):base()
		{
			ForLayerSet = forLayerSet;
			LayerSetDirection = layerSetDirection;
			DirectionSense = directionSense;
			OffsetFromReferenceLine = offsetFromReferenceLine;


		}

		public static new IfcMaterialLayerSetUsage FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialLayerSetUsage>(json);
		}

		public static new IfcMaterialLayerSetUsage FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialusagedefinition.htm"/>
	/// </summary>
	public abstract partial class IfcMaterialUsageDefinition : IfcBase
	{

		public IfcMaterialUsageDefinition():base()
		{


		}

		public static  IfcMaterialUsageDefinition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialUsageDefinition>(json);
		}

		public static  IfcMaterialUsageDefinition FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmateriallist.htm"/>
	/// </summary>
	public  partial class IfcMaterialList : IfcBase
	{
		public List<IfcMaterial> Materials{get;set;} 

		public IfcMaterialList(List<IfcMaterial> materials):base()
		{
			Materials = materials;


		}

		public static  IfcMaterialList FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialList>(json);
		}

		public static  IfcMaterialList FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialprofilewithoffsets.htm"/>
	/// </summary>
	public  partial class IfcMaterialProfileWithOffsets : IfcMaterialProfile
	{
		public List<IfcLengthMeasure> OffsetValues{get;set;} 

		public IfcMaterialProfileWithOffsets(List<IfcLengthMeasure> offsetValues,IfcProfileDef profile):base(profile)
		{
			OffsetValues = offsetValues;


		}

		public static new IfcMaterialProfileWithOffsets FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialProfileWithOffsets>(json);
		}

		public static new IfcMaterialProfileWithOffsets FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialprofilesetusage.htm"/>
	/// </summary>
	public  partial class IfcMaterialProfileSetUsage : IfcMaterialUsageDefinition
	{
		public IfcMaterialProfileSet ForProfileSet{get;set;} 
		public IfcCardinalPointReference CardinalPoint{get;set;} // optional
		public IfcPositiveLengthMeasure ReferenceExtent{get;set;} // optional

		public IfcMaterialProfileSetUsage(IfcMaterialProfileSet forProfileSet):base()
		{
			ForProfileSet = forProfileSet;


		}

		public static new IfcMaterialProfileSetUsage FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialProfileSetUsage>(json);
		}

		public static new IfcMaterialProfileSetUsage FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialprofilesetusagetapering.htm"/>
	/// </summary>
	public  partial class IfcMaterialProfileSetUsageTapering : IfcMaterialProfileSetUsage
	{
		public IfcMaterialProfileSet ForProfileEndSet{get;set;} 
		public IfcCardinalPointReference CardinalEndPoint{get;set;} // optional

		public IfcMaterialProfileSetUsageTapering(IfcMaterialProfileSet forProfileEndSet,IfcMaterialProfileSet forProfileSet):base(forProfileSet)
		{
			ForProfileEndSet = forProfileEndSet;


		}

		public static new IfcMaterialProfileSetUsageTapering FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialProfileSetUsageTapering>(json);
		}

		public static new IfcMaterialProfileSetUsageTapering FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmaterialrelationship.htm"/>
	/// </summary>
	public  partial class IfcMaterialRelationship : IfcResourceLevelRelationship
	{
		public IfcMaterial RelatingMaterial{get;set;} 
		public List<IfcMaterial> RelatedMaterials{get;set;} 
		public IfcLabel Expression{get;set;} // optional

		public IfcMaterialRelationship(IfcMaterial relatingMaterial,List<IfcMaterial> relatedMaterials):base()
		{
			RelatingMaterial = relatingMaterial;
			RelatedMaterials = relatedMaterials;


		}

		public static new IfcMaterialRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMaterialRelationship>(json);
		}

		public static new IfcMaterialRelationship FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmeasurewithunit.htm"/>
	/// </summary>
	public  partial class IfcMeasureWithUnit : IfcBase
	{
		public IfcValue ValueComponent{get;set;} 
		public IfcUnit UnitComponent{get;set;} 

		public IfcMeasureWithUnit(IfcValue valueComponent,IfcUnit unitComponent):base()
		{
			ValueComponent = valueComponent;
			UnitComponent = unitComponent;


		}

		public static  IfcMeasureWithUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMeasureWithUnit>(json);
		}

		public static  IfcMeasureWithUnit FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmemberstandardcase.htm"/>
	/// </summary>
	public  partial class IfcMemberStandardCase : IfcMember
	{

		public IfcMemberStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcMemberStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMemberStandardCase>(json);
		}

		public static new IfcMemberStandardCase FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcmonetaryunit.htm"/>
	/// </summary>
	public  partial class IfcMonetaryUnit : IfcBase
	{
		public IfcLabel Currency{get;set;} 

		public IfcMonetaryUnit(IfcLabel currency):base()
		{
			Currency = currency;


		}

		public static  IfcMonetaryUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcMonetaryUnit>(json);
		}

		public static  IfcMonetaryUnit FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsiunit.htm"/>
	/// </summary>
	public  partial class IfcSIUnit : IfcNamedUnit
	{
		public IfcSIPrefix Prefix{get;set;} // optional
		public IfcSIUnitName Name{get;set;} 

		public IfcSIUnit(IfcSIUnitName name,IfcDimensionalExponents dimensions,IfcUnitEnum unitType):base(dimensions,unitType)
		{
			Name = name;


		}

		public static new IfcSIUnit FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSIUnit>(json);
		}

		public static new IfcSIUnit FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctypeobject.htm"/>
	/// </summary>
	public  partial class IfcTypeObject : IfcObjectDefinition
	{
		public IfcIdentifier ApplicableOccurrence{get;set;} // optional
		public List<IfcPropertySetDefinition> HasPropertySets{get;set;} // optional

		public IfcTypeObject(IfcGloballyUniqueId globalId):base(globalId)
		{

			HasPropertySets = new List<IfcPropertySetDefinition>();

		}

		public static new IfcTypeObject FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTypeObject>(json);
		}

		public static new IfcTypeObject FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcroot.htm"/>
	/// </summary>
	public abstract partial class IfcRoot : IfcBase
	{
		public IfcGloballyUniqueId GlobalId{get;set;} 
		public IfcOwnerHistory OwnerHistory{get;set;} // optional
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional

		public IfcRoot(IfcGloballyUniqueId globalId):base()
		{
			GlobalId = globalId;


		}

		public static  IfcRoot FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRoot>(json);
		}

		public static  IfcRoot FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcopeningstandardcase.htm"/>
	/// </summary>
	public  partial class IfcOpeningStandardCase : IfcOpeningElement
	{

		public IfcOpeningStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcOpeningStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOpeningStandardCase>(json);
		}

		public static new IfcOpeningStandardCase FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcorganization.htm"/>
	/// </summary>
	public  partial class IfcOrganization : IfcBase
	{
		public IfcIdentifier Identification{get;set;} // optional
		public IfcLabel Name{get;set;} 
		public IfcText Description{get;set;} // optional
		public List<IfcActorRole> Roles{get;set;} // optional
		public List<IfcAddress> Addresses{get;set;} // optional

		public IfcOrganization(IfcLabel name):base()
		{
			Name = name;

			Roles = new List<IfcActorRole>();
			Addresses = new List<IfcAddress>();

		}

		public static  IfcOrganization FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOrganization>(json);
		}

		public static  IfcOrganization FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcorganizationrelationship.htm"/>
	/// </summary>
	public  partial class IfcOrganizationRelationship : IfcResourceLevelRelationship
	{
		public IfcOrganization RelatingOrganization{get;set;} 
		public List<IfcOrganization> RelatedOrganizations{get;set;} 

		public IfcOrganizationRelationship(IfcOrganization relatingOrganization,List<IfcOrganization> relatedOrganizations):base()
		{
			RelatingOrganization = relatingOrganization;
			RelatedOrganizations = relatedOrganizations;


		}

		public static new IfcOrganizationRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOrganizationRelationship>(json);
		}

		public static new IfcOrganizationRelationship FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcownerhistory.htm"/>
	/// </summary>
	public  partial class IfcOwnerHistory : IfcBase
	{
		public IfcPersonAndOrganization OwningUser{get;set;} 
		public IfcApplication OwningApplication{get;set;} 
		public IfcStateEnum State{get;set;} // optional
		public IfcChangeActionEnum ChangeAction{get;set;} // optional
		public IfcTimeStamp LastModifiedDate{get;set;} // optional
		public IfcPersonAndOrganization LastModifyingUser{get;set;} // optional
		public IfcApplication LastModifyingApplication{get;set;} // optional
		public IfcTimeStamp CreationDate{get;set;} 

		public IfcOwnerHistory(IfcPersonAndOrganization owningUser,IfcApplication owningApplication,IfcTimeStamp creationDate):base()
		{
			OwningUser = owningUser;
			OwningApplication = owningApplication;
			CreationDate = creationDate;


		}

		public static  IfcOwnerHistory FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcOwnerHistory>(json);
		}

		public static  IfcOwnerHistory FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrectangleprofiledef.htm"/>
	/// </summary>
	public  partial class IfcRectangleProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure XDim{get;set;} 
		public IfcPositiveLengthMeasure YDim{get;set;} 

		public IfcRectangleProfileDef(IfcPositiveLengthMeasure xDim,IfcPositiveLengthMeasure yDim,IfcProfileTypeEnum profileType):base(profileType)
		{
			XDim = xDim;
			YDim = yDim;


		}

		public static new IfcRectangleProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRectangleProfileDef>(json);
		}

		public static new IfcRectangleProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctshapeprofiledef.htm"/>
	/// </summary>
	public  partial class IfcTShapeProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure Depth{get;set;} 
		public IfcPositiveLengthMeasure FlangeWidth{get;set;} 
		public IfcPositiveLengthMeasure WebThickness{get;set;} 
		public IfcPositiveLengthMeasure FlangeThickness{get;set;} 
		public IfcNonNegativeLengthMeasure FilletRadius{get;set;} // optional
		public IfcNonNegativeLengthMeasure FlangeEdgeRadius{get;set;} // optional
		public IfcNonNegativeLengthMeasure WebEdgeRadius{get;set;} // optional
		public IfcPlaneAngleMeasure WebSlope{get;set;} // optional
		public IfcPlaneAngleMeasure FlangeSlope{get;set;} // optional

		public IfcTShapeProfileDef(IfcPositiveLengthMeasure depth,IfcPositiveLengthMeasure flangeWidth,IfcPositiveLengthMeasure webThickness,IfcPositiveLengthMeasure flangeThickness,IfcProfileTypeEnum profileType):base(profileType)
		{
			Depth = depth;
			FlangeWidth = flangeWidth;
			WebThickness = webThickness;
			FlangeThickness = flangeThickness;


		}

		public static new IfcTShapeProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTShapeProfileDef>(json);
		}

		public static new IfcTShapeProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctrapeziumprofiledef.htm"/>
	/// </summary>
	public  partial class IfcTrapeziumProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure BottomXDim{get;set;} 
		public IfcPositiveLengthMeasure TopXDim{get;set;} 
		public IfcPositiveLengthMeasure YDim{get;set;} 
		public IfcLengthMeasure TopXOffset{get;set;} 

		public IfcTrapeziumProfileDef(IfcPositiveLengthMeasure bottomXDim,IfcPositiveLengthMeasure topXDim,IfcPositiveLengthMeasure yDim,IfcLengthMeasure topXOffset,IfcProfileTypeEnum profileType):base(profileType)
		{
			BottomXDim = bottomXDim;
			TopXDim = topXDim;
			YDim = yDim;
			TopXOffset = topXOffset;


		}

		public static new IfcTrapeziumProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTrapeziumProfileDef>(json);
		}

		public static new IfcTrapeziumProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcushapeprofiledef.htm"/>
	/// </summary>
	public  partial class IfcUShapeProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure Depth{get;set;} 
		public IfcPositiveLengthMeasure FlangeWidth{get;set;} 
		public IfcPositiveLengthMeasure WebThickness{get;set;} 
		public IfcPositiveLengthMeasure FlangeThickness{get;set;} 
		public IfcNonNegativeLengthMeasure FilletRadius{get;set;} // optional
		public IfcNonNegativeLengthMeasure EdgeRadius{get;set;} // optional
		public IfcPlaneAngleMeasure FlangeSlope{get;set;} // optional

		public IfcUShapeProfileDef(IfcPositiveLengthMeasure depth,IfcPositiveLengthMeasure flangeWidth,IfcPositiveLengthMeasure webThickness,IfcPositiveLengthMeasure flangeThickness,IfcProfileTypeEnum profileType):base(profileType)
		{
			Depth = depth;
			FlangeWidth = flangeWidth;
			WebThickness = webThickness;
			FlangeThickness = flangeThickness;


		}

		public static new IfcUShapeProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcUShapeProfileDef>(json);
		}

		public static new IfcUShapeProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifczshapeprofiledef.htm"/>
	/// </summary>
	public  partial class IfcZShapeProfileDef : IfcParameterizedProfileDef
	{
		public IfcPositiveLengthMeasure Depth{get;set;} 
		public IfcPositiveLengthMeasure FlangeWidth{get;set;} 
		public IfcPositiveLengthMeasure WebThickness{get;set;} 
		public IfcPositiveLengthMeasure FlangeThickness{get;set;} 
		public IfcNonNegativeLengthMeasure FilletRadius{get;set;} // optional
		public IfcNonNegativeLengthMeasure EdgeRadius{get;set;} // optional

		public IfcZShapeProfileDef(IfcPositiveLengthMeasure depth,IfcPositiveLengthMeasure flangeWidth,IfcPositiveLengthMeasure webThickness,IfcPositiveLengthMeasure flangeThickness,IfcProfileTypeEnum profileType):base(profileType)
		{
			Depth = depth;
			FlangeWidth = flangeWidth;
			WebThickness = webThickness;
			FlangeThickness = flangeThickness;


		}

		public static new IfcZShapeProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcZShapeProfileDef>(json);
		}

		public static new IfcZShapeProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpath.htm"/>
	/// </summary>
	public  partial class IfcPath : IfcTopologicalRepresentationItem
	{
		public List<IfcOrientedEdge> EdgeList{get;set;} 

		public IfcPath(List<IfcOrientedEdge> edgeList):base()
		{
			EdgeList = edgeList;


		}

		public static new IfcPath FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPath>(json);
		}

		public static new IfcPath FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpermeablecoveringproperties.htm"/>
	/// </summary>
	public  partial class IfcPermeableCoveringProperties : IfcPreDefinedPropertySet
	{
		public IfcPermeableCoveringOperationEnum OperationType{get;set;} 
		public IfcWindowPanelPositionEnum PanelPosition{get;set;} 
		public IfcPositiveLengthMeasure FrameDepth{get;set;} // optional
		public IfcPositiveLengthMeasure FrameThickness{get;set;} // optional
		public IfcShapeAspect ShapeAspectStyle{get;set;} // optional

		public IfcPermeableCoveringProperties(IfcPermeableCoveringOperationEnum operationType,IfcWindowPanelPositionEnum panelPosition,IfcGloballyUniqueId globalId):base(globalId)
		{
			OperationType = operationType;
			PanelPosition = panelPosition;


		}

		public static new IfcPermeableCoveringProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPermeableCoveringProperties>(json);
		}

		public static new IfcPermeableCoveringProperties FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcperson.htm"/>
	/// </summary>
	public  partial class IfcPerson : IfcBase
	{
		public IfcIdentifier Identification{get;set;} // optional
		public IfcLabel FamilyName{get;set;} // optional
		public IfcLabel GivenName{get;set;} // optional
		public List<IfcLabel> MiddleNames{get;set;} // optional
		public List<IfcLabel> PrefixTitles{get;set;} // optional
		public List<IfcLabel> SuffixTitles{get;set;} // optional
		public List<IfcActorRole> Roles{get;set;} // optional
		public List<IfcAddress> Addresses{get;set;} // optional

		public IfcPerson():base()
		{

			MiddleNames = new List<IfcLabel>();
			PrefixTitles = new List<IfcLabel>();
			SuffixTitles = new List<IfcLabel>();
			Roles = new List<IfcActorRole>();
			Addresses = new List<IfcAddress>();

		}

		public static  IfcPerson FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPerson>(json);
		}

		public static  IfcPerson FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpersonandorganization.htm"/>
	/// </summary>
	public  partial class IfcPersonAndOrganization : IfcBase
	{
		public IfcPerson ThePerson{get;set;} 
		public IfcOrganization TheOrganization{get;set;} 
		public List<IfcActorRole> Roles{get;set;} // optional

		public IfcPersonAndOrganization(IfcPerson thePerson,IfcOrganization theOrganization):base()
		{
			ThePerson = thePerson;
			TheOrganization = theOrganization;

			Roles = new List<IfcActorRole>();

		}

		public static  IfcPersonAndOrganization FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPersonAndOrganization>(json);
		}

		public static  IfcPersonAndOrganization FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcphysicalcomplexquantity.htm"/>
	/// </summary>
	public  partial class IfcPhysicalComplexQuantity : IfcPhysicalQuantity
	{
		public List<IfcPhysicalQuantity> HasQuantities{get;set;} 
		public IfcLabel Discrimination{get;set;} 
		public IfcLabel Quality{get;set;} // optional
		public IfcLabel Usage{get;set;} // optional

		public IfcPhysicalComplexQuantity(List<IfcPhysicalQuantity> hasQuantities,IfcLabel discrimination,IfcLabel name):base(name)
		{
			HasQuantities = hasQuantities;
			Discrimination = discrimination;


		}

		public static new IfcPhysicalComplexQuantity FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPhysicalComplexQuantity>(json);
		}

		public static new IfcPhysicalComplexQuantity FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcphysicalquantity.htm"/>
	/// </summary>
	public abstract partial class IfcPhysicalQuantity : IfcBase
	{
		public IfcLabel Name{get;set;} 
		public IfcText Description{get;set;} // optional

		public IfcPhysicalQuantity(IfcLabel name):base()
		{
			Name = name;


		}

		public static  IfcPhysicalQuantity FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPhysicalQuantity>(json);
		}

		public static  IfcPhysicalQuantity FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcphysicalsimplequantity.htm"/>
	/// </summary>
	public abstract partial class IfcPhysicalSimpleQuantity : IfcPhysicalQuantity
	{
		public IfcNamedUnit Unit{get;set;} // optional

		public IfcPhysicalSimpleQuantity(IfcLabel name):base(name)
		{


		}

		public static new IfcPhysicalSimpleQuantity FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPhysicalSimpleQuantity>(json);
		}

		public static new IfcPhysicalSimpleQuantity FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcquantityarea.htm"/>
	/// </summary>
	public  partial class IfcQuantityArea : IfcPhysicalSimpleQuantity
	{
		public IfcAreaMeasure AreaValue{get;set;} 
		public IfcLabel Formula{get;set;} // optional

		public IfcQuantityArea(IfcAreaMeasure areaValue,IfcLabel name):base(name)
		{
			AreaValue = areaValue;


		}

		public static new IfcQuantityArea FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcQuantityArea>(json);
		}

		public static new IfcQuantityArea FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcquantitycount.htm"/>
	/// </summary>
	public  partial class IfcQuantityCount : IfcPhysicalSimpleQuantity
	{
		public IfcCountMeasure CountValue{get;set;} 
		public IfcLabel Formula{get;set;} // optional

		public IfcQuantityCount(IfcCountMeasure countValue,IfcLabel name):base(name)
		{
			CountValue = countValue;


		}

		public static new IfcQuantityCount FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcQuantityCount>(json);
		}

		public static new IfcQuantityCount FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcquantitylength.htm"/>
	/// </summary>
	public  partial class IfcQuantityLength : IfcPhysicalSimpleQuantity
	{
		public IfcLengthMeasure LengthValue{get;set;} 
		public IfcLabel Formula{get;set;} // optional

		public IfcQuantityLength(IfcLengthMeasure lengthValue,IfcLabel name):base(name)
		{
			LengthValue = lengthValue;


		}

		public static new IfcQuantityLength FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcQuantityLength>(json);
		}

		public static new IfcQuantityLength FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcquantitytime.htm"/>
	/// </summary>
	public  partial class IfcQuantityTime : IfcPhysicalSimpleQuantity
	{
		public IfcTimeMeasure TimeValue{get;set;} 
		public IfcLabel Formula{get;set;} // optional

		public IfcQuantityTime(IfcTimeMeasure timeValue,IfcLabel name):base(name)
		{
			TimeValue = timeValue;


		}

		public static new IfcQuantityTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcQuantityTime>(json);
		}

		public static new IfcQuantityTime FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcquantityvolume.htm"/>
	/// </summary>
	public  partial class IfcQuantityVolume : IfcPhysicalSimpleQuantity
	{
		public IfcVolumeMeasure VolumeValue{get;set;} 
		public IfcLabel Formula{get;set;} // optional

		public IfcQuantityVolume(IfcVolumeMeasure volumeValue,IfcLabel name):base(name)
		{
			VolumeValue = volumeValue;


		}

		public static new IfcQuantityVolume FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcQuantityVolume>(json);
		}

		public static new IfcQuantityVolume FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcquantityweight.htm"/>
	/// </summary>
	public  partial class IfcQuantityWeight : IfcPhysicalSimpleQuantity
	{
		public IfcMassMeasure WeightValue{get;set;} 
		public IfcLabel Formula{get;set;} // optional

		public IfcQuantityWeight(IfcMassMeasure weightValue,IfcLabel name):base(name)
		{
			WeightValue = weightValue;


		}

		public static new IfcQuantityWeight FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcQuantityWeight>(json);
		}

		public static new IfcQuantityWeight FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpixeltexture.htm"/>
	/// </summary>
	public  partial class IfcPixelTexture : IfcSurfaceTexture
	{
		public IfcInteger Width{get;set;} 
		public IfcInteger Height{get;set;} 
		public IfcInteger ColourComponents{get;set;} 
		public List<byte[]> Pixel{get;set;} 

		public IfcPixelTexture(IfcInteger width,IfcInteger height,IfcInteger colourComponents,List<byte[]> pixel,bool repeatS,bool repeatT):base(repeatS,repeatT)
		{
			Width = width;
			Height = height;
			ColourComponents = colourComponents;
			Pixel = pixel;


		}

		public static new IfcPixelTexture FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPixelTexture>(json);
		}

		public static new IfcPixelTexture FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplanarbox.htm"/>
	/// </summary>
	public  partial class IfcPlanarBox : IfcPlanarExtent
	{
		public IfcAxis2Placement Placement{get;set;} 

		public IfcPlanarBox(IfcAxis2Placement placement,IfcLengthMeasure sizeInX,IfcLengthMeasure sizeInY):base(sizeInX,sizeInY)
		{
			Placement = placement;


		}

		public static new IfcPlanarBox FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlanarBox>(json);
		}

		public static new IfcPlanarBox FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcplatestandardcase.htm"/>
	/// </summary>
	public  partial class IfcPlateStandardCase : IfcPlate
	{

		public IfcPlateStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcPlateStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPlateStandardCase>(json);
		}

		public static new IfcPlateStandardCase FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpointoncurve.htm"/>
	/// </summary>
	public  partial class IfcPointOnCurve : IfcPoint
	{
		public IfcCurve BasisCurve{get;set;} 
		public IfcParameterValue PointParameter{get;set;} 

		public IfcPointOnCurve(IfcCurve basisCurve,IfcParameterValue pointParameter):base()
		{
			BasisCurve = basisCurve;
			PointParameter = pointParameter;


		}

		public static new IfcPointOnCurve FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPointOnCurve>(json);
		}

		public static new IfcPointOnCurve FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpointonsurface.htm"/>
	/// </summary>
	public  partial class IfcPointOnSurface : IfcPoint
	{
		public IfcSurface BasisSurface{get;set;} 
		public IfcParameterValue PointParameterU{get;set;} 
		public IfcParameterValue PointParameterV{get;set;} 

		public IfcPointOnSurface(IfcSurface basisSurface,IfcParameterValue pointParameterU,IfcParameterValue pointParameterV):base()
		{
			BasisSurface = basisSurface;
			PointParameterU = pointParameterU;
			PointParameterV = pointParameterV;


		}

		public static new IfcPointOnSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPointOnSurface>(json);
		}

		public static new IfcPointOnSurface FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpredefineditem.htm"/>
	/// </summary>
	public abstract partial class IfcPreDefinedItem : IfcPresentationItem
	{
		public IfcLabel Name{get;set;} 

		public IfcPreDefinedItem(IfcLabel name):base()
		{
			Name = name;


		}

		public static new IfcPreDefinedItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPreDefinedItem>(json);
		}

		public static new IfcPreDefinedItem FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpredefinedtextfont.htm"/>
	/// </summary>
	public abstract partial class IfcPreDefinedTextFont : IfcPreDefinedItem
	{

		public IfcPreDefinedTextFont(IfcLabel name):base(name)
		{


		}

		public static new IfcPreDefinedTextFont FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPreDefinedTextFont>(json);
		}

		public static new IfcPreDefinedTextFont FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpredefinedproperties.htm"/>
	/// </summary>
	public abstract partial class IfcPreDefinedProperties : IfcPropertyAbstraction
	{

		public IfcPreDefinedProperties():base()
		{


		}

		public static new IfcPreDefinedProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPreDefinedProperties>(json);
		}

		public static new IfcPreDefinedProperties FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcementbarproperties.htm"/>
	/// </summary>
	public  partial class IfcReinforcementBarProperties : IfcPreDefinedProperties
	{
		public IfcAreaMeasure TotalCrossSectionArea{get;set;} 
		public IfcLabel SteelGrade{get;set;} 
		public IfcReinforcingBarSurfaceEnum BarSurface{get;set;} // optional
		public IfcLengthMeasure EffectiveDepth{get;set;} // optional
		public IfcPositiveLengthMeasure NominalBarDiameter{get;set;} // optional
		public IfcCountMeasure BarCount{get;set;} // optional

		public IfcReinforcementBarProperties(IfcAreaMeasure totalCrossSectionArea,IfcLabel steelGrade):base()
		{
			TotalCrossSectionArea = totalCrossSectionArea;
			SteelGrade = steelGrade;


		}

		public static new IfcReinforcementBarProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReinforcementBarProperties>(json);
		}

		public static new IfcReinforcementBarProperties FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsectionproperties.htm"/>
	/// </summary>
	public  partial class IfcSectionProperties : IfcPreDefinedProperties
	{
		public IfcSectionTypeEnum SectionType{get;set;} 
		public IfcProfileDef StartProfile{get;set;} 
		public IfcProfileDef EndProfile{get;set;} // optional

		public IfcSectionProperties(IfcSectionTypeEnum sectionType,IfcProfileDef startProfile):base()
		{
			SectionType = sectionType;
			StartProfile = startProfile;


		}

		public static new IfcSectionProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSectionProperties>(json);
		}

		public static new IfcSectionProperties FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsectionreinforcementproperties.htm"/>
	/// </summary>
	public  partial class IfcSectionReinforcementProperties : IfcPreDefinedProperties
	{
		public IfcLengthMeasure LongitudinalStartPosition{get;set;} 
		public IfcLengthMeasure LongitudinalEndPosition{get;set;} 
		public IfcLengthMeasure TransversePosition{get;set;} // optional
		public IfcReinforcingBarRoleEnum ReinforcementRole{get;set;} 
		public IfcSectionProperties SectionDefinition{get;set;} 
		public List<IfcReinforcementBarProperties> CrossSectionReinforcementDefinitions{get;set;} 

		public IfcSectionReinforcementProperties(IfcLengthMeasure longitudinalStartPosition,IfcLengthMeasure longitudinalEndPosition,IfcReinforcingBarRoleEnum reinforcementRole,IfcSectionProperties sectionDefinition,List<IfcReinforcementBarProperties> crossSectionReinforcementDefinitions):base()
		{
			LongitudinalStartPosition = longitudinalStartPosition;
			LongitudinalEndPosition = longitudinalEndPosition;
			ReinforcementRole = reinforcementRole;
			SectionDefinition = sectionDefinition;
			CrossSectionReinforcementDefinitions = crossSectionReinforcementDefinitions;


		}

		public static new IfcSectionReinforcementProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSectionReinforcementProperties>(json);
		}

		public static new IfcSectionReinforcementProperties FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcementdefinitionproperties.htm"/>
	/// </summary>
	public  partial class IfcReinforcementDefinitionProperties : IfcPreDefinedPropertySet
	{
		public IfcLabel DefinitionType{get;set;} // optional
		public List<IfcSectionReinforcementProperties> ReinforcementSectionDefinitions{get;set;} 

		public IfcReinforcementDefinitionProperties(List<IfcSectionReinforcementProperties> reinforcementSectionDefinitions,IfcGloballyUniqueId globalId):base(globalId)
		{
			ReinforcementSectionDefinitions = reinforcementSectionDefinitions;


		}

		public static new IfcReinforcementDefinitionProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReinforcementDefinitionProperties>(json);
		}

		public static new IfcReinforcementDefinitionProperties FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowliningproperties.htm"/>
	/// </summary>
	public  partial class IfcWindowLiningProperties : IfcPreDefinedPropertySet
	{
		public IfcPositiveLengthMeasure LiningDepth{get;set;} // optional
		public IfcNonNegativeLengthMeasure LiningThickness{get;set;} // optional
		public IfcNonNegativeLengthMeasure TransomThickness{get;set;} // optional
		public IfcNonNegativeLengthMeasure MullionThickness{get;set;} // optional
		public IfcNormalisedRatioMeasure FirstTransomOffset{get;set;} // optional
		public IfcNormalisedRatioMeasure SecondTransomOffset{get;set;} // optional
		public IfcNormalisedRatioMeasure FirstMullionOffset{get;set;} // optional
		public IfcNormalisedRatioMeasure SecondMullionOffset{get;set;} // optional
		public IfcShapeAspect ShapeAspectStyle{get;set;} // optional
		public IfcLengthMeasure LiningOffset{get;set;} // optional
		public IfcLengthMeasure LiningToPanelOffsetX{get;set;} // optional
		public IfcLengthMeasure LiningToPanelOffsetY{get;set;} // optional

		public IfcWindowLiningProperties(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcWindowLiningProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWindowLiningProperties>(json);
		}

		public static new IfcWindowLiningProperties FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowpanelproperties.htm"/>
	/// </summary>
	public  partial class IfcWindowPanelProperties : IfcPreDefinedPropertySet
	{
		public IfcWindowPanelOperationEnum OperationType{get;set;} 
		public IfcWindowPanelPositionEnum PanelPosition{get;set;} 
		public IfcPositiveLengthMeasure FrameDepth{get;set;} // optional
		public IfcPositiveLengthMeasure FrameThickness{get;set;} // optional
		public IfcShapeAspect ShapeAspectStyle{get;set;} // optional

		public IfcWindowPanelProperties(IfcWindowPanelOperationEnum operationType,IfcWindowPanelPositionEnum panelPosition,IfcGloballyUniqueId globalId):base(globalId)
		{
			OperationType = operationType;
			PanelPosition = panelPosition;


		}

		public static new IfcWindowPanelProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWindowPanelProperties>(json);
		}

		public static new IfcWindowPanelProperties FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertysetdefinition.htm"/>
	/// </summary>
	public abstract partial class IfcPropertySetDefinition : IfcPropertyDefinition
	{

		public IfcPropertySetDefinition(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcPropertySetDefinition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertySetDefinition>(json);
		}

		public static new IfcPropertySetDefinition FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextstylefontmodel.htm"/>
	/// </summary>
	public  partial class IfcTextStyleFontModel : IfcPreDefinedTextFont
	{
		public List<IfcTextFontName> FontFamily{get;set;} 
		public IfcFontStyle FontStyle{get;set;} // optional
		public IfcFontVariant FontVariant{get;set;} // optional
		public IfcFontWeight FontWeight{get;set;} // optional
		public IfcSizeSelect FontSize{get;set;} 

		public IfcTextStyleFontModel(List<IfcTextFontName> fontFamily,IfcSizeSelect fontSize,IfcLabel name):base(name)
		{
			FontFamily = fontFamily;
			FontSize = fontSize;


		}

		public static new IfcTextStyleFontModel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextStyleFontModel>(json);
		}

		public static new IfcTextStyleFontModel FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacestylelighting.htm"/>
	/// </summary>
	public  partial class IfcSurfaceStyleLighting : IfcPresentationItem
	{
		public IfcColourRgb DiffuseTransmissionColour{get;set;} 
		public IfcColourRgb DiffuseReflectionColour{get;set;} 
		public IfcColourRgb TransmissionColour{get;set;} 
		public IfcColourRgb ReflectanceColour{get;set;} 

		public IfcSurfaceStyleLighting(IfcColourRgb diffuseTransmissionColour,IfcColourRgb diffuseReflectionColour,IfcColourRgb transmissionColour,IfcColourRgb reflectanceColour):base()
		{
			DiffuseTransmissionColour = diffuseTransmissionColour;
			DiffuseReflectionColour = diffuseReflectionColour;
			TransmissionColour = transmissionColour;
			ReflectanceColour = reflectanceColour;


		}

		public static new IfcSurfaceStyleLighting FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceStyleLighting>(json);
		}

		public static new IfcSurfaceStyleLighting FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacestylerefraction.htm"/>
	/// </summary>
	public  partial class IfcSurfaceStyleRefraction : IfcPresentationItem
	{
		public IfcReal RefractionIndex{get;set;} // optional
		public IfcReal DispersionFactor{get;set;} // optional

		public IfcSurfaceStyleRefraction():base()
		{


		}

		public static new IfcSurfaceStyleRefraction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceStyleRefraction>(json);
		}

		public static new IfcSurfaceStyleRefraction FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacestyleshading.htm"/>
	/// </summary>
	public  partial class IfcSurfaceStyleShading : IfcPresentationItem
	{
		public IfcColourRgb SurfaceColour{get;set;} 

		public IfcSurfaceStyleShading(IfcColourRgb surfaceColour):base()
		{
			SurfaceColour = surfaceColour;


		}

		public static new IfcSurfaceStyleShading FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceStyleShading>(json);
		}

		public static new IfcSurfaceStyleShading FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacestylewithtextures.htm"/>
	/// </summary>
	public  partial class IfcSurfaceStyleWithTextures : IfcPresentationItem
	{
		public List<IfcSurfaceTexture> Textures{get;set;} 

		public IfcSurfaceStyleWithTextures(List<IfcSurfaceTexture> textures):base()
		{
			Textures = textures;


		}

		public static new IfcSurfaceStyleWithTextures FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceStyleWithTextures>(json);
		}

		public static new IfcSurfaceStyleWithTextures FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextstylefordefinedfont.htm"/>
	/// </summary>
	public  partial class IfcTextStyleForDefinedFont : IfcPresentationItem
	{
		public IfcColour Colour{get;set;} 
		public IfcColour BackgroundColour{get;set;} // optional

		public IfcTextStyleForDefinedFont(IfcColour colour):base()
		{
			Colour = colour;


		}

		public static new IfcTextStyleForDefinedFont FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextStyleForDefinedFont>(json);
		}

		public static new IfcTextStyleForDefinedFont FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextstyletextmodel.htm"/>
	/// </summary>
	public  partial class IfcTextStyleTextModel : IfcPresentationItem
	{
		public IfcSizeSelect TextIndent{get;set;} // optional
		public IfcTextAlignment TextAlign{get;set;} // optional
		public IfcTextDecoration TextDecoration{get;set;} // optional
		public IfcSizeSelect LetterSpacing{get;set;} // optional
		public IfcSizeSelect WordSpacing{get;set;} // optional
		public IfcTextTransformation TextTransform{get;set;} // optional
		public IfcSizeSelect LineHeight{get;set;} // optional

		public IfcTextStyleTextModel():base()
		{


		}

		public static new IfcTextStyleTextModel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextStyleTextModel>(json);
		}

		public static new IfcTextStyleTextModel FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctexturevertex.htm"/>
	/// </summary>
	public  partial class IfcTextureVertex : IfcPresentationItem
	{
		public List<IfcParameterValue> Coordinates{get;set;} 

		public IfcTextureVertex(List<IfcParameterValue> coordinates):base()
		{
			Coordinates = coordinates;


		}

		public static new IfcTextureVertex FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextureVertex>(json);
		}

		public static new IfcTextureVertex FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctexturevertexlist.htm"/>
	/// </summary>
	public  partial class IfcTextureVertexList : IfcPresentationItem
	{
		public List<List<IfcParameterValue>> TexCoordsList{get;set;} 

		public IfcTextureVertexList(List<List<IfcParameterValue>> texCoordsList):base()
		{
			TexCoordsList = texCoordsList;


		}

		public static new IfcTextureVertexList FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextureVertexList>(json);
		}

		public static new IfcTextureVertexList FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpresentationlayerassignment.htm"/>
	/// </summary>
	public  partial class IfcPresentationLayerAssignment : IfcBase
	{
		public IfcLabel Name{get;set;} 
		public IfcText Description{get;set;} // optional
		public List<IfcLayeredItem> AssignedItems{get;set;} 
		public IfcIdentifier Identifier{get;set;} // optional

		public IfcPresentationLayerAssignment(IfcLabel name,List<IfcLayeredItem> assignedItems):base()
		{
			Name = name;
			AssignedItems = assignedItems;


		}

		public static  IfcPresentationLayerAssignment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPresentationLayerAssignment>(json);
		}

		public static  IfcPresentationLayerAssignment FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpresentationlayerwithstyle.htm"/>
	/// </summary>
	public  partial class IfcPresentationLayerWithStyle : IfcPresentationLayerAssignment
	{
		public bool? LayerOn{get;set;} 
		public bool? LayerFrozen{get;set;} 
		public bool? LayerBlocked{get;set;} 
		public List<IfcPresentationStyle> LayerStyles{get;set;} 

		public IfcPresentationLayerWithStyle(bool? layerOn,bool? layerFrozen,bool? layerBlocked,List<IfcPresentationStyle> layerStyles,IfcLabel name,List<IfcLayeredItem> assignedItems):base(name,assignedItems)
		{
			LayerOn = layerOn;
			LayerFrozen = layerFrozen;
			LayerBlocked = layerBlocked;
			LayerStyles = layerStyles;


		}

		public static new IfcPresentationLayerWithStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPresentationLayerWithStyle>(json);
		}

		public static new IfcPresentationLayerWithStyle FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacestyle.htm"/>
	/// </summary>
	public  partial class IfcSurfaceStyle : IfcPresentationStyle
	{
		public IfcSurfaceSide Side{get;set;} 
		public List<IfcSurfaceStyleElementSelect> Styles{get;set;} 

		public IfcSurfaceStyle(IfcSurfaceSide side,List<IfcSurfaceStyleElementSelect> styles):base()
		{
			Side = side;
			Styles = styles;


		}

		public static new IfcSurfaceStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceStyle>(json);
		}

		public static new IfcSurfaceStyle FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextstyle.htm"/>
	/// </summary>
	public  partial class IfcTextStyle : IfcPresentationStyle
	{
		public IfcTextStyleForDefinedFont TextCharacterAppearance{get;set;} // optional
		public IfcTextStyleTextModel TextStyle{get;set;} // optional
		public IfcTextFontSelect TextFontStyle{get;set;} 
		public bool ModelOrDraughting{get;set;} // optional

		public IfcTextStyle(IfcTextFontSelect textFontStyle):base()
		{
			TextFontStyle = textFontStyle;


		}

		public static new IfcTextStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextStyle>(json);
		}

		public static new IfcTextStyle FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpresentationstyleassignment.htm"/>
	/// </summary>
	public  partial class IfcPresentationStyleAssignment : IfcBase
	{
		public List<IfcPresentationStyleSelect> Styles{get;set;} 

		public IfcPresentationStyleAssignment(List<IfcPresentationStyleSelect> styles):base()
		{
			Styles = styles;


		}

		public static  IfcPresentationStyleAssignment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPresentationStyleAssignment>(json);
		}

		public static  IfcPresentationStyleAssignment FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcprocedure.htm"/>
	/// </summary>
	public  partial class IfcProcedure : IfcProcess
	{
		public IfcProcedureTypeEnum PredefinedType{get;set;} // optional

		public IfcProcedure(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcProcedure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProcedure>(json);
		}

		public static new IfcProcedure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproceduretype.htm"/>
	/// </summary>
	public  partial class IfcProcedureType : IfcTypeProcess
	{
		public IfcProcedureTypeEnum PredefinedType{get;set;} 

		public IfcProcedureType(IfcProcedureTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcProcedureType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProcedureType>(json);
		}

		public static new IfcProcedureType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctask.htm"/>
	/// </summary>
	public  partial class IfcTask : IfcProcess
	{
		public IfcLabel Status{get;set;} // optional
		public IfcLabel WorkMethod{get;set;} // optional
		public bool IsMilestone{get;set;} 
		public int Priority{get;set;} // optional
		public IfcTaskTime TaskTime{get;set;} // optional
		public IfcTaskTypeEnum PredefinedType{get;set;} // optional

		public IfcTask(bool isMilestone,IfcGloballyUniqueId globalId):base(globalId)
		{
			IsMilestone = isMilestone;


		}

		public static new IfcTask FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTask>(json);
		}

		public static new IfcTask FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproxy.htm"/>
	/// </summary>
	public  partial class IfcProxy : IfcProduct
	{
		public IfcObjectTypeEnum ProxyType{get;set;} 
		public IfcLabel Tag{get;set;} // optional

		public IfcProxy(IfcObjectTypeEnum proxyType,IfcGloballyUniqueId globalId):base(globalId)
		{
			ProxyType = proxyType;


		}

		public static new IfcProxy FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProxy>(json);
		}

		public static new IfcProxy FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralactivity.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralActivity : IfcProduct
	{
		public IfcStructuralLoad AppliedLoad{get;set;} 
		public IfcGlobalOrLocalEnum GlobalOrLocal{get;set;} 

		public IfcStructuralActivity(IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcGloballyUniqueId globalId):base(globalId)
		{
			AppliedLoad = appliedLoad;
			GlobalOrLocal = globalOrLocal;


		}

		public static new IfcStructuralActivity FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralActivity>(json);
		}

		public static new IfcStructuralActivity FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralitem.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralItem : IfcProduct
	{

		public IfcStructuralItem(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcStructuralItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralItem>(json);
		}

		public static new IfcStructuralItem FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcproductdefinitionshape.htm"/>
	/// </summary>
	public  partial class IfcProductDefinitionShape : IfcProductRepresentation
	{

		public IfcProductDefinitionShape(List<IfcRepresentation> representations):base(representations)
		{


		}

		public static new IfcProductDefinitionShape FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcProductDefinitionShape>(json);
		}

		public static new IfcProductDefinitionShape FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsimpleproperty.htm"/>
	/// </summary>
	public abstract partial class IfcSimpleProperty : IfcProperty
	{

		public IfcSimpleProperty(IfcIdentifier name):base(name)
		{


		}

		public static new IfcSimpleProperty FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSimpleProperty>(json);
		}

		public static new IfcSimpleProperty FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertyenumeration.htm"/>
	/// </summary>
	public  partial class IfcPropertyEnumeration : IfcPropertyAbstraction
	{
		public IfcLabel Name{get;set;} 
		public List<IfcValue> EnumerationValues{get;set;} 
		public IfcUnit Unit{get;set;} // optional

		public IfcPropertyEnumeration(IfcLabel name,List<IfcValue> enumerationValues):base()
		{
			Name = name;
			EnumerationValues = enumerationValues;


		}

		public static new IfcPropertyEnumeration FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyEnumeration>(json);
		}

		public static new IfcPropertyEnumeration FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertyboundedvalue.htm"/>
	/// </summary>
	public  partial class IfcPropertyBoundedValue : IfcSimpleProperty
	{
		public IfcValue UpperBoundValue{get;set;} // optional
		public IfcValue LowerBoundValue{get;set;} // optional
		public IfcUnit Unit{get;set;} // optional
		public IfcValue SetPointValue{get;set;} // optional

		public IfcPropertyBoundedValue(IfcIdentifier name):base(name)
		{


		}

		public static new IfcPropertyBoundedValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyBoundedValue>(json);
		}

		public static new IfcPropertyBoundedValue FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertydefinition.htm"/>
	/// </summary>
	public abstract partial class IfcPropertyDefinition : IfcRoot
	{

		public IfcPropertyDefinition(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcPropertyDefinition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyDefinition>(json);
		}

		public static new IfcPropertyDefinition FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertytemplatedefinition.htm"/>
	/// </summary>
	public abstract partial class IfcPropertyTemplateDefinition : IfcPropertyDefinition
	{

		public IfcPropertyTemplateDefinition(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcPropertyTemplateDefinition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyTemplateDefinition>(json);
		}

		public static new IfcPropertyTemplateDefinition FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertydependencyrelationship.htm"/>
	/// </summary>
	public  partial class IfcPropertyDependencyRelationship : IfcResourceLevelRelationship
	{
		public IfcProperty DependingProperty{get;set;} 
		public IfcProperty DependantProperty{get;set;} 
		public IfcText Expression{get;set;} // optional

		public IfcPropertyDependencyRelationship(IfcProperty dependingProperty,IfcProperty dependantProperty):base()
		{
			DependingProperty = dependingProperty;
			DependantProperty = dependantProperty;


		}

		public static new IfcPropertyDependencyRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyDependencyRelationship>(json);
		}

		public static new IfcPropertyDependencyRelationship FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertyenumeratedvalue.htm"/>
	/// </summary>
	public  partial class IfcPropertyEnumeratedValue : IfcSimpleProperty
	{
		public List<IfcValue> EnumerationValues{get;set;} // optional
		public IfcPropertyEnumeration EnumerationReference{get;set;} // optional

		public IfcPropertyEnumeratedValue(IfcIdentifier name):base(name)
		{

			EnumerationValues = new List<IfcValue>();

		}

		public static new IfcPropertyEnumeratedValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyEnumeratedValue>(json);
		}

		public static new IfcPropertyEnumeratedValue FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertylistvalue.htm"/>
	/// </summary>
	public  partial class IfcPropertyListValue : IfcSimpleProperty
	{
		public List<IfcValue> ListValues{get;set;} // optional
		public IfcUnit Unit{get;set;} // optional

		public IfcPropertyListValue(IfcIdentifier name):base(name)
		{

			ListValues = new List<IfcValue>();

		}

		public static new IfcPropertyListValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyListValue>(json);
		}

		public static new IfcPropertyListValue FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertyreferencevalue.htm"/>
	/// </summary>
	public  partial class IfcPropertyReferenceValue : IfcSimpleProperty
	{
		public IfcText UsageName{get;set;} // optional
		public IfcObjectReferenceSelect PropertyReference{get;set;} // optional

		public IfcPropertyReferenceValue(IfcIdentifier name):base(name)
		{


		}

		public static new IfcPropertyReferenceValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyReferenceValue>(json);
		}

		public static new IfcPropertyReferenceValue FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertyset.htm"/>
	/// </summary>
	public  partial class IfcPropertySet : IfcPropertySetDefinition
	{
		public List<IfcProperty> HasProperties{get;set;} 

		public IfcPropertySet(List<IfcProperty> hasProperties,IfcGloballyUniqueId globalId):base(globalId)
		{
			HasProperties = hasProperties;


		}

		public static new IfcPropertySet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertySet>(json);
		}

		public static new IfcPropertySet FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertysettemplate.htm"/>
	/// </summary>
	public  partial class IfcPropertySetTemplate : IfcPropertyTemplateDefinition
	{
		public IfcPropertySetTemplateTypeEnum TemplateType{get;set;} // optional
		public IfcIdentifier ApplicableEntity{get;set;} // optional
		public List<IfcPropertyTemplate> HasPropertyTemplates{get;set;} 

		public IfcPropertySetTemplate(List<IfcPropertyTemplate> hasPropertyTemplates,IfcGloballyUniqueId globalId):base(globalId)
		{
			HasPropertyTemplates = hasPropertyTemplates;


		}

		public static new IfcPropertySetTemplate FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertySetTemplate>(json);
		}

		public static new IfcPropertySetTemplate FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertysinglevalue.htm"/>
	/// </summary>
	public  partial class IfcPropertySingleValue : IfcSimpleProperty
	{
		public IfcValue NominalValue{get;set;} // optional
		public IfcUnit Unit{get;set;} // optional

		public IfcPropertySingleValue(IfcIdentifier name):base(name)
		{


		}

		public static new IfcPropertySingleValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertySingleValue>(json);
		}

		public static new IfcPropertySingleValue FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcpropertytablevalue.htm"/>
	/// </summary>
	public  partial class IfcPropertyTableValue : IfcSimpleProperty
	{
		public List<IfcValue> DefiningValues{get;set;} // optional
		public List<IfcValue> DefinedValues{get;set;} // optional
		public IfcText Expression{get;set;} // optional
		public IfcUnit DefiningUnit{get;set;} // optional
		public IfcUnit DefinedUnit{get;set;} // optional
		public IfcCurveInterpolationEnum CurveInterpolation{get;set;} // optional

		public IfcPropertyTableValue(IfcIdentifier name):base(name)
		{

			DefiningValues = new List<IfcValue>();
			DefinedValues = new List<IfcValue>();

		}

		public static new IfcPropertyTableValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcPropertyTableValue>(json);
		}

		public static new IfcPropertyTableValue FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsimplepropertytemplate.htm"/>
	/// </summary>
	public  partial class IfcSimplePropertyTemplate : IfcPropertyTemplate
	{
		public IfcSimplePropertyTemplateTypeEnum TemplateType{get;set;} // optional
		public IfcLabel PrimaryMeasureType{get;set;} // optional
		public IfcLabel SecondaryMeasureType{get;set;} // optional
		public IfcPropertyEnumeration Enumerators{get;set;} // optional
		public IfcUnit PrimaryUnit{get;set;} // optional
		public IfcUnit SecondaryUnit{get;set;} // optional
		public IfcLabel Expression{get;set;} // optional
		public IfcStateEnum AccessState{get;set;} // optional

		public IfcSimplePropertyTemplate(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSimplePropertyTemplate FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSimplePropertyTemplate>(json);
		}

		public static new IfcSimplePropertyTemplate FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrectanglehollowprofiledef.htm"/>
	/// </summary>
	public  partial class IfcRectangleHollowProfileDef : IfcRectangleProfileDef
	{
		public IfcPositiveLengthMeasure WallThickness{get;set;} 
		public IfcNonNegativeLengthMeasure InnerFilletRadius{get;set;} // optional
		public IfcNonNegativeLengthMeasure OuterFilletRadius{get;set;} // optional

		public IfcRectangleHollowProfileDef(IfcPositiveLengthMeasure wallThickness,IfcPositiveLengthMeasure xDim,IfcPositiveLengthMeasure yDim,IfcProfileTypeEnum profileType):base(xDim,yDim,profileType)
		{
			WallThickness = wallThickness;


		}

		public static new IfcRectangleHollowProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRectangleHollowProfileDef>(json);
		}

		public static new IfcRectangleHollowProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcroundedrectangleprofiledef.htm"/>
	/// </summary>
	public  partial class IfcRoundedRectangleProfileDef : IfcRectangleProfileDef
	{
		public IfcPositiveLengthMeasure RoundingRadius{get;set;} 

		public IfcRoundedRectangleProfileDef(IfcPositiveLengthMeasure roundingRadius,IfcPositiveLengthMeasure xDim,IfcPositiveLengthMeasure yDim,IfcProfileTypeEnum profileType):base(xDim,yDim,profileType)
		{
			RoundingRadius = roundingRadius;


		}

		public static new IfcRoundedRectangleProfileDef FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRoundedRectangleProfileDef>(json);
		}

		public static new IfcRoundedRectangleProfileDef FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrecurrencepattern.htm"/>
	/// </summary>
	public  partial class IfcRecurrencePattern : IfcBase
	{
		public IfcRecurrenceTypeEnum RecurrenceType{get;set;} 
		public List<IfcDayInMonthNumber> DayComponent{get;set;} // optional
		public List<IfcDayInWeekNumber> WeekdayComponent{get;set;} // optional
		public List<IfcMonthInYearNumber> MonthComponent{get;set;} // optional
		public IfcInteger Position{get;set;} // optional
		public IfcInteger Interval{get;set;} // optional
		public IfcInteger Occurrences{get;set;} // optional
		public List<IfcTimePeriod> TimePeriods{get;set;} // optional

		public IfcRecurrencePattern(IfcRecurrenceTypeEnum recurrenceType):base()
		{
			RecurrenceType = recurrenceType;

			DayComponent = new List<IfcDayInMonthNumber>();
			WeekdayComponent = new List<IfcDayInWeekNumber>();
			MonthComponent = new List<IfcMonthInYearNumber>();
			TimePeriods = new List<IfcTimePeriod>();

		}

		public static  IfcRecurrencePattern FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRecurrencePattern>(json);
		}

		public static  IfcRecurrencePattern FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreference.htm"/>
	/// </summary>
	public  partial class IfcReference : IfcBase
	{
		public IfcIdentifier TypeIdentifier{get;set;} // optional
		public IfcIdentifier AttributeIdentifier{get;set;} // optional
		public IfcLabel InstanceName{get;set;} // optional
		public List<int> ListPositions{get;set;} // optional
		public IfcReference InnerReference{get;set;} // optional

		public IfcReference():base()
		{

			ListPositions = new List<int>();

		}

		public static  IfcReference FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReference>(json);
		}

		public static  IfcReference FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcregulartimeseries.htm"/>
	/// </summary>
	public  partial class IfcRegularTimeSeries : IfcTimeSeries
	{
		public IfcTimeMeasure TimeStep{get;set;} 
		public List<IfcTimeSeriesValue> Values{get;set;} 

		public IfcRegularTimeSeries(IfcTimeMeasure timeStep,List<IfcTimeSeriesValue> values,IfcLabel name,IfcDateTime startTime,IfcDateTime endTime,IfcTimeSeriesDataTypeEnum timeSeriesDataType,IfcDataOriginEnum dataOrigin):base(name,startTime,endTime,timeSeriesDataType,dataOrigin)
		{
			TimeStep = timeStep;
			Values = values;


		}

		public static new IfcRegularTimeSeries FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRegularTimeSeries>(json);
		}

		public static new IfcRegularTimeSeries FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingbar.htm"/>
	/// </summary>
	public  partial class IfcReinforcingBar : IfcReinforcingElement
	{
		public IfcPositiveLengthMeasure NominalDiameter{get;set;} // optional
		public IfcAreaMeasure CrossSectionArea{get;set;} // optional
		public IfcPositiveLengthMeasure BarLength{get;set;} // optional
		public IfcReinforcingBarTypeEnum PredefinedType{get;set;} // optional
		public IfcReinforcingBarSurfaceEnum BarSurface{get;set;} // optional

		public IfcReinforcingBar(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcReinforcingBar FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReinforcingBar>(json);
		}

		public static new IfcReinforcingBar FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingbartype.htm"/>
	/// </summary>
	public  partial class IfcReinforcingBarType : IfcReinforcingElementType
	{
		public IfcReinforcingBarTypeEnum PredefinedType{get;set;} 
		public IfcPositiveLengthMeasure NominalDiameter{get;set;} // optional
		public IfcAreaMeasure CrossSectionArea{get;set;} // optional
		public IfcPositiveLengthMeasure BarLength{get;set;} // optional
		public IfcReinforcingBarSurfaceEnum BarSurface{get;set;} // optional
		public IfcLabel BendingShapeCode{get;set;} // optional
		public List<IfcBendingParameterSelect> BendingParameters{get;set;} // optional

		public IfcReinforcingBarType(IfcReinforcingBarTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;

			BendingParameters = new List<IfcBendingParameterSelect>();

		}

		public static new IfcReinforcingBarType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReinforcingBarType>(json);
		}

		public static new IfcReinforcingBarType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingmesh.htm"/>
	/// </summary>
	public  partial class IfcReinforcingMesh : IfcReinforcingElement
	{
		public IfcPositiveLengthMeasure MeshLength{get;set;} // optional
		public IfcPositiveLengthMeasure MeshWidth{get;set;} // optional
		public IfcPositiveLengthMeasure LongitudinalBarNominalDiameter{get;set;} // optional
		public IfcPositiveLengthMeasure TransverseBarNominalDiameter{get;set;} // optional
		public IfcAreaMeasure LongitudinalBarCrossSectionArea{get;set;} // optional
		public IfcAreaMeasure TransverseBarCrossSectionArea{get;set;} // optional
		public IfcPositiveLengthMeasure LongitudinalBarSpacing{get;set;} // optional
		public IfcPositiveLengthMeasure TransverseBarSpacing{get;set;} // optional
		public IfcReinforcingMeshTypeEnum PredefinedType{get;set;} // optional

		public IfcReinforcingMesh(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcReinforcingMesh FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReinforcingMesh>(json);
		}

		public static new IfcReinforcingMesh FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctendon.htm"/>
	/// </summary>
	public  partial class IfcTendon : IfcReinforcingElement
	{
		public IfcTendonTypeEnum PredefinedType{get;set;} // optional
		public IfcPositiveLengthMeasure NominalDiameter{get;set;} // optional
		public IfcAreaMeasure CrossSectionArea{get;set;} // optional
		public IfcForceMeasure TensionForce{get;set;} // optional
		public IfcPressureMeasure PreStress{get;set;} // optional
		public IfcNormalisedRatioMeasure FrictionCoefficient{get;set;} // optional
		public IfcPositiveLengthMeasure AnchorageSlip{get;set;} // optional
		public IfcPositiveLengthMeasure MinCurvatureRadius{get;set;} // optional

		public IfcTendon(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcTendon FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTendon>(json);
		}

		public static new IfcTendon FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctendonanchor.htm"/>
	/// </summary>
	public  partial class IfcTendonAnchor : IfcReinforcingElement
	{
		public IfcTendonAnchorTypeEnum PredefinedType{get;set;} // optional

		public IfcTendonAnchor(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcTendonAnchor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTendonAnchor>(json);
		}

		public static new IfcTendonAnchor FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreinforcingmeshtype.htm"/>
	/// </summary>
	public  partial class IfcReinforcingMeshType : IfcReinforcingElementType
	{
		public IfcReinforcingMeshTypeEnum PredefinedType{get;set;} 
		public IfcPositiveLengthMeasure MeshLength{get;set;} // optional
		public IfcPositiveLengthMeasure MeshWidth{get;set;} // optional
		public IfcPositiveLengthMeasure LongitudinalBarNominalDiameter{get;set;} // optional
		public IfcPositiveLengthMeasure TransverseBarNominalDiameter{get;set;} // optional
		public IfcAreaMeasure LongitudinalBarCrossSectionArea{get;set;} // optional
		public IfcAreaMeasure TransverseBarCrossSectionArea{get;set;} // optional
		public IfcPositiveLengthMeasure LongitudinalBarSpacing{get;set;} // optional
		public IfcPositiveLengthMeasure TransverseBarSpacing{get;set;} // optional
		public IfcLabel BendingShapeCode{get;set;} // optional
		public List<IfcBendingParameterSelect> BendingParameters{get;set;} // optional

		public IfcReinforcingMeshType(IfcReinforcingMeshTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;

			BendingParameters = new List<IfcBendingParameterSelect>();

		}

		public static new IfcReinforcingMeshType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcReinforcingMeshType>(json);
		}

		public static new IfcReinforcingMeshType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctendonanchortype.htm"/>
	/// </summary>
	public  partial class IfcTendonAnchorType : IfcReinforcingElementType
	{
		public IfcTendonAnchorTypeEnum PredefinedType{get;set;} 

		public IfcTendonAnchorType(IfcTendonAnchorTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcTendonAnchorType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTendonAnchorType>(json);
		}

		public static new IfcTendonAnchorType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctendontype.htm"/>
	/// </summary>
	public  partial class IfcTendonType : IfcReinforcingElementType
	{
		public IfcTendonTypeEnum PredefinedType{get;set;} 
		public IfcPositiveLengthMeasure NominalDiameter{get;set;} // optional
		public IfcAreaMeasure CrossSectionArea{get;set;} // optional
		public IfcPositiveLengthMeasure SheethDiameter{get;set;} // optional

		public IfcTendonType(IfcTendonTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcTendonType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTendonType>(json);
		}

		public static new IfcTendonType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelaggregates.htm"/>
	/// </summary>
	public  partial class IfcRelAggregates : IfcRelDecomposes
	{
		public IfcObjectDefinition RelatingObject{get;set;} 
		public List<IfcObjectDefinition> RelatedObjects{get;set;} 

		public IfcRelAggregates(IfcObjectDefinition relatingObject,List<IfcObjectDefinition> relatedObjects,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingObject = relatingObject;
			RelatedObjects = relatedObjects;


		}

		public static new IfcRelAggregates FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAggregates>(json);
		}

		public static new IfcRelAggregates FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreldecomposes.htm"/>
	/// </summary>
	public abstract partial class IfcRelDecomposes : IfcRelationship
	{

		public IfcRelDecomposes(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcRelDecomposes FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelDecomposes>(json);
		}

		public static new IfcRelDecomposes FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassigns.htm"/>
	/// </summary>
	public abstract partial class IfcRelAssigns : IfcRelationship
	{
		public List<IfcObjectDefinition> RelatedObjects{get;set;} 
		public IfcObjectTypeEnum RelatedObjectsType{get;set;} // optional

		public IfcRelAssigns(List<IfcObjectDefinition> relatedObjects,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatedObjects = relatedObjects;


		}

		public static new IfcRelAssigns FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssigns>(json);
		}

		public static new IfcRelAssigns FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassignstoactor.htm"/>
	/// </summary>
	public  partial class IfcRelAssignsToActor : IfcRelAssigns
	{
		public IfcActor RelatingActor{get;set;} 
		public IfcActorRole ActingRole{get;set;} // optional

		public IfcRelAssignsToActor(IfcActor relatingActor,List<IfcObjectDefinition> relatedObjects,IfcGloballyUniqueId globalId):base(relatedObjects,globalId)
		{
			RelatingActor = relatingActor;


		}

		public static new IfcRelAssignsToActor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssignsToActor>(json);
		}

		public static new IfcRelAssignsToActor FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassignstocontrol.htm"/>
	/// </summary>
	public  partial class IfcRelAssignsToControl : IfcRelAssigns
	{
		public IfcControl RelatingControl{get;set;} 

		public IfcRelAssignsToControl(IfcControl relatingControl,List<IfcObjectDefinition> relatedObjects,IfcGloballyUniqueId globalId):base(relatedObjects,globalId)
		{
			RelatingControl = relatingControl;


		}

		public static new IfcRelAssignsToControl FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssignsToControl>(json);
		}

		public static new IfcRelAssignsToControl FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassignstogroup.htm"/>
	/// </summary>
	public  partial class IfcRelAssignsToGroup : IfcRelAssigns
	{
		public IfcGroup RelatingGroup{get;set;} 

		public IfcRelAssignsToGroup(IfcGroup relatingGroup,List<IfcObjectDefinition> relatedObjects,IfcGloballyUniqueId globalId):base(relatedObjects,globalId)
		{
			RelatingGroup = relatingGroup;


		}

		public static new IfcRelAssignsToGroup FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssignsToGroup>(json);
		}

		public static new IfcRelAssignsToGroup FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassignstoprocess.htm"/>
	/// </summary>
	public  partial class IfcRelAssignsToProcess : IfcRelAssigns
	{
		public IfcProcessSelect RelatingProcess{get;set;} 
		public IfcMeasureWithUnit QuantityInProcess{get;set;} // optional

		public IfcRelAssignsToProcess(IfcProcessSelect relatingProcess,List<IfcObjectDefinition> relatedObjects,IfcGloballyUniqueId globalId):base(relatedObjects,globalId)
		{
			RelatingProcess = relatingProcess;


		}

		public static new IfcRelAssignsToProcess FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssignsToProcess>(json);
		}

		public static new IfcRelAssignsToProcess FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassignstoproduct.htm"/>
	/// </summary>
	public  partial class IfcRelAssignsToProduct : IfcRelAssigns
	{
		public IfcProductSelect RelatingProduct{get;set;} 

		public IfcRelAssignsToProduct(IfcProductSelect relatingProduct,List<IfcObjectDefinition> relatedObjects,IfcGloballyUniqueId globalId):base(relatedObjects,globalId)
		{
			RelatingProduct = relatingProduct;


		}

		public static new IfcRelAssignsToProduct FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssignsToProduct>(json);
		}

		public static new IfcRelAssignsToProduct FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassignstoresource.htm"/>
	/// </summary>
	public  partial class IfcRelAssignsToResource : IfcRelAssigns
	{
		public IfcResourceSelect RelatingResource{get;set;} 

		public IfcRelAssignsToResource(IfcResourceSelect relatingResource,List<IfcObjectDefinition> relatedObjects,IfcGloballyUniqueId globalId):base(relatedObjects,globalId)
		{
			RelatingResource = relatingResource;


		}

		public static new IfcRelAssignsToResource FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssignsToResource>(json);
		}

		public static new IfcRelAssignsToResource FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelationship.htm"/>
	/// </summary>
	public abstract partial class IfcRelationship : IfcRoot
	{

		public IfcRelationship(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelationship>(json);
		}

		public static new IfcRelationship FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassignstogroupbyfactor.htm"/>
	/// </summary>
	public  partial class IfcRelAssignsToGroupByFactor : IfcRelAssignsToGroup
	{
		public IfcRatioMeasure Factor{get;set;} 

		public IfcRelAssignsToGroupByFactor(IfcRatioMeasure factor,IfcGroup relatingGroup,List<IfcObjectDefinition> relatedObjects,IfcGloballyUniqueId globalId):base(relatingGroup,relatedObjects,globalId)
		{
			Factor = factor;


		}

		public static new IfcRelAssignsToGroupByFactor FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssignsToGroupByFactor>(json);
		}

		public static new IfcRelAssignsToGroupByFactor FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassociates.htm"/>
	/// </summary>
	public abstract partial class IfcRelAssociates : IfcRelationship
	{
		public List<IfcDefinitionSelect> RelatedObjects{get;set;} 

		public IfcRelAssociates(List<IfcDefinitionSelect> relatedObjects,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatedObjects = relatedObjects;


		}

		public static new IfcRelAssociates FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssociates>(json);
		}

		public static new IfcRelAssociates FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassociatesapproval.htm"/>
	/// </summary>
	public  partial class IfcRelAssociatesApproval : IfcRelAssociates
	{
		public IfcApproval RelatingApproval{get;set;} 

		public IfcRelAssociatesApproval(IfcApproval relatingApproval,List<IfcDefinitionSelect> relatedObjects,IfcGloballyUniqueId globalId):base(relatedObjects,globalId)
		{
			RelatingApproval = relatingApproval;


		}

		public static new IfcRelAssociatesApproval FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssociatesApproval>(json);
		}

		public static new IfcRelAssociatesApproval FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassociatesclassification.htm"/>
	/// </summary>
	public  partial class IfcRelAssociatesClassification : IfcRelAssociates
	{
		public IfcClassificationSelect RelatingClassification{get;set;} 

		public IfcRelAssociatesClassification(IfcClassificationSelect relatingClassification,List<IfcDefinitionSelect> relatedObjects,IfcGloballyUniqueId globalId):base(relatedObjects,globalId)
		{
			RelatingClassification = relatingClassification;


		}

		public static new IfcRelAssociatesClassification FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssociatesClassification>(json);
		}

		public static new IfcRelAssociatesClassification FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassociatesconstraint.htm"/>
	/// </summary>
	public  partial class IfcRelAssociatesConstraint : IfcRelAssociates
	{
		public IfcLabel Intent{get;set;} // optional
		public IfcConstraint RelatingConstraint{get;set;} 

		public IfcRelAssociatesConstraint(IfcConstraint relatingConstraint,List<IfcDefinitionSelect> relatedObjects,IfcGloballyUniqueId globalId):base(relatedObjects,globalId)
		{
			RelatingConstraint = relatingConstraint;


		}

		public static new IfcRelAssociatesConstraint FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssociatesConstraint>(json);
		}

		public static new IfcRelAssociatesConstraint FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassociatesdocument.htm"/>
	/// </summary>
	public  partial class IfcRelAssociatesDocument : IfcRelAssociates
	{
		public IfcDocumentSelect RelatingDocument{get;set;} 

		public IfcRelAssociatesDocument(IfcDocumentSelect relatingDocument,List<IfcDefinitionSelect> relatedObjects,IfcGloballyUniqueId globalId):base(relatedObjects,globalId)
		{
			RelatingDocument = relatingDocument;


		}

		public static new IfcRelAssociatesDocument FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssociatesDocument>(json);
		}

		public static new IfcRelAssociatesDocument FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassociateslibrary.htm"/>
	/// </summary>
	public  partial class IfcRelAssociatesLibrary : IfcRelAssociates
	{
		public IfcLibrarySelect RelatingLibrary{get;set;} 

		public IfcRelAssociatesLibrary(IfcLibrarySelect relatingLibrary,List<IfcDefinitionSelect> relatedObjects,IfcGloballyUniqueId globalId):base(relatedObjects,globalId)
		{
			RelatingLibrary = relatingLibrary;


		}

		public static new IfcRelAssociatesLibrary FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssociatesLibrary>(json);
		}

		public static new IfcRelAssociatesLibrary FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelassociatesmaterial.htm"/>
	/// </summary>
	public  partial class IfcRelAssociatesMaterial : IfcRelAssociates
	{
		public IfcMaterialSelect RelatingMaterial{get;set;} 

		public IfcRelAssociatesMaterial(IfcMaterialSelect relatingMaterial,List<IfcDefinitionSelect> relatedObjects,IfcGloballyUniqueId globalId):base(relatedObjects,globalId)
		{
			RelatingMaterial = relatingMaterial;


		}

		public static new IfcRelAssociatesMaterial FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelAssociatesMaterial>(json);
		}

		public static new IfcRelAssociatesMaterial FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnects.htm"/>
	/// </summary>
	public abstract partial class IfcRelConnects : IfcRelationship
	{

		public IfcRelConnects(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcRelConnects FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnects>(json);
		}

		public static new IfcRelConnects FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnectselements.htm"/>
	/// </summary>
	public  partial class IfcRelConnectsElements : IfcRelConnects
	{
		public IfcConnectionGeometry ConnectionGeometry{get;set;} // optional
		public IfcElement RelatingElement{get;set;} 
		public IfcElement RelatedElement{get;set;} 

		public IfcRelConnectsElements(IfcElement relatingElement,IfcElement relatedElement,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingElement = relatingElement;
			RelatedElement = relatedElement;


		}

		public static new IfcRelConnectsElements FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnectsElements>(json);
		}

		public static new IfcRelConnectsElements FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnectsporttoelement.htm"/>
	/// </summary>
	public  partial class IfcRelConnectsPortToElement : IfcRelConnects
	{
		public IfcPort RelatingPort{get;set;} 
		public IfcDistributionElement RelatedElement{get;set;} 

		public IfcRelConnectsPortToElement(IfcPort relatingPort,IfcDistributionElement relatedElement,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingPort = relatingPort;
			RelatedElement = relatedElement;


		}

		public static new IfcRelConnectsPortToElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnectsPortToElement>(json);
		}

		public static new IfcRelConnectsPortToElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnectsports.htm"/>
	/// </summary>
	public  partial class IfcRelConnectsPorts : IfcRelConnects
	{
		public IfcPort RelatingPort{get;set;} 
		public IfcPort RelatedPort{get;set;} 
		public IfcElement RealizingElement{get;set;} // optional

		public IfcRelConnectsPorts(IfcPort relatingPort,IfcPort relatedPort,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingPort = relatingPort;
			RelatedPort = relatedPort;


		}

		public static new IfcRelConnectsPorts FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnectsPorts>(json);
		}

		public static new IfcRelConnectsPorts FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnectsstructuralactivity.htm"/>
	/// </summary>
	public  partial class IfcRelConnectsStructuralActivity : IfcRelConnects
	{
		public IfcStructuralActivityAssignmentSelect RelatingElement{get;set;} 
		public IfcStructuralActivity RelatedStructuralActivity{get;set;} 

		public IfcRelConnectsStructuralActivity(IfcStructuralActivityAssignmentSelect relatingElement,IfcStructuralActivity relatedStructuralActivity,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingElement = relatingElement;
			RelatedStructuralActivity = relatedStructuralActivity;


		}

		public static new IfcRelConnectsStructuralActivity FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnectsStructuralActivity>(json);
		}

		public static new IfcRelConnectsStructuralActivity FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnectsstructuralmember.htm"/>
	/// </summary>
	public  partial class IfcRelConnectsStructuralMember : IfcRelConnects
	{
		public IfcStructuralMember RelatingStructuralMember{get;set;} 
		public IfcStructuralConnection RelatedStructuralConnection{get;set;} 
		public IfcBoundaryCondition AppliedCondition{get;set;} // optional
		public IfcStructuralConnectionCondition AdditionalConditions{get;set;} // optional
		public IfcLengthMeasure SupportedLength{get;set;} // optional
		public IfcAxis2Placement3D ConditionCoordinateSystem{get;set;} // optional

		public IfcRelConnectsStructuralMember(IfcStructuralMember relatingStructuralMember,IfcStructuralConnection relatedStructuralConnection,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingStructuralMember = relatingStructuralMember;
			RelatedStructuralConnection = relatedStructuralConnection;


		}

		public static new IfcRelConnectsStructuralMember FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnectsStructuralMember>(json);
		}

		public static new IfcRelConnectsStructuralMember FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelcontainedinspatialstructure.htm"/>
	/// </summary>
	public  partial class IfcRelContainedInSpatialStructure : IfcRelConnects
	{
		public List<IfcProduct> RelatedElements{get;set;} 
		public IfcSpatialElement RelatingStructure{get;set;} 

		public IfcRelContainedInSpatialStructure(List<IfcProduct> relatedElements,IfcSpatialElement relatingStructure,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatedElements = relatedElements;
			RelatingStructure = relatingStructure;


		}

		public static new IfcRelContainedInSpatialStructure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelContainedInSpatialStructure>(json);
		}

		public static new IfcRelContainedInSpatialStructure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelcoversbldgelements.htm"/>
	/// </summary>
	public  partial class IfcRelCoversBldgElements : IfcRelConnects
	{
		public IfcElement RelatingBuildingElement{get;set;} 
		public List<IfcCovering> RelatedCoverings{get;set;} 

		public IfcRelCoversBldgElements(IfcElement relatingBuildingElement,List<IfcCovering> relatedCoverings,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingBuildingElement = relatingBuildingElement;
			RelatedCoverings = relatedCoverings;


		}

		public static new IfcRelCoversBldgElements FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelCoversBldgElements>(json);
		}

		public static new IfcRelCoversBldgElements FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelcoversspaces.htm"/>
	/// </summary>
	public  partial class IfcRelCoversSpaces : IfcRelConnects
	{
		public IfcSpace RelatingSpace{get;set;} 
		public List<IfcCovering> RelatedCoverings{get;set;} 

		public IfcRelCoversSpaces(IfcSpace relatingSpace,List<IfcCovering> relatedCoverings,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingSpace = relatingSpace;
			RelatedCoverings = relatedCoverings;


		}

		public static new IfcRelCoversSpaces FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelCoversSpaces>(json);
		}

		public static new IfcRelCoversSpaces FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelfillselement.htm"/>
	/// </summary>
	public  partial class IfcRelFillsElement : IfcRelConnects
	{
		public IfcOpeningElement RelatingOpeningElement{get;set;} 
		public IfcElement RelatedBuildingElement{get;set;} 

		public IfcRelFillsElement(IfcOpeningElement relatingOpeningElement,IfcElement relatedBuildingElement,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingOpeningElement = relatingOpeningElement;
			RelatedBuildingElement = relatedBuildingElement;


		}

		public static new IfcRelFillsElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelFillsElement>(json);
		}

		public static new IfcRelFillsElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelflowcontrolelements.htm"/>
	/// </summary>
	public  partial class IfcRelFlowControlElements : IfcRelConnects
	{
		public List<IfcDistributionControlElement> RelatedControlElements{get;set;} 
		public IfcDistributionFlowElement RelatingFlowElement{get;set;} 

		public IfcRelFlowControlElements(List<IfcDistributionControlElement> relatedControlElements,IfcDistributionFlowElement relatingFlowElement,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatedControlElements = relatedControlElements;
			RelatingFlowElement = relatingFlowElement;


		}

		public static new IfcRelFlowControlElements FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelFlowControlElements>(json);
		}

		public static new IfcRelFlowControlElements FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelinterfereselements.htm"/>
	/// </summary>
	public  partial class IfcRelInterferesElements : IfcRelConnects
	{
		public IfcElement RelatingElement{get;set;} 
		public IfcElement RelatedElement{get;set;} 
		public IfcConnectionGeometry InterferenceGeometry{get;set;} // optional
		public IfcIdentifier InterferenceType{get;set;} // optional
		public bool? ImpliedOrder{get;set;} 

		public IfcRelInterferesElements(IfcElement relatingElement,IfcElement relatedElement,bool? impliedOrder,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingElement = relatingElement;
			RelatedElement = relatedElement;
			ImpliedOrder = impliedOrder;


		}

		public static new IfcRelInterferesElements FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelInterferesElements>(json);
		}

		public static new IfcRelInterferesElements FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelreferencedinspatialstructure.htm"/>
	/// </summary>
	public  partial class IfcRelReferencedInSpatialStructure : IfcRelConnects
	{
		public List<IfcProduct> RelatedElements{get;set;} 
		public IfcSpatialElement RelatingStructure{get;set;} 

		public IfcRelReferencedInSpatialStructure(List<IfcProduct> relatedElements,IfcSpatialElement relatingStructure,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatedElements = relatedElements;
			RelatingStructure = relatingStructure;


		}

		public static new IfcRelReferencedInSpatialStructure FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelReferencedInSpatialStructure>(json);
		}

		public static new IfcRelReferencedInSpatialStructure FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelsequence.htm"/>
	/// </summary>
	public  partial class IfcRelSequence : IfcRelConnects
	{
		public IfcProcess RelatingProcess{get;set;} 
		public IfcProcess RelatedProcess{get;set;} 
		public IfcLagTime TimeLag{get;set;} // optional
		public IfcSequenceEnum SequenceType{get;set;} // optional
		public IfcLabel UserDefinedSequenceType{get;set;} // optional

		public IfcRelSequence(IfcProcess relatingProcess,IfcProcess relatedProcess,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingProcess = relatingProcess;
			RelatedProcess = relatedProcess;


		}

		public static new IfcRelSequence FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelSequence>(json);
		}

		public static new IfcRelSequence FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelservicesbuildings.htm"/>
	/// </summary>
	public  partial class IfcRelServicesBuildings : IfcRelConnects
	{
		public IfcSystem RelatingSystem{get;set;} 
		public List<IfcSpatialElement> RelatedBuildings{get;set;} 

		public IfcRelServicesBuildings(IfcSystem relatingSystem,List<IfcSpatialElement> relatedBuildings,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingSystem = relatingSystem;
			RelatedBuildings = relatedBuildings;


		}

		public static new IfcRelServicesBuildings FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelServicesBuildings>(json);
		}

		public static new IfcRelServicesBuildings FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelspaceboundary.htm"/>
	/// </summary>
	public  partial class IfcRelSpaceBoundary : IfcRelConnects
	{
		public IfcSpaceBoundarySelect RelatingSpace{get;set;} 
		public IfcElement RelatedBuildingElement{get;set;} 
		public IfcConnectionGeometry ConnectionGeometry{get;set;} // optional
		public IfcPhysicalOrVirtualEnum PhysicalOrVirtualBoundary{get;set;} 
		public IfcInternalOrExternalEnum InternalOrExternalBoundary{get;set;} 

		public IfcRelSpaceBoundary(IfcSpaceBoundarySelect relatingSpace,IfcElement relatedBuildingElement,IfcPhysicalOrVirtualEnum physicalOrVirtualBoundary,IfcInternalOrExternalEnum internalOrExternalBoundary,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingSpace = relatingSpace;
			RelatedBuildingElement = relatedBuildingElement;
			PhysicalOrVirtualBoundary = physicalOrVirtualBoundary;
			InternalOrExternalBoundary = internalOrExternalBoundary;


		}

		public static new IfcRelSpaceBoundary FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelSpaceBoundary>(json);
		}

		public static new IfcRelSpaceBoundary FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnectspathelements.htm"/>
	/// </summary>
	public  partial class IfcRelConnectsPathElements : IfcRelConnectsElements
	{
		public List<double> RelatingPriorities{get;set;} 
		public List<double> RelatedPriorities{get;set;} 
		public IfcConnectionTypeEnum RelatedConnectionType{get;set;} 
		public IfcConnectionTypeEnum RelatingConnectionType{get;set;} 

		public IfcRelConnectsPathElements(List<double> relatingPriorities,List<double> relatedPriorities,IfcConnectionTypeEnum relatedConnectionType,IfcConnectionTypeEnum relatingConnectionType,IfcElement relatingElement,IfcElement relatedElement,IfcGloballyUniqueId globalId):base(relatingElement,relatedElement,globalId)
		{
			RelatingPriorities = relatingPriorities;
			RelatedPriorities = relatedPriorities;
			RelatedConnectionType = relatedConnectionType;
			RelatingConnectionType = relatingConnectionType;


		}

		public static new IfcRelConnectsPathElements FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnectsPathElements>(json);
		}

		public static new IfcRelConnectsPathElements FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnectswithrealizingelements.htm"/>
	/// </summary>
	public  partial class IfcRelConnectsWithRealizingElements : IfcRelConnectsElements
	{
		public List<IfcElement> RealizingElements{get;set;} 
		public IfcLabel ConnectionType{get;set;} // optional

		public IfcRelConnectsWithRealizingElements(List<IfcElement> realizingElements,IfcElement relatingElement,IfcElement relatedElement,IfcGloballyUniqueId globalId):base(relatingElement,relatedElement,globalId)
		{
			RealizingElements = realizingElements;


		}

		public static new IfcRelConnectsWithRealizingElements FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnectsWithRealizingElements>(json);
		}

		public static new IfcRelConnectsWithRealizingElements FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelconnectswitheccentricity.htm"/>
	/// </summary>
	public  partial class IfcRelConnectsWithEccentricity : IfcRelConnectsStructuralMember
	{
		public IfcConnectionGeometry ConnectionConstraint{get;set;} 

		public IfcRelConnectsWithEccentricity(IfcConnectionGeometry connectionConstraint,IfcStructuralMember relatingStructuralMember,IfcStructuralConnection relatedStructuralConnection,IfcGloballyUniqueId globalId):base(relatingStructuralMember,relatedStructuralConnection,globalId)
		{
			ConnectionConstraint = connectionConstraint;


		}

		public static new IfcRelConnectsWithEccentricity FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelConnectsWithEccentricity>(json);
		}

		public static new IfcRelConnectsWithEccentricity FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreldeclares.htm"/>
	/// </summary>
	public  partial class IfcRelDeclares : IfcRelationship
	{
		public IfcContext RelatingContext{get;set;} 
		public List<IfcDefinitionSelect> RelatedDefinitions{get;set;} 

		public IfcRelDeclares(IfcContext relatingContext,List<IfcDefinitionSelect> relatedDefinitions,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingContext = relatingContext;
			RelatedDefinitions = relatedDefinitions;


		}

		public static new IfcRelDeclares FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelDeclares>(json);
		}

		public static new IfcRelDeclares FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelnests.htm"/>
	/// </summary>
	public  partial class IfcRelNests : IfcRelDecomposes
	{
		public IfcObjectDefinition RelatingObject{get;set;} 
		public List<IfcObjectDefinition> RelatedObjects{get;set;} 

		public IfcRelNests(IfcObjectDefinition relatingObject,List<IfcObjectDefinition> relatedObjects,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingObject = relatingObject;
			RelatedObjects = relatedObjects;


		}

		public static new IfcRelNests FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelNests>(json);
		}

		public static new IfcRelNests FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelprojectselement.htm"/>
	/// </summary>
	public  partial class IfcRelProjectsElement : IfcRelDecomposes
	{
		public IfcElement RelatingElement{get;set;} 
		public IfcFeatureElementAddition RelatedFeatureElement{get;set;} 

		public IfcRelProjectsElement(IfcElement relatingElement,IfcFeatureElementAddition relatedFeatureElement,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingElement = relatingElement;
			RelatedFeatureElement = relatedFeatureElement;


		}

		public static new IfcRelProjectsElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelProjectsElement>(json);
		}

		public static new IfcRelProjectsElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelvoidselement.htm"/>
	/// </summary>
	public  partial class IfcRelVoidsElement : IfcRelDecomposes
	{
		public IfcElement RelatingBuildingElement{get;set;} 
		public IfcFeatureElementSubtraction RelatedOpeningElement{get;set;} 

		public IfcRelVoidsElement(IfcElement relatingBuildingElement,IfcFeatureElementSubtraction relatedOpeningElement,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatingBuildingElement = relatingBuildingElement;
			RelatedOpeningElement = relatedOpeningElement;


		}

		public static new IfcRelVoidsElement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelVoidsElement>(json);
		}

		public static new IfcRelVoidsElement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreldefines.htm"/>
	/// </summary>
	public abstract partial class IfcRelDefines : IfcRelationship
	{

		public IfcRelDefines(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcRelDefines FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelDefines>(json);
		}

		public static new IfcRelDefines FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreldefinesbyobject.htm"/>
	/// </summary>
	public  partial class IfcRelDefinesByObject : IfcRelDefines
	{
		public List<IfcObject> RelatedObjects{get;set;} 
		public IfcObject RelatingObject{get;set;} 

		public IfcRelDefinesByObject(List<IfcObject> relatedObjects,IfcObject relatingObject,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatedObjects = relatedObjects;
			RelatingObject = relatingObject;


		}

		public static new IfcRelDefinesByObject FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelDefinesByObject>(json);
		}

		public static new IfcRelDefinesByObject FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreldefinesbyproperties.htm"/>
	/// </summary>
	public  partial class IfcRelDefinesByProperties : IfcRelDefines
	{
		public List<IfcObjectDefinition> RelatedObjects{get;set;} 
		public IfcPropertySetDefinitionSelect RelatingPropertyDefinition{get;set;} 

		public IfcRelDefinesByProperties(List<IfcObjectDefinition> relatedObjects,IfcPropertySetDefinitionSelect relatingPropertyDefinition,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatedObjects = relatedObjects;
			RelatingPropertyDefinition = relatingPropertyDefinition;


		}

		public static new IfcRelDefinesByProperties FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelDefinesByProperties>(json);
		}

		public static new IfcRelDefinesByProperties FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreldefinesbytemplate.htm"/>
	/// </summary>
	public  partial class IfcRelDefinesByTemplate : IfcRelDefines
	{
		public List<IfcPropertySetDefinition> RelatedPropertySets{get;set;} 
		public IfcPropertySetTemplate RelatingTemplate{get;set;} 

		public IfcRelDefinesByTemplate(List<IfcPropertySetDefinition> relatedPropertySets,IfcPropertySetTemplate relatingTemplate,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatedPropertySets = relatedPropertySets;
			RelatingTemplate = relatingTemplate;


		}

		public static new IfcRelDefinesByTemplate FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelDefinesByTemplate>(json);
		}

		public static new IfcRelDefinesByTemplate FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcreldefinesbytype.htm"/>
	/// </summary>
	public  partial class IfcRelDefinesByType : IfcRelDefines
	{
		public List<IfcObject> RelatedObjects{get;set;} 
		public IfcTypeObject RelatingType{get;set;} 

		public IfcRelDefinesByType(List<IfcObject> relatedObjects,IfcTypeObject relatingType,IfcGloballyUniqueId globalId):base(globalId)
		{
			RelatedObjects = relatedObjects;
			RelatingType = relatingType;


		}

		public static new IfcRelDefinesByType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelDefinesByType>(json);
		}

		public static new IfcRelDefinesByType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelspaceboundary1stlevel.htm"/>
	/// </summary>
	public  partial class IfcRelSpaceBoundary1stLevel : IfcRelSpaceBoundary
	{
		public IfcRelSpaceBoundary1stLevel ParentBoundary{get;set;} // optional

		public IfcRelSpaceBoundary1stLevel(IfcSpaceBoundarySelect relatingSpace,IfcElement relatedBuildingElement,IfcPhysicalOrVirtualEnum physicalOrVirtualBoundary,IfcInternalOrExternalEnum internalOrExternalBoundary,IfcGloballyUniqueId globalId):base(relatingSpace,relatedBuildingElement,physicalOrVirtualBoundary,internalOrExternalBoundary,globalId)
		{


		}

		public static new IfcRelSpaceBoundary1stLevel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelSpaceBoundary1stLevel>(json);
		}

		public static new IfcRelSpaceBoundary1stLevel FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrelspaceboundary2ndlevel.htm"/>
	/// </summary>
	public  partial class IfcRelSpaceBoundary2ndLevel : IfcRelSpaceBoundary1stLevel
	{
		public IfcRelSpaceBoundary2ndLevel CorrespondingBoundary{get;set;} // optional

		public IfcRelSpaceBoundary2ndLevel(IfcSpaceBoundarySelect relatingSpace,IfcElement relatedBuildingElement,IfcPhysicalOrVirtualEnum physicalOrVirtualBoundary,IfcInternalOrExternalEnum internalOrExternalBoundary,IfcGloballyUniqueId globalId):base(relatingSpace,relatedBuildingElement,physicalOrVirtualBoundary,internalOrExternalBoundary,globalId)
		{


		}

		public static new IfcRelSpaceBoundary2ndLevel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRelSpaceBoundary2ndLevel>(json);
		}

		public static new IfcRelSpaceBoundary2ndLevel FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrepresentation.htm"/>
	/// </summary>
	public abstract partial class IfcRepresentation : IfcBase
	{
		public IfcRepresentationContext ContextOfItems{get;set;} 
		public IfcLabel RepresentationIdentifier{get;set;} // optional
		public IfcLabel RepresentationType{get;set;} // optional
		public List<IfcRepresentationItem> Items{get;set;} 

		public IfcRepresentation(IfcRepresentationContext contextOfItems,List<IfcRepresentationItem> items):base()
		{
			ContextOfItems = contextOfItems;
			Items = items;


		}

		public static  IfcRepresentation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRepresentation>(json);
		}

		public static  IfcRepresentation FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshapemodel.htm"/>
	/// </summary>
	public abstract partial class IfcShapeModel : IfcRepresentation
	{

		public IfcShapeModel(IfcRepresentationContext contextOfItems,List<IfcRepresentationItem> items):base(contextOfItems,items)
		{


		}

		public static new IfcShapeModel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcShapeModel>(json);
		}

		public static new IfcShapeModel FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstylemodel.htm"/>
	/// </summary>
	public abstract partial class IfcStyleModel : IfcRepresentation
	{

		public IfcStyleModel(IfcRepresentationContext contextOfItems,List<IfcRepresentationItem> items):base(contextOfItems,items)
		{


		}

		public static new IfcStyleModel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStyleModel>(json);
		}

		public static new IfcStyleModel FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstyleditem.htm"/>
	/// </summary>
	public  partial class IfcStyledItem : IfcRepresentationItem
	{
		public IfcRepresentationItem Item{get;set;} // optional
		public List<IfcStyleAssignmentSelect> Styles{get;set;} 
		public IfcLabel Name{get;set;} // optional

		public IfcStyledItem(List<IfcStyleAssignmentSelect> styles):base()
		{
			Styles = styles;


		}

		public static new IfcStyledItem FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStyledItem>(json);
		}

		public static new IfcStyledItem FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrepresentationmap.htm"/>
	/// </summary>
	public  partial class IfcRepresentationMap : IfcBase
	{
		public IfcAxis2Placement MappingOrigin{get;set;} 
		public IfcRepresentation MappedRepresentation{get;set;} 

		public IfcRepresentationMap(IfcAxis2Placement mappingOrigin,IfcRepresentation mappedRepresentation):base()
		{
			MappingOrigin = mappingOrigin;
			MappedRepresentation = mappedRepresentation;


		}

		public static  IfcRepresentationMap FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRepresentationMap>(json);
		}

		public static  IfcRepresentationMap FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcresourceapprovalrelationship.htm"/>
	/// </summary>
	public  partial class IfcResourceApprovalRelationship : IfcResourceLevelRelationship
	{
		public List<IfcResourceObjectSelect> RelatedResourceObjects{get;set;} 
		public IfcApproval RelatingApproval{get;set;} 

		public IfcResourceApprovalRelationship(List<IfcResourceObjectSelect> relatedResourceObjects,IfcApproval relatingApproval):base()
		{
			RelatedResourceObjects = relatedResourceObjects;
			RelatingApproval = relatingApproval;


		}

		public static new IfcResourceApprovalRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcResourceApprovalRelationship>(json);
		}

		public static new IfcResourceApprovalRelationship FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcresourceconstraintrelationship.htm"/>
	/// </summary>
	public  partial class IfcResourceConstraintRelationship : IfcResourceLevelRelationship
	{
		public IfcConstraint RelatingConstraint{get;set;} 
		public List<IfcResourceObjectSelect> RelatedResourceObjects{get;set;} 

		public IfcResourceConstraintRelationship(IfcConstraint relatingConstraint,List<IfcResourceObjectSelect> relatedResourceObjects):base()
		{
			RelatingConstraint = relatingConstraint;
			RelatedResourceObjects = relatedResourceObjects;


		}

		public static new IfcResourceConstraintRelationship FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcResourceConstraintRelationship>(json);
		}

		public static new IfcResourceConstraintRelationship FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcresourcetime.htm"/>
	/// </summary>
	public  partial class IfcResourceTime : IfcSchedulingTime
	{
		public IfcDuration ScheduleWork{get;set;} // optional
		public IfcPositiveRatioMeasure ScheduleUsage{get;set;} // optional
		public IfcDateTime ScheduleStart{get;set;} // optional
		public IfcDateTime ScheduleFinish{get;set;} // optional
		public IfcLabel ScheduleContour{get;set;} // optional
		public IfcDuration LevelingDelay{get;set;} // optional
		public bool IsOverAllocated{get;set;} // optional
		public IfcDateTime StatusTime{get;set;} // optional
		public IfcDuration ActualWork{get;set;} // optional
		public IfcPositiveRatioMeasure ActualUsage{get;set;} // optional
		public IfcDateTime ActualStart{get;set;} // optional
		public IfcDateTime ActualFinish{get;set;} // optional
		public IfcDuration RemainingWork{get;set;} // optional
		public IfcPositiveRatioMeasure RemainingUsage{get;set;} // optional
		public IfcPositiveRatioMeasure Completion{get;set;} // optional

		public IfcResourceTime():base()
		{


		}

		public static new IfcResourceTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcResourceTime>(json);
		}

		public static new IfcResourceTime FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrevolvedareasolid.htm"/>
	/// </summary>
	public  partial class IfcRevolvedAreaSolid : IfcSweptAreaSolid
	{
		public IfcAxis1Placement Axis{get;set;} 
		public IfcPlaneAngleMeasure Angle{get;set;} 

		public IfcRevolvedAreaSolid(IfcAxis1Placement axis,IfcPlaneAngleMeasure angle,IfcProfileDef sweptArea):base(sweptArea)
		{
			Axis = axis;
			Angle = angle;


		}

		public static new IfcRevolvedAreaSolid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRevolvedAreaSolid>(json);
		}

		public static new IfcRevolvedAreaSolid FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcrevolvedareasolidtapered.htm"/>
	/// </summary>
	public  partial class IfcRevolvedAreaSolidTapered : IfcRevolvedAreaSolid
	{
		public IfcProfileDef EndSweptArea{get;set;} 

		public IfcRevolvedAreaSolidTapered(IfcProfileDef endSweptArea,IfcAxis1Placement axis,IfcPlaneAngleMeasure angle,IfcProfileDef sweptArea):base(axis,angle,sweptArea)
		{
			EndSweptArea = endSweptArea;


		}

		public static new IfcRevolvedAreaSolidTapered FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcRevolvedAreaSolidTapered>(json);
		}

		public static new IfcRevolvedAreaSolidTapered FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctasktime.htm"/>
	/// </summary>
	public  partial class IfcTaskTime : IfcSchedulingTime
	{
		public IfcTaskDurationEnum DurationType{get;set;} // optional
		public IfcDuration ScheduleDuration{get;set;} // optional
		public IfcDateTime ScheduleStart{get;set;} // optional
		public IfcDateTime ScheduleFinish{get;set;} // optional
		public IfcDateTime EarlyStart{get;set;} // optional
		public IfcDateTime EarlyFinish{get;set;} // optional
		public IfcDateTime LateStart{get;set;} // optional
		public IfcDateTime LateFinish{get;set;} // optional
		public IfcDuration FreeFloat{get;set;} // optional
		public IfcDuration TotalFloat{get;set;} // optional
		public bool IsCritical{get;set;} // optional
		public IfcDateTime StatusTime{get;set;} // optional
		public IfcDuration ActualDuration{get;set;} // optional
		public IfcDateTime ActualStart{get;set;} // optional
		public IfcDateTime ActualFinish{get;set;} // optional
		public IfcDuration RemainingTime{get;set;} // optional
		public IfcPositiveRatioMeasure Completion{get;set;} // optional

		public IfcTaskTime():base()
		{


		}

		public static new IfcTaskTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTaskTime>(json);
		}

		public static new IfcTaskTime FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcworktime.htm"/>
	/// </summary>
	public  partial class IfcWorkTime : IfcSchedulingTime
	{
		public IfcRecurrencePattern RecurrencePattern{get;set;} // optional
		public IfcDate Start{get;set;} // optional
		public IfcDate Finish{get;set;} // optional

		public IfcWorkTime():base()
		{


		}

		public static new IfcWorkTime FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWorkTime>(json);
		}

		public static new IfcWorkTime FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshapeaspect.htm"/>
	/// </summary>
	public  partial class IfcShapeAspect : IfcBase
	{
		public List<IfcShapeModel> ShapeRepresentations{get;set;} 
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public bool? ProductDefinitional{get;set;} 
		public IfcProductRepresentationSelect PartOfProductDefinitionShape{get;set;} // optional

		public IfcShapeAspect(List<IfcShapeModel> shapeRepresentations,bool? productDefinitional):base()
		{
			ShapeRepresentations = shapeRepresentations;
			ProductDefinitional = productDefinitional;


		}

		public static  IfcShapeAspect FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcShapeAspect>(json);
		}

		public static  IfcShapeAspect FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcshaperepresentation.htm"/>
	/// </summary>
	public  partial class IfcShapeRepresentation : IfcShapeModel
	{

		public IfcShapeRepresentation(IfcRepresentationContext contextOfItems,List<IfcRepresentationItem> items):base(contextOfItems,items)
		{


		}

		public static new IfcShapeRepresentation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcShapeRepresentation>(json);
		}

		public static new IfcShapeRepresentation FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctopologyrepresentation.htm"/>
	/// </summary>
	public  partial class IfcTopologyRepresentation : IfcShapeModel
	{

		public IfcTopologyRepresentation(IfcRepresentationContext contextOfItems,List<IfcRepresentationItem> items):base(contextOfItems,items)
		{


		}

		public static new IfcTopologyRepresentation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTopologyRepresentation>(json);
		}

		public static new IfcTopologyRepresentation FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsite.htm"/>
	/// </summary>
	public  partial class IfcSite : IfcSpatialStructureElement
	{
		public IfcCompoundPlaneAngleMeasure RefLatitude{get;set;} // optional
		public IfcCompoundPlaneAngleMeasure RefLongitude{get;set;} // optional
		public IfcLengthMeasure RefElevation{get;set;} // optional
		public IfcLabel LandTitleNumber{get;set;} // optional
		public IfcPostalAddress SiteAddress{get;set;} // optional

		public IfcSite(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSite FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSite>(json);
		}

		public static new IfcSite FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcslabelementedcase.htm"/>
	/// </summary>
	public  partial class IfcSlabElementedCase : IfcSlab
	{

		public IfcSlabElementedCase(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSlabElementedCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSlabElementedCase>(json);
		}

		public static new IfcSlabElementedCase FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcslabstandardcase.htm"/>
	/// </summary>
	public  partial class IfcSlabStandardCase : IfcSlab
	{

		public IfcSlabStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSlabStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSlabStandardCase>(json);
		}

		public static new IfcSlabStandardCase FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcslippageconnectioncondition.htm"/>
	/// </summary>
	public  partial class IfcSlippageConnectionCondition : IfcStructuralConnectionCondition
	{
		public IfcLengthMeasure SlippageX{get;set;} // optional
		public IfcLengthMeasure SlippageY{get;set;} // optional
		public IfcLengthMeasure SlippageZ{get;set;} // optional

		public IfcSlippageConnectionCondition():base()
		{


		}

		public static new IfcSlippageConnectionCondition FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSlippageConnectionCondition>(json);
		}

		public static new IfcSlippageConnectionCondition FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsweptdisksolid.htm"/>
	/// </summary>
	public  partial class IfcSweptDiskSolid : IfcSolidModel
	{
		public IfcCurve Directrix{get;set;} 
		public IfcPositiveLengthMeasure Radius{get;set;} 
		public IfcPositiveLengthMeasure InnerRadius{get;set;} // optional
		public IfcParameterValue StartParam{get;set;} // optional
		public IfcParameterValue EndParam{get;set;} // optional

		public IfcSweptDiskSolid(IfcCurve directrix,IfcPositiveLengthMeasure radius):base()
		{
			Directrix = directrix;
			Radius = radius;


		}

		public static new IfcSweptDiskSolid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSweptDiskSolid>(json);
		}

		public static new IfcSweptDiskSolid FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspace.htm"/>
	/// </summary>
	public  partial class IfcSpace : IfcSpatialStructureElement
	{
		public IfcSpaceTypeEnum PredefinedType{get;set;} // optional
		public IfcLengthMeasure ElevationWithFlooring{get;set;} // optional

		public IfcSpace(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSpace FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpace>(json);
		}

		public static new IfcSpace FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspacetype.htm"/>
	/// </summary>
	public  partial class IfcSpaceType : IfcSpatialStructureElementType
	{
		public IfcSpaceTypeEnum PredefinedType{get;set;} 
		public IfcLabel LongName{get;set;} // optional

		public IfcSpaceType(IfcSpaceTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcSpaceType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpaceType>(json);
		}

		public static new IfcSpaceType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspatialstructureelementtype.htm"/>
	/// </summary>
	public abstract partial class IfcSpatialStructureElementType : IfcSpatialElementType
	{

		public IfcSpatialStructureElementType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSpatialStructureElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpatialStructureElementType>(json);
		}

		public static new IfcSpatialStructureElementType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspatialzone.htm"/>
	/// </summary>
	public  partial class IfcSpatialZone : IfcSpatialElement
	{
		public IfcSpatialZoneTypeEnum PredefinedType{get;set;} // optional

		public IfcSpatialZone(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSpatialZone FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpatialZone>(json);
		}

		public static new IfcSpatialZone FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspatialelementtype.htm"/>
	/// </summary>
	public abstract partial class IfcSpatialElementType : IfcTypeProduct
	{
		public IfcLabel ElementType{get;set;} // optional

		public IfcSpatialElementType(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcSpatialElementType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpatialElementType>(json);
		}

		public static new IfcSpatialElementType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcspatialzonetype.htm"/>
	/// </summary>
	public  partial class IfcSpatialZoneType : IfcSpatialElementType
	{
		public IfcSpatialZoneTypeEnum PredefinedType{get;set;} 
		public IfcLabel LongName{get;set;} // optional

		public IfcSpatialZoneType(IfcSpatialZoneTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcSpatialZoneType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSpatialZoneType>(json);
		}

		public static new IfcSpatialZoneType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralaction.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralAction : IfcStructuralActivity
	{
		public bool DestabilizingLoad{get;set;} // optional

		public IfcStructuralAction(IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcGloballyUniqueId globalId):base(appliedLoad,globalOrLocal,globalId)
		{


		}

		public static new IfcStructuralAction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralAction>(json);
		}

		public static new IfcStructuralAction FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralcurveaction.htm"/>
	/// </summary>
	public  partial class IfcStructuralCurveAction : IfcStructuralAction
	{
		public IfcProjectedOrTrueLengthEnum ProjectedOrTrue{get;set;} // optional
		public IfcStructuralCurveActivityTypeEnum PredefinedType{get;set;} 

		public IfcStructuralCurveAction(IfcStructuralCurveActivityTypeEnum predefinedType,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcGloballyUniqueId globalId):base(appliedLoad,globalOrLocal,globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcStructuralCurveAction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralCurveAction>(json);
		}

		public static new IfcStructuralCurveAction FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralpointaction.htm"/>
	/// </summary>
	public  partial class IfcStructuralPointAction : IfcStructuralAction
	{

		public IfcStructuralPointAction(IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcGloballyUniqueId globalId):base(appliedLoad,globalOrLocal,globalId)
		{


		}

		public static new IfcStructuralPointAction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralPointAction>(json);
		}

		public static new IfcStructuralPointAction FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralsurfaceaction.htm"/>
	/// </summary>
	public  partial class IfcStructuralSurfaceAction : IfcStructuralAction
	{
		public IfcProjectedOrTrueLengthEnum ProjectedOrTrue{get;set;} // optional
		public IfcStructuralSurfaceActivityTypeEnum PredefinedType{get;set;} 

		public IfcStructuralSurfaceAction(IfcStructuralSurfaceActivityTypeEnum predefinedType,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcGloballyUniqueId globalId):base(appliedLoad,globalOrLocal,globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcStructuralSurfaceAction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralSurfaceAction>(json);
		}

		public static new IfcStructuralSurfaceAction FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralreaction.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralReaction : IfcStructuralActivity
	{

		public IfcStructuralReaction(IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcGloballyUniqueId globalId):base(appliedLoad,globalOrLocal,globalId)
		{


		}

		public static new IfcStructuralReaction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralReaction>(json);
		}

		public static new IfcStructuralReaction FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralanalysismodel.htm"/>
	/// </summary>
	public  partial class IfcStructuralAnalysisModel : IfcSystem
	{
		public IfcAnalysisModelTypeEnum PredefinedType{get;set;} 
		public IfcAxis2Placement3D OrientationOf2DPlane{get;set;} // optional
		public List<IfcStructuralLoadGroup> LoadedBy{get;set;} // optional
		public List<IfcStructuralResultGroup> HasResults{get;set;} // optional
		public IfcObjectPlacement SharedPlacement{get;set;} // optional

		public IfcStructuralAnalysisModel(IfcAnalysisModelTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;

			LoadedBy = new List<IfcStructuralLoadGroup>();
			HasResults = new List<IfcStructuralResultGroup>();

		}

		public static new IfcStructuralAnalysisModel FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralAnalysisModel>(json);
		}

		public static new IfcStructuralAnalysisModel FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralconnection.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralConnection : IfcStructuralItem
	{
		public IfcBoundaryCondition AppliedCondition{get;set;} // optional

		public IfcStructuralConnection(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcStructuralConnection FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralConnection>(json);
		}

		public static new IfcStructuralConnection FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralcurveconnection.htm"/>
	/// </summary>
	public  partial class IfcStructuralCurveConnection : IfcStructuralConnection
	{
		public IfcDirection Axis{get;set;} 

		public IfcStructuralCurveConnection(IfcDirection axis,IfcGloballyUniqueId globalId):base(globalId)
		{
			Axis = axis;


		}

		public static new IfcStructuralCurveConnection FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralCurveConnection>(json);
		}

		public static new IfcStructuralCurveConnection FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralpointconnection.htm"/>
	/// </summary>
	public  partial class IfcStructuralPointConnection : IfcStructuralConnection
	{
		public IfcAxis2Placement3D ConditionCoordinateSystem{get;set;} // optional

		public IfcStructuralPointConnection(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcStructuralPointConnection FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralPointConnection>(json);
		}

		public static new IfcStructuralPointConnection FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralsurfaceconnection.htm"/>
	/// </summary>
	public  partial class IfcStructuralSurfaceConnection : IfcStructuralConnection
	{

		public IfcStructuralSurfaceConnection(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcStructuralSurfaceConnection FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralSurfaceConnection>(json);
		}

		public static new IfcStructuralSurfaceConnection FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructurallinearaction.htm"/>
	/// </summary>
	public  partial class IfcStructuralLinearAction : IfcStructuralCurveAction
	{

		public IfcStructuralLinearAction(IfcStructuralCurveActivityTypeEnum predefinedType,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcGloballyUniqueId globalId):base(predefinedType,appliedLoad,globalOrLocal,globalId)
		{


		}

		public static new IfcStructuralLinearAction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLinearAction>(json);
		}

		public static new IfcStructuralLinearAction FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralcurvemember.htm"/>
	/// </summary>
	public  partial class IfcStructuralCurveMember : IfcStructuralMember
	{
		public IfcStructuralCurveMemberTypeEnum PredefinedType{get;set;} 
		public IfcDirection Axis{get;set;} 

		public IfcStructuralCurveMember(IfcStructuralCurveMemberTypeEnum predefinedType,IfcDirection axis,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;
			Axis = axis;


		}

		public static new IfcStructuralCurveMember FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralCurveMember>(json);
		}

		public static new IfcStructuralCurveMember FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralcurvemembervarying.htm"/>
	/// </summary>
	public  partial class IfcStructuralCurveMemberVarying : IfcStructuralCurveMember
	{

		public IfcStructuralCurveMemberVarying(IfcStructuralCurveMemberTypeEnum predefinedType,IfcDirection axis,IfcGloballyUniqueId globalId):base(predefinedType,axis,globalId)
		{


		}

		public static new IfcStructuralCurveMemberVarying FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralCurveMemberVarying>(json);
		}

		public static new IfcStructuralCurveMemberVarying FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralmember.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralMember : IfcStructuralItem
	{

		public IfcStructuralMember(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcStructuralMember FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralMember>(json);
		}

		public static new IfcStructuralMember FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralcurvereaction.htm"/>
	/// </summary>
	public  partial class IfcStructuralCurveReaction : IfcStructuralReaction
	{
		public IfcStructuralCurveActivityTypeEnum PredefinedType{get;set;} 

		public IfcStructuralCurveReaction(IfcStructuralCurveActivityTypeEnum predefinedType,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcGloballyUniqueId globalId):base(appliedLoad,globalOrLocal,globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcStructuralCurveReaction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralCurveReaction>(json);
		}

		public static new IfcStructuralCurveReaction FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralload.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralLoad : IfcBase
	{
		public IfcLabel Name{get;set;} // optional

		public IfcStructuralLoad():base()
		{


		}

		public static  IfcStructuralLoad FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoad>(json);
		}

		public static  IfcStructuralLoad FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadconfiguration.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadConfiguration : IfcStructuralLoad
	{
		public List<IfcStructuralLoadOrResult> Values{get;set;} 
		public List<List<IfcLengthMeasure>> Locations{get;set;} // optional

		public IfcStructuralLoadConfiguration(List<IfcStructuralLoadOrResult> values):base()
		{
			Values = values;

			Locations = new List<List<IfcLengthMeasure>>();

		}

		public static new IfcStructuralLoadConfiguration FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadConfiguration>(json);
		}

		public static new IfcStructuralLoadConfiguration FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadorresult.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralLoadOrResult : IfcStructuralLoad
	{

		public IfcStructuralLoadOrResult():base()
		{


		}

		public static new IfcStructuralLoadOrResult FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadOrResult>(json);
		}

		public static new IfcStructuralLoadOrResult FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadcase.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadCase : IfcStructuralLoadGroup
	{
		public List<IfcRatioMeasure> SelfWeightCoefficients{get;set;} // optional

		public IfcStructuralLoadCase(IfcLoadGroupTypeEnum predefinedType,IfcActionTypeEnum actionType,IfcActionSourceTypeEnum actionSource,IfcGloballyUniqueId globalId):base(predefinedType,actionType,actionSource,globalId)
		{

			SelfWeightCoefficients = new List<IfcRatioMeasure>();

		}

		public static new IfcStructuralLoadCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadCase>(json);
		}

		public static new IfcStructuralLoadCase FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadlinearforce.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadLinearForce : IfcStructuralLoadStatic
	{
		public IfcLinearForceMeasure LinearForceX{get;set;} // optional
		public IfcLinearForceMeasure LinearForceY{get;set;} // optional
		public IfcLinearForceMeasure LinearForceZ{get;set;} // optional
		public IfcLinearMomentMeasure LinearMomentX{get;set;} // optional
		public IfcLinearMomentMeasure LinearMomentY{get;set;} // optional
		public IfcLinearMomentMeasure LinearMomentZ{get;set;} // optional

		public IfcStructuralLoadLinearForce():base()
		{


		}

		public static new IfcStructuralLoadLinearForce FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadLinearForce>(json);
		}

		public static new IfcStructuralLoadLinearForce FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadstatic.htm"/>
	/// </summary>
	public abstract partial class IfcStructuralLoadStatic : IfcStructuralLoadOrResult
	{

		public IfcStructuralLoadStatic():base()
		{


		}

		public static new IfcStructuralLoadStatic FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadStatic>(json);
		}

		public static new IfcStructuralLoadStatic FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacereinforcementarea.htm"/>
	/// </summary>
	public  partial class IfcSurfaceReinforcementArea : IfcStructuralLoadOrResult
	{
		public List<IfcLengthMeasure> SurfaceReinforcement1{get;set;} // optional
		public List<IfcLengthMeasure> SurfaceReinforcement2{get;set;} // optional
		public IfcRatioMeasure ShearReinforcement{get;set;} // optional

		public IfcSurfaceReinforcementArea():base()
		{

			SurfaceReinforcement1 = new List<IfcLengthMeasure>();
			SurfaceReinforcement2 = new List<IfcLengthMeasure>();

		}

		public static new IfcSurfaceReinforcementArea FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceReinforcementArea>(json);
		}

		public static new IfcSurfaceReinforcementArea FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadplanarforce.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadPlanarForce : IfcStructuralLoadStatic
	{
		public IfcPlanarForceMeasure PlanarForceX{get;set;} // optional
		public IfcPlanarForceMeasure PlanarForceY{get;set;} // optional
		public IfcPlanarForceMeasure PlanarForceZ{get;set;} // optional

		public IfcStructuralLoadPlanarForce():base()
		{


		}

		public static new IfcStructuralLoadPlanarForce FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadPlanarForce>(json);
		}

		public static new IfcStructuralLoadPlanarForce FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadsingledisplacement.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadSingleDisplacement : IfcStructuralLoadStatic
	{
		public IfcLengthMeasure DisplacementX{get;set;} // optional
		public IfcLengthMeasure DisplacementY{get;set;} // optional
		public IfcLengthMeasure DisplacementZ{get;set;} // optional
		public IfcPlaneAngleMeasure RotationalDisplacementRX{get;set;} // optional
		public IfcPlaneAngleMeasure RotationalDisplacementRY{get;set;} // optional
		public IfcPlaneAngleMeasure RotationalDisplacementRZ{get;set;} // optional

		public IfcStructuralLoadSingleDisplacement():base()
		{


		}

		public static new IfcStructuralLoadSingleDisplacement FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadSingleDisplacement>(json);
		}

		public static new IfcStructuralLoadSingleDisplacement FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadsingledisplacementdistortion.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadSingleDisplacementDistortion : IfcStructuralLoadSingleDisplacement
	{
		public IfcCurvatureMeasure Distortion{get;set;} // optional

		public IfcStructuralLoadSingleDisplacementDistortion():base()
		{


		}

		public static new IfcStructuralLoadSingleDisplacementDistortion FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadSingleDisplacementDistortion>(json);
		}

		public static new IfcStructuralLoadSingleDisplacementDistortion FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadsingleforce.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadSingleForce : IfcStructuralLoadStatic
	{
		public IfcForceMeasure ForceX{get;set;} // optional
		public IfcForceMeasure ForceY{get;set;} // optional
		public IfcForceMeasure ForceZ{get;set;} // optional
		public IfcTorqueMeasure MomentX{get;set;} // optional
		public IfcTorqueMeasure MomentY{get;set;} // optional
		public IfcTorqueMeasure MomentZ{get;set;} // optional

		public IfcStructuralLoadSingleForce():base()
		{


		}

		public static new IfcStructuralLoadSingleForce FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadSingleForce>(json);
		}

		public static new IfcStructuralLoadSingleForce FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadsingleforcewarping.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadSingleForceWarping : IfcStructuralLoadSingleForce
	{
		public IfcWarpingMomentMeasure WarpingMoment{get;set;} // optional

		public IfcStructuralLoadSingleForceWarping():base()
		{


		}

		public static new IfcStructuralLoadSingleForceWarping FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadSingleForceWarping>(json);
		}

		public static new IfcStructuralLoadSingleForceWarping FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralloadtemperature.htm"/>
	/// </summary>
	public  partial class IfcStructuralLoadTemperature : IfcStructuralLoadStatic
	{
		public IfcThermodynamicTemperatureMeasure DeltaTConstant{get;set;} // optional
		public IfcThermodynamicTemperatureMeasure DeltaTY{get;set;} // optional
		public IfcThermodynamicTemperatureMeasure DeltaTZ{get;set;} // optional

		public IfcStructuralLoadTemperature():base()
		{


		}

		public static new IfcStructuralLoadTemperature FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralLoadTemperature>(json);
		}

		public static new IfcStructuralLoadTemperature FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralsurfacemember.htm"/>
	/// </summary>
	public  partial class IfcStructuralSurfaceMember : IfcStructuralMember
	{
		public IfcStructuralSurfaceMemberTypeEnum PredefinedType{get;set;} 
		public IfcPositiveLengthMeasure Thickness{get;set;} // optional

		public IfcStructuralSurfaceMember(IfcStructuralSurfaceMemberTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcStructuralSurfaceMember FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralSurfaceMember>(json);
		}

		public static new IfcStructuralSurfaceMember FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralplanaraction.htm"/>
	/// </summary>
	public  partial class IfcStructuralPlanarAction : IfcStructuralSurfaceAction
	{

		public IfcStructuralPlanarAction(IfcStructuralSurfaceActivityTypeEnum predefinedType,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcGloballyUniqueId globalId):base(predefinedType,appliedLoad,globalOrLocal,globalId)
		{


		}

		public static new IfcStructuralPlanarAction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralPlanarAction>(json);
		}

		public static new IfcStructuralPlanarAction FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralpointreaction.htm"/>
	/// </summary>
	public  partial class IfcStructuralPointReaction : IfcStructuralReaction
	{

		public IfcStructuralPointReaction(IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcGloballyUniqueId globalId):base(appliedLoad,globalOrLocal,globalId)
		{


		}

		public static new IfcStructuralPointReaction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralPointReaction>(json);
		}

		public static new IfcStructuralPointReaction FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralsurfacereaction.htm"/>
	/// </summary>
	public  partial class IfcStructuralSurfaceReaction : IfcStructuralReaction
	{
		public IfcStructuralSurfaceActivityTypeEnum PredefinedType{get;set;} 

		public IfcStructuralSurfaceReaction(IfcStructuralSurfaceActivityTypeEnum predefinedType,IfcStructuralLoad appliedLoad,IfcGlobalOrLocalEnum globalOrLocal,IfcGloballyUniqueId globalId):base(appliedLoad,globalOrLocal,globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcStructuralSurfaceReaction FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralSurfaceReaction>(json);
		}

		public static new IfcStructuralSurfaceReaction FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstructuralsurfacemembervarying.htm"/>
	/// </summary>
	public  partial class IfcStructuralSurfaceMemberVarying : IfcStructuralSurfaceMember
	{

		public IfcStructuralSurfaceMemberVarying(IfcStructuralSurfaceMemberTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(predefinedType,globalId)
		{


		}

		public static new IfcStructuralSurfaceMemberVarying FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStructuralSurfaceMemberVarying>(json);
		}

		public static new IfcStructuralSurfaceMemberVarying FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcstyledrepresentation.htm"/>
	/// </summary>
	public  partial class IfcStyledRepresentation : IfcStyleModel
	{

		public IfcStyledRepresentation(IfcRepresentationContext contextOfItems,List<IfcRepresentationItem> items):base(contextOfItems,items)
		{


		}

		public static new IfcStyledRepresentation FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcStyledRepresentation>(json);
		}

		public static new IfcStyledRepresentation FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsweptsurface.htm"/>
	/// </summary>
	public abstract partial class IfcSweptSurface : IfcSurface
	{
		public IfcProfileDef SweptCurve{get;set;} 
		public IfcAxis2Placement3D Position{get;set;} // optional

		public IfcSweptSurface(IfcProfileDef sweptCurve):base()
		{
			SweptCurve = sweptCurve;


		}

		public static new IfcSweptSurface FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSweptSurface>(json);
		}

		public static new IfcSweptSurface FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacecurvesweptareasolid.htm"/>
	/// </summary>
	public  partial class IfcSurfaceCurveSweptAreaSolid : IfcSweptAreaSolid
	{
		public IfcCurve Directrix{get;set;} 
		public IfcParameterValue StartParam{get;set;} // optional
		public IfcParameterValue EndParam{get;set;} // optional
		public IfcSurface ReferenceSurface{get;set;} 

		public IfcSurfaceCurveSweptAreaSolid(IfcCurve directrix,IfcSurface referenceSurface,IfcProfileDef sweptArea):base(sweptArea)
		{
			Directrix = directrix;
			ReferenceSurface = referenceSurface;


		}

		public static new IfcSurfaceCurveSweptAreaSolid FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceCurveSweptAreaSolid>(json);
		}

		public static new IfcSurfaceCurveSweptAreaSolid FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfaceoflinearextrusion.htm"/>
	/// </summary>
	public  partial class IfcSurfaceOfLinearExtrusion : IfcSweptSurface
	{
		public IfcDirection ExtrudedDirection{get;set;} 
		public IfcLengthMeasure Depth{get;set;} 

		public IfcSurfaceOfLinearExtrusion(IfcDirection extrudedDirection,IfcLengthMeasure depth,IfcProfileDef sweptCurve):base(sweptCurve)
		{
			ExtrudedDirection = extrudedDirection;
			Depth = depth;


		}

		public static new IfcSurfaceOfLinearExtrusion FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceOfLinearExtrusion>(json);
		}

		public static new IfcSurfaceOfLinearExtrusion FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfaceofrevolution.htm"/>
	/// </summary>
	public  partial class IfcSurfaceOfRevolution : IfcSweptSurface
	{
		public IfcAxis1Placement AxisPosition{get;set;} 

		public IfcSurfaceOfRevolution(IfcAxis1Placement axisPosition,IfcProfileDef sweptCurve):base(sweptCurve)
		{
			AxisPosition = axisPosition;


		}

		public static new IfcSurfaceOfRevolution FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceOfRevolution>(json);
		}

		public static new IfcSurfaceOfRevolution FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsurfacestylerendering.htm"/>
	/// </summary>
	public  partial class IfcSurfaceStyleRendering : IfcSurfaceStyleShading
	{
		public IfcNormalisedRatioMeasure Transparency{get;set;} // optional
		public IfcColourOrFactor DiffuseColour{get;set;} // optional
		public IfcColourOrFactor TransmissionColour{get;set;} // optional
		public IfcColourOrFactor DiffuseTransmissionColour{get;set;} // optional
		public IfcColourOrFactor ReflectionColour{get;set;} // optional
		public IfcColourOrFactor SpecularColour{get;set;} // optional
		public IfcSpecularHighlightSelect SpecularHighlight{get;set;} // optional
		public IfcReflectanceMethodEnum ReflectanceMethod{get;set;} 

		public IfcSurfaceStyleRendering(IfcReflectanceMethodEnum reflectanceMethod,IfcColourRgb surfaceColour):base(surfaceColour)
		{
			ReflectanceMethod = reflectanceMethod;


		}

		public static new IfcSurfaceStyleRendering FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSurfaceStyleRendering>(json);
		}

		public static new IfcSurfaceStyleRendering FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcsweptdisksolidpolygonal.htm"/>
	/// </summary>
	public  partial class IfcSweptDiskSolidPolygonal : IfcSweptDiskSolid
	{
		public IfcPositiveLengthMeasure FilletRadius{get;set;} // optional

		public IfcSweptDiskSolidPolygonal(IfcCurve directrix,IfcPositiveLengthMeasure radius):base(directrix,radius)
		{


		}

		public static new IfcSweptDiskSolidPolygonal FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcSweptDiskSolidPolygonal>(json);
		}

		public static new IfcSweptDiskSolidPolygonal FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifczone.htm"/>
	/// </summary>
	public  partial class IfcZone : IfcSystem
	{
		public IfcLabel LongName{get;set;} // optional

		public IfcZone(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcZone FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcZone>(json);
		}

		public static new IfcZone FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctable.htm"/>
	/// </summary>
	public  partial class IfcTable : IfcBase
	{
		public IfcLabel Name{get;set;} // optional
		public List<IfcTableRow> Rows{get;set;} // optional
		public List<IfcTableColumn> Columns{get;set;} // optional

		public IfcTable():base()
		{

			Rows = new List<IfcTableRow>();
			Columns = new List<IfcTableColumn>();

		}

		public static  IfcTable FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTable>(json);
		}

		public static  IfcTable FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctablecolumn.htm"/>
	/// </summary>
	public  partial class IfcTableColumn : IfcBase
	{
		public IfcIdentifier Identifier{get;set;} // optional
		public IfcLabel Name{get;set;} // optional
		public IfcText Description{get;set;} // optional
		public IfcUnit Unit{get;set;} // optional
		public IfcReference ReferencePath{get;set;} // optional

		public IfcTableColumn():base()
		{


		}

		public static  IfcTableColumn FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTableColumn>(json);
		}

		public static  IfcTableColumn FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctablerow.htm"/>
	/// </summary>
	public  partial class IfcTableRow : IfcBase
	{
		public List<IfcValue> RowCells{get;set;} // optional
		public bool IsHeading{get;set;} // optional

		public IfcTableRow():base()
		{

			RowCells = new List<IfcValue>();

		}

		public static  IfcTableRow FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTableRow>(json);
		}

		public static  IfcTableRow FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctasktimerecurring.htm"/>
	/// </summary>
	public  partial class IfcTaskTimeRecurring : IfcTaskTime
	{
		public IfcRecurrencePattern Recurrance{get;set;} 

		public IfcTaskTimeRecurring(IfcRecurrencePattern recurrance):base()
		{
			Recurrance = recurrance;


		}

		public static new IfcTaskTimeRecurring FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTaskTimeRecurring>(json);
		}

		public static new IfcTaskTimeRecurring FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctasktype.htm"/>
	/// </summary>
	public  partial class IfcTaskType : IfcTypeProcess
	{
		public IfcTaskTypeEnum PredefinedType{get;set;} 
		public IfcLabel WorkMethod{get;set;} // optional

		public IfcTaskType(IfcTaskTypeEnum predefinedType,IfcGloballyUniqueId globalId):base(globalId)
		{
			PredefinedType = predefinedType;


		}

		public static new IfcTaskType FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTaskType>(json);
		}

		public static new IfcTaskType FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctessellatedfaceset.htm"/>
	/// </summary>
	public abstract partial class IfcTessellatedFaceSet : IfcTessellatedItem
	{
		public IfcCartesianPointList3D Coordinates{get;set;} 
		public List<List<IfcParameterValue>> Normals{get;set;} // optional
		public bool Closed{get;set;} // optional

		public IfcTessellatedFaceSet(IfcCartesianPointList3D coordinates):base()
		{
			Coordinates = coordinates;

			Normals = new List<List<IfcParameterValue>>();

		}

		public static new IfcTessellatedFaceSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTessellatedFaceSet>(json);
		}

		public static new IfcTessellatedFaceSet FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctriangulatedfaceset.htm"/>
	/// </summary>
	public  partial class IfcTriangulatedFaceSet : IfcTessellatedFaceSet
	{
		public List<List<int>> CoordIndex{get;set;} 
		public List<List<int>> NormalIndex{get;set;} // optional

		public IfcTriangulatedFaceSet(List<List<int>> coordIndex,IfcCartesianPointList3D coordinates):base(coordinates)
		{
			CoordIndex = coordIndex;

			NormalIndex = new List<List<int>>();

		}

		public static new IfcTriangulatedFaceSet FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTriangulatedFaceSet>(json);
		}

		public static new IfcTriangulatedFaceSet FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctextliteralwithextent.htm"/>
	/// </summary>
	public  partial class IfcTextLiteralWithExtent : IfcTextLiteral
	{
		public IfcPlanarExtent Extent{get;set;} 
		public IfcBoxAlignment BoxAlignment{get;set;} 

		public IfcTextLiteralWithExtent(IfcPlanarExtent extent,IfcBoxAlignment boxAlignment,IfcPresentableText literal,IfcAxis2Placement placement,IfcTextPath path):base(literal,placement,path)
		{
			Extent = extent;
			BoxAlignment = boxAlignment;


		}

		public static new IfcTextLiteralWithExtent FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextLiteralWithExtent>(json);
		}

		public static new IfcTextLiteralWithExtent FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctexturecoordinategenerator.htm"/>
	/// </summary>
	public  partial class IfcTextureCoordinateGenerator : IfcTextureCoordinate
	{
		public IfcLabel Mode{get;set;} 
		public List<IfcReal> Parameter{get;set;} // optional

		public IfcTextureCoordinateGenerator(IfcLabel mode,List<IfcSurfaceTexture> maps):base(maps)
		{
			Mode = mode;

			Parameter = new List<IfcReal>();

		}

		public static new IfcTextureCoordinateGenerator FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextureCoordinateGenerator>(json);
		}

		public static new IfcTextureCoordinateGenerator FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctexturemap.htm"/>
	/// </summary>
	public  partial class IfcTextureMap : IfcTextureCoordinate
	{
		public List<IfcTextureVertex> Vertices{get;set;} 
		public IfcFace MappedTo{get;set;} 

		public IfcTextureMap(List<IfcTextureVertex> vertices,IfcFace mappedTo,List<IfcSurfaceTexture> maps):base(maps)
		{
			Vertices = vertices;
			MappedTo = mappedTo;


		}

		public static new IfcTextureMap FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTextureMap>(json);
		}

		public static new IfcTextureMap FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctimeperiod.htm"/>
	/// </summary>
	public  partial class IfcTimePeriod : IfcBase
	{
		public IfcTime StartTime{get;set;} 
		public IfcTime EndTime{get;set;} 

		public IfcTimePeriod(IfcTime startTime,IfcTime endTime):base()
		{
			StartTime = startTime;
			EndTime = endTime;


		}

		public static  IfcTimePeriod FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTimePeriod>(json);
		}

		public static  IfcTimePeriod FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifctimeseriesvalue.htm"/>
	/// </summary>
	public  partial class IfcTimeSeriesValue : IfcBase
	{
		public List<IfcValue> ListValues{get;set;} 

		public IfcTimeSeriesValue(List<IfcValue> listValues):base()
		{
			ListValues = listValues;


		}

		public static  IfcTimeSeriesValue FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcTimeSeriesValue>(json);
		}

		public static  IfcTimeSeriesValue FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvertex.htm"/>
	/// </summary>
	public  partial class IfcVertex : IfcTopologicalRepresentationItem
	{

		public IfcVertex():base()
		{


		}

		public static new IfcVertex FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVertex>(json);
		}

		public static new IfcVertex FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowstyle.htm"/>
	/// </summary>
	public  partial class IfcWindowStyle : IfcTypeProduct
	{
		public IfcWindowStyleConstructionEnum ConstructionType{get;set;} 
		public IfcWindowStyleOperationEnum OperationType{get;set;} 
		public bool ParameterTakesPrecedence{get;set;} 
		public bool Sizeable{get;set;} 

		public IfcWindowStyle(IfcWindowStyleConstructionEnum constructionType,IfcWindowStyleOperationEnum operationType,bool parameterTakesPrecedence,bool sizeable,IfcGloballyUniqueId globalId):base(globalId)
		{
			ConstructionType = constructionType;
			OperationType = operationType;
			ParameterTakesPrecedence = parameterTakesPrecedence;
			Sizeable = sizeable;


		}

		public static new IfcWindowStyle FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWindowStyle>(json);
		}

		public static new IfcWindowStyle FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcunitassignment.htm"/>
	/// </summary>
	public  partial class IfcUnitAssignment : IfcBase
	{
		public List<IfcUnit> Units{get;set;} 

		public IfcUnitAssignment(List<IfcUnit> units):base()
		{
			Units = units;


		}

		public static  IfcUnitAssignment FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcUnitAssignment>(json);
		}

		public static  IfcUnitAssignment FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvertexpoint.htm"/>
	/// </summary>
	public  partial class IfcVertexPoint : IfcVertex
	{
		public IfcPoint VertexGeometry{get;set;} 

		public IfcVertexPoint(IfcPoint vertexGeometry):base()
		{
			VertexGeometry = vertexGeometry;


		}

		public static new IfcVertexPoint FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVertexPoint>(json);
		}

		public static new IfcVertexPoint FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcvirtualgridintersection.htm"/>
	/// </summary>
	public  partial class IfcVirtualGridIntersection : IfcBase
	{
		public List<IfcGridAxis> IntersectingAxes{get;set;} 
		public List<IfcLengthMeasure> OffsetDistances{get;set;} 

		public IfcVirtualGridIntersection(List<IfcGridAxis> intersectingAxes,List<IfcLengthMeasure> offsetDistances):base()
		{
			IntersectingAxes = intersectingAxes;
			OffsetDistances = offsetDistances;


		}

		public static  IfcVirtualGridIntersection FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcVirtualGridIntersection>(json);
		}

		public static  IfcVirtualGridIntersection FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwallelementedcase.htm"/>
	/// </summary>
	public  partial class IfcWallElementedCase : IfcWall
	{

		public IfcWallElementedCase(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcWallElementedCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWallElementedCase>(json);
		}

		public static new IfcWallElementedCase FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwallstandardcase.htm"/>
	/// </summary>
	public  partial class IfcWallStandardCase : IfcWall
	{

		public IfcWallStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcWallStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWallStandardCase>(json);
		}

		public static new IfcWallStandardCase FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcwindowstandardcase.htm"/>
	/// </summary>
	public  partial class IfcWindowStandardCase : IfcWindow
	{

		public IfcWindowStandardCase(IfcGloballyUniqueId globalId):base(globalId)
		{


		}

		public static new IfcWindowStandardCase FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWindowStandardCase>(json);
		}

		public static new IfcWindowStandardCase FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcworkplan.htm"/>
	/// </summary>
	public  partial class IfcWorkPlan : IfcWorkControl
	{
		public IfcWorkPlanTypeEnum PredefinedType{get;set;} // optional

		public IfcWorkPlan(IfcDateTime creationDate,IfcDateTime startTime,IfcGloballyUniqueId globalId):base(creationDate,startTime,globalId)
		{


		}

		public static new IfcWorkPlan FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWorkPlan>(json);
		}

		public static new IfcWorkPlan FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}

	/// <summary>
	/// <see href="http://www.buildingsmart-tech.org/ifc/IFC4/final/html/link/ifcworkschedule.htm"/>
	/// </summary>
	public  partial class IfcWorkSchedule : IfcWorkControl
	{
		public IfcWorkScheduleTypeEnum PredefinedType{get;set;} // optional

		public IfcWorkSchedule(IfcDateTime creationDate,IfcDateTime startTime,IfcGloballyUniqueId globalId):base(creationDate,startTime,globalId)
		{


		}

		public static new IfcWorkSchedule FromJSON(string json)
		{
			return JsonConvert.DeserializeObject<IfcWorkSchedule>(json);
		}

		public static new IfcWorkSchedule FromSTEP(string step)
		{
			throw new NotImplementedException();
		}
	}
}
